'use strict';

var Js_string = require("@rescript/std/lib/js/js_string.js");
var E_A$QuriSquiggleLang = require("../../Utility/E/E_A.bs.js");
var Reducer_Value$QuriSquiggleLang = require("../Reducer_Value.bs.js");
var Reducer_Extra_Array$QuriSquiggleLang = require("../Reducer_Extra/Reducer_Extra_Array.bs.js");
var Reducer_Peggy_Parse$QuriSquiggleLang = require("../Reducer_Peggy/Reducer_Peggy_Parse.bs.js");

function commaJoin(values) {
  return Js_string.concatMany(Reducer_Extra_Array$QuriSquiggleLang.intersperse(values, ", "), "");
}

function semicolonJoin(values) {
  return Js_string.concatMany(Reducer_Extra_Array$QuriSquiggleLang.intersperse(values, "; "), "");
}

function toString(expression) {
  var statements = expression.content;
  switch (statements.TAG | 0) {
    case /* EBlock */0 :
        return "{" + semicolonJoin(statements._0.map(toString)) + "}";
    case /* EProgram */1 :
        return semicolonJoin(statements._0.map(toString));
    case /* EArray */2 :
        return "[" + commaJoin(statements._0.map(toString)) + "]";
    case /* ERecord */3 :
        return "{" + commaJoin(E_A$QuriSquiggleLang.fmap(statements._0, (function (param) {
                          return "" + toString(param[0]) + ": " + toString(param[1]) + "";
                        }))) + "}";
    case /* ESymbol */4 :
        return statements._0;
    case /* ETernary */5 :
        return "" + toString(statements._0) + " ? (" + toString(statements._1) + ") : (" + toString(statements._2) + ")";
    case /* EAssign */6 :
        return "" + statements._0 + " = " + toString(statements._1) + "";
    case /* ECall */7 :
        return "(" + toString(statements._0) + ")(" + commaJoin(statements._1.map(toString)) + ")";
    case /* ELambda */8 :
        return "{|" + commaJoin(statements._0) + "| " + toString(statements._1) + "}";
    case /* EValue */9 :
        return Reducer_Value$QuriSquiggleLang.toString(statements._0);
    
  }
}

function toStringResult(codeResult) {
  if (codeResult.TAG === /* Ok */0) {
    return "Ok(" + toString(codeResult._0) + ")";
  } else {
    return "Error(" + Reducer_Peggy_Parse$QuriSquiggleLang.toStringError(codeResult._0) + ")";
  }
}

function toStringResultOkless(codeResult) {
  if (codeResult.TAG === /* Ok */0) {
    return toString(codeResult._0);
  } else {
    return "Error(" + Reducer_Peggy_Parse$QuriSquiggleLang.toStringError(codeResult._0) + ")";
  }
}

function inspect(expr) {
  console.log(toString(expr));
  return expr;
}

exports.commaJoin = commaJoin;
exports.semicolonJoin = semicolonJoin;
exports.toString = toString;
exports.toStringResult = toStringResult;
exports.toStringResultOkless = toStringResultOkless;
exports.inspect = inspect;
/* E_A-QuriSquiggleLang Not a pure module */
