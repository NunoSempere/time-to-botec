/* TypeScript file generated from Reducer_Peggy_Parse.res by genType. */
/* eslint-disable import/first */


// @ts-ignore: Implicit any on import
const Curry = require('@rescript/std/lib/js/curry.js');

// @ts-ignore: Implicit any on import
const Reducer_Peggy_ParseBS = require('./Reducer_Peggy_Parse.bs');

// tslint:disable-next-line:interface-over-type-literal
export type locationPoint = { readonly line: number; readonly column: number };

// tslint:disable-next-line:interface-over-type-literal
export type location = {
  readonly source: string; 
  readonly start: locationPoint; 
  readonly end: locationPoint
};

// tslint:disable-next-line:interface-over-type-literal
export type node = { readonly type: string; readonly location: location };

// tslint:disable-next-line:max-classes-per-file 
export abstract class ParseError_t { protected opaque!: any }; /* simulate opaque types */

// tslint:disable-next-line:interface-over-type-literal
export type parseError = ParseError_t;

// tslint:disable-next-line:interface-over-type-literal
export type parseResult = 
    { tag: "Ok"; value: node }
  | { tag: "Error"; value: parseError };

export const ParseError_getMessage: (param:ParseError_t) => string = Reducer_Peggy_ParseBS.ParseError.getMessage;

export const ParseError_getLocation: (param:ParseError_t) => location = Reducer_Peggy_ParseBS.ParseError.getLocation;

export const parse: (expr:string, source:string) => parseResult = function (Arg1: any, Arg2: any) {
  const result = Curry._2(Reducer_Peggy_ParseBS.parse, Arg1, Arg2);
  return result.TAG===0
    ? {tag:"Ok", value:result._0}
    : {tag:"Error", value:result._0}
};

export const ParseError: { getLocation: (param:ParseError_t) => location; getMessage: (param:ParseError_t) => string } = Reducer_Peggy_ParseBS.ParseError
