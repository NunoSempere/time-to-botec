'use strict';

var Reducer_Peggy_Parse$QuriSquiggleLang = require("./Reducer_Peggy_Parse.bs.js");
var Reducer_Expression_ExpressionBuilder$QuriSquiggleLang = require("../Reducer_Expression/Reducer_Expression_ExpressionBuilder.bs.js");

function fromNode(node) {
  var ast = Reducer_Peggy_Parse$QuriSquiggleLang.nodeToAST(node);
  var caseBlock = function (nodeBlock) {
    return Reducer_Expression_ExpressionBuilder$QuriSquiggleLang.eBlock(nodeBlock.statements.map(fromNode));
  };
  var caseProgram = function (nodeProgram) {
    return Reducer_Expression_ExpressionBuilder$QuriSquiggleLang.eProgram(nodeProgram.statements.map(fromNode));
  };
  var caseLambda = function (nodeLambda) {
    var args = nodeLambda.args.map(function (argNode) {
          return argNode.value;
        });
    var body = fromNode(nodeLambda.body);
    return Reducer_Expression_ExpressionBuilder$QuriSquiggleLang.eLambda(args, body, nodeLambda.name);
  };
  var caseRecord = function (nodeRecord) {
    return Reducer_Expression_ExpressionBuilder$QuriSquiggleLang.eRecord(nodeRecord.elements.map(function (keyValueNode) {
                    return [
                            fromNode(keyValueNode.key),
                            fromNode(keyValueNode.value)
                          ];
                  }));
  };
  var nodeBlock = ast.content;
  var content;
  switch (nodeBlock.TAG | 0) {
    case /* ASTBlock */0 :
        content = caseBlock(nodeBlock._0);
        break;
    case /* ASTProgram */1 :
        content = caseProgram(nodeBlock._0);
        break;
    case /* ASTArray */2 :
        content = Reducer_Expression_ExpressionBuilder$QuriSquiggleLang.eArray(nodeBlock._0.elements.map(fromNode));
        break;
    case /* ASTRecord */3 :
        content = caseRecord(nodeBlock._0);
        break;
    case /* ASTBoolean */4 :
        content = Reducer_Expression_ExpressionBuilder$QuriSquiggleLang.eBool(nodeBlock._0.value);
        break;
    case /* ASTCall */6 :
        var nodeCall = nodeBlock._0;
        content = Reducer_Expression_ExpressionBuilder$QuriSquiggleLang.eCall(fromNode(nodeCall.fn), nodeCall.args.map(fromNode));
        break;
    case /* ASTIdentifier */7 :
        content = Reducer_Expression_ExpressionBuilder$QuriSquiggleLang.eSymbol(nodeBlock._0.value);
        break;
    case /* ASTFloat */5 :
    case /* ASTInteger */8 :
        content = Reducer_Expression_ExpressionBuilder$QuriSquiggleLang.eNumber(nodeBlock._0.value);
        break;
    case /* ASTKeyValue */9 :
        var nodeKeyValue = nodeBlock._0;
        content = Reducer_Expression_ExpressionBuilder$QuriSquiggleLang.eArray([
              fromNode(nodeKeyValue.key),
              fromNode(nodeKeyValue.value)
            ]);
        break;
    case /* ASTLambda */10 :
        content = caseLambda(nodeBlock._0);
        break;
    case /* ASTLetStatement */11 :
        var nodeLetStatement = nodeBlock._0;
        content = Reducer_Expression_ExpressionBuilder$QuriSquiggleLang.eLetStatement(nodeLetStatement.variable.value, fromNode(nodeLetStatement.value));
        break;
    case /* ASTModuleIdentifier */12 :
        content = Reducer_Expression_ExpressionBuilder$QuriSquiggleLang.eIdentifier(nodeBlock._0.value);
        break;
    case /* ASTString */13 :
        content = Reducer_Expression_ExpressionBuilder$QuriSquiggleLang.eString(nodeBlock._0.value);
        break;
    case /* ASTTernary */14 :
        var nodeTernary = nodeBlock._0;
        content = Reducer_Expression_ExpressionBuilder$QuriSquiggleLang.eTernary(fromNode(nodeTernary.condition), fromNode(nodeTernary.trueExpression), fromNode(nodeTernary.falseExpression));
        break;
    case /* ASTVoid */15 :
        content = Reducer_Expression_ExpressionBuilder$QuriSquiggleLang.eVoid;
        break;
    
  }
  return {
          ast: ast,
          content: content
        };
}

var ExpressionBuilder;

var ExpressionT;

var Parse;

exports.ExpressionBuilder = ExpressionBuilder;
exports.ExpressionT = ExpressionT;
exports.Parse = Parse;
exports.fromNode = fromNode;
/* Reducer_Peggy_Parse-QuriSquiggleLang Not a pure module */
