'use strict';

var Curry = require("@rescript/std/lib/js/curry.js");
var Js_exn = require("@rescript/std/lib/js/js_exn.js");
var Caml_exceptions = require("@rescript/std/lib/js/caml_exceptions.js");
var Caml_js_exceptions = require("@rescript/std/lib/js/caml_js_exceptions.js");
var Operation$QuriSquiggleLang = require("./Utility/Operation.bs.js");
var DistributionTypes$QuriSquiggleLang = require("./Distributions/DistributionTypes.bs.js");
var Reducer_FrameStack$QuriSquiggleLang = require("./Reducer/Reducer_FrameStack.bs.js");

var MessageException = /* @__PURE__ */Caml_exceptions.create("SqError-QuriSquiggleLang.Message.MessageException");

function toString(err) {
  if (typeof err === "number") {
    switch (err) {
      case /* REAssignmentExpected */0 :
          return "Assignment expected";
      case /* REExpressionExpected */1 :
          return "Expression expected";
      case /* RENeedToRun */2 :
          return "Need to run";
      
    }
  } else {
    switch (err.TAG | 0) {
      case /* REArityError */0 :
          return "" + String(err._1) + " arguments expected. Instead " + String(err._2) + " argument(s) were passed.";
      case /* REArrayIndexNotFound */1 :
          return "" + err._0 + ": " + String(err._1) + "";
      case /* REDistributionError */2 :
          return "Distribution Math Error: " + DistributionTypes$QuriSquiggleLang.$$Error.toString(err._0) + "";
      case /* REExpectedType */3 :
          return "Expected type: " + err._0 + " but got: " + err._1 + "";
      case /* REFunctionExpected */4 :
          return "Function expected: " + err._0 + "";
      case /* REFunctionNotFound */5 :
          return "Function not found: " + err._0 + "";
      case /* REJavaScriptExn */6 :
          var oname = err._1;
          var omsg = err._0;
          var answer = "JS Exception:";
          var answer$1 = oname !== undefined ? "" + answer + " " + oname + "" : answer;
          if (omsg !== undefined) {
            return "" + answer$1 + ": " + omsg + "";
          } else {
            return answer$1;
          }
      case /* REMacroNotFound */7 :
          return "Macro not found: " + err._0 + "";
      case /* RENotAFunction */8 :
          return "" + err._0 + " is not a function";
      case /* REOperationError */9 :
          return "Math Error: " + Operation$QuriSquiggleLang.$$Error.toString(err._0) + "";
      case /* RERecordPropertyNotFound */10 :
          return "" + err._0 + ": " + err._1 + "";
      case /* RESymbolNotFound */11 :
          return "" + err._0 + " is not defined";
      case /* RESyntaxError */12 :
          return "Syntax Error: " + err._0 + "";
      case /* RETodo */13 :
          return "TODO: " + err._0 + "";
      case /* REUnitNotFound */14 :
          return "Unit not found: " + err._0 + "";
      case /* REOther */15 :
          return "Error: " + err._0 + "";
      
    }
  }
}

function fromException(exn) {
  if (exn.RE_EXN_ID === MessageException) {
    return exn._1;
  }
  if (exn.RE_EXN_ID !== Js_exn.$$Error) {
    return {
            TAG: 15,
            _0: "Unknown error",
            [Symbol.for("name")]: "REOther"
          };
  }
  var e = exn._1;
  var message = e.message;
  if (message !== undefined) {
    return {
            TAG: 15,
            _0: message,
            [Symbol.for("name")]: "REOther"
          };
  }
  var name = e.name;
  if (name !== undefined) {
    return {
            TAG: 15,
            _0: name,
            [Symbol.for("name")]: "REOther"
          };
  } else {
    return {
            TAG: 15,
            _0: "Unknown error",
            [Symbol.for("name")]: "REOther"
          };
  }
}

function $$throw(errorValue) {
  throw {
        RE_EXN_ID: MessageException,
        _1: errorValue,
        Error: new Error()
      };
}

var Message = {
  MessageException: MessageException,
  toString: toString,
  fromException: fromException,
  $$throw: $$throw
};

var SqException = /* @__PURE__ */Caml_exceptions.create("SqError-QuriSquiggleLang.SqException");

function fromMessageWithFrameStack(message, frameStack) {
  return {
          message: message,
          frameStack: frameStack
        };
}

function fromMessage(message) {
  return {
          message: message,
          frameStack: Reducer_FrameStack$QuriSquiggleLang.make(undefined)
        };
}

function fromParseError(param) {
  return {
          message: {
            TAG: 12,
            _0: param._0,
            [Symbol.for("name")]: "RESyntaxError"
          },
          frameStack: Reducer_FrameStack$QuriSquiggleLang.makeSingleFrameStack(param._1)
        };
}

function getTopFrame(t) {
  return Reducer_FrameStack$QuriSquiggleLang.getTopFrame(t.frameStack);
}

function getFrameStack(t) {
  return t.frameStack;
}

function toString$1(t) {
  return toString(t.message);
}

function createOtherError(v) {
  return {
          message: {
            TAG: 15,
            _0: v,
            [Symbol.for("name")]: "REOther"
          },
          frameStack: Reducer_FrameStack$QuriSquiggleLang.make(undefined)
        };
}

function getFrameArray(t) {
  return Reducer_FrameStack$QuriSquiggleLang.toFrameArray(t.frameStack);
}

function toStringWithStackTrace(t) {
  return toString(t.message) + (
          Reducer_FrameStack$QuriSquiggleLang.isEmpty(t.frameStack) ? "\nStack trace:\n" + Reducer_FrameStack$QuriSquiggleLang.toString(t.frameStack) : ""
        );
}

function $$throw$1(t) {
  throw {
        RE_EXN_ID: SqException,
        _1: t,
        Error: new Error()
      };
}

function throwMessageWithFrameStack(message, frameStack) {
  throw {
        RE_EXN_ID: SqException,
        _1: {
          message: message,
          frameStack: frameStack
        },
        Error: new Error()
      };
}

function fromException$1(exn) {
  if (exn.RE_EXN_ID === SqException) {
    return exn._1;
  }
  if (exn.RE_EXN_ID === MessageException) {
    return {
            message: exn._1,
            frameStack: Reducer_FrameStack$QuriSquiggleLang.make(undefined)
          };
  }
  if (exn.RE_EXN_ID !== Js_exn.$$Error) {
    return {
            message: {
              TAG: 15,
              _0: "Unknown exception",
              [Symbol.for("name")]: "REOther"
            },
            frameStack: Reducer_FrameStack$QuriSquiggleLang.make(undefined)
          };
  }
  var obj = exn._1;
  var message_0 = obj.message;
  var message_1 = obj.name;
  var message = {
    TAG: 6,
    _0: message_0,
    _1: message_1,
    [Symbol.for("name")]: "REJavaScriptExn"
  };
  return {
          message: message,
          frameStack: Reducer_FrameStack$QuriSquiggleLang.make(undefined)
        };
}

function rethrowWithFrameStack(fn, frameStack) {
  try {
    return Curry._1(fn, undefined);
  }
  catch (raw_e){
    var e = Caml_js_exceptions.internalToOCamlException(raw_e);
    if (e.RE_EXN_ID === SqException) {
      throw {
            RE_EXN_ID: SqException,
            _1: e._1,
            Error: new Error()
          };
    }
    if (e.RE_EXN_ID === MessageException) {
      throw {
            RE_EXN_ID: SqException,
            _1: {
              message: e._1,
              frameStack: frameStack
            },
            Error: new Error()
          };
    }
    if (e.RE_EXN_ID === Js_exn.$$Error) {
      var obj = e._1;
      var message_0 = obj.message;
      var message_1 = obj.name;
      var message = {
        TAG: 6,
        _0: message_0,
        _1: message_1,
        [Symbol.for("name")]: "REJavaScriptExn"
      };
      throw {
            RE_EXN_ID: SqException,
            _1: {
              message: message,
              frameStack: frameStack
            },
            Error: new Error()
          };
    }
    throw {
          RE_EXN_ID: SqException,
          _1: {
            message: {
              TAG: 15,
              _0: "Unknown exception",
              [Symbol.for("name")]: "REOther"
            },
            frameStack: frameStack
          },
          Error: new Error()
        };
  }
}

exports.Message = Message;
exports.SqException = SqException;
exports.fromMessageWithFrameStack = fromMessageWithFrameStack;
exports.fromMessage = fromMessage;
exports.fromParseError = fromParseError;
exports.getTopFrame = getTopFrame;
exports.getFrameStack = getFrameStack;
exports.toString = toString$1;
exports.createOtherError = createOtherError;
exports.getFrameArray = getFrameArray;
exports.toStringWithStackTrace = toStringWithStackTrace;
exports.$$throw = $$throw$1;
exports.throwMessageWithFrameStack = throwMessageWithFrameStack;
exports.fromException = fromException$1;
exports.rethrowWithFrameStack = rethrowWithFrameStack;
/* DistributionTypes-QuriSquiggleLang Not a pure module */
