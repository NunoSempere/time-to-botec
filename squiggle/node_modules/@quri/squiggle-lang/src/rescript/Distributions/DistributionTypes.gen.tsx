/* TypeScript file generated from DistributionTypes.res by genType. */
/* eslint-disable import/first */


const $$toJS118296182: { [key: string]: any } = {"0": "Normalize", "1": "ToPointSet", "2": "Inspect"};

const $$toJS269282217: { [key: string]: any } = {"0": "Pointwise"};

const $$toJS292222791: { [key: string]: any } = {"0": "ToString"};

const $$toJS1066788171: { [key: string]: any } = {"0": "AsDefault", "1": "AsSymbolic", "2": "AsMonteCarlo", "3": "AsConvolution"};

// @ts-ignore: Implicit any on import
const DistributionTypesBS = require('./DistributionTypes.bs');

import type {Algebraic_t as Operation_Algebraic_t} from '../../../src/rescript/Utility/Operation.gen';

// tslint:disable-next-line:max-classes-per-file 
// tslint:disable-next-line:class-name
export abstract class genericDist { protected opaque!: any }; /* simulate opaque types */

// tslint:disable-next-line:interface-over-type-literal
export type asAlgebraicCombinationStrategy = 
    "AsDefault"
  | "AsSymbolic"
  | "AsMonteCarlo"
  | "AsConvolution";

// tslint:disable-next-line:max-classes-per-file 
// tslint:disable-next-line:class-name
export abstract class error { protected opaque!: any }; /* simulate opaque types */

// tslint:disable-next-line:interface-over-type-literal
export type DistributionOperation_pointsetXSelection = "Linear" | "ByWeight";

// tslint:disable-next-line:interface-over-type-literal
export type DistributionOperation_direction = 
    "Pointwise"
  | { tag: "Algebraic"; value: asAlgebraicCombinationStrategy };

// tslint:disable-next-line:interface-over-type-literal
export type DistributionOperation_toFloat = 
    "Mean"
  | "Sample"
  | "IntegralSum"
  | "Mode"
  | "Stdev"
  | "Min"
  | "Max"
  | "Variance"
  | { NAME: "Cdf"; VAL: number }
  | { NAME: "Inv"; VAL: number }
  | { NAME: "Pdf"; VAL: number };

// tslint:disable-next-line:interface-over-type-literal
export type DistributionOperation_toScaleFn = 
    "Multiply"
  | "Power"
  | "Logarithm"
  | { NAME: "LogarithmWithThreshold"; VAL: number };

// tslint:disable-next-line:interface-over-type-literal
export type DistributionOperation_toDist = 
    "Normalize"
  | "ToPointSet"
  | "Inspect"
  | { tag: "ToSampleSet"; value: number }
  | { tag: "Scale"; value: [DistributionOperation_toScaleFn, number] }
  | { tag: "Truncate"; value: [(null | undefined | number), (null | undefined | number)] };

// tslint:disable-next-line:interface-over-type-literal
export type DistributionOperation_toBool = "IsNormalized";

// tslint:disable-next-line:interface-over-type-literal
export type DistributionOperation_toString = 
    "ToString"
  | { tag: "ToSparkline"; value: number };

// tslint:disable-next-line:interface-over-type-literal
export type DistributionOperation_genericDistOrScalar = 
    { tag: "Score_Dist"; value: genericDist }
  | { tag: "Score_Scalar"; value: number };

// tslint:disable-next-line:interface-over-type-literal
export type DistributionOperation_toScore = 
    [DistributionOperation_genericDistOrScalar, (null | undefined | genericDist)];

// tslint:disable-next-line:interface-over-type-literal
export type DistributionOperation_fromFloat = 
    { NAME: "ToFloat"; VAL: DistributionOperation_toFloat }
  | { NAME: "ToDist"; VAL: DistributionOperation_toDist }
  | { NAME: "ToDistCombination"; VAL: [DistributionOperation_direction, Operation_Algebraic_t, 
    { NAME: "Dist"; VAL: genericDist }
  | { NAME: "Float"; VAL: number }] }
  | { NAME: "ToString"; VAL: DistributionOperation_toString }
  | { NAME: "ToBool"; VAL: DistributionOperation_toBool };

// tslint:disable-next-line:interface-over-type-literal
export type DistributionOperation_fromDist = 
    DistributionOperation_fromFloat
  | { NAME: "ToScore"; VAL: DistributionOperation_toScore };

// tslint:disable-next-line:interface-over-type-literal
export type DistributionOperation_genericFunctionCallInfo = 
    { tag: "FromDist"; value: [DistributionOperation_fromDist, genericDist] }
  | { tag: "FromFloat"; value: [DistributionOperation_fromFloat, number] }
  | { tag: "FromSamples"; value: number[] }
  | { tag: "Mixture"; value: Array<[genericDist, number]> };

// tslint:disable-next-line:interface-over-type-literal
export type Constructors_t = DistributionOperation_genericFunctionCallInfo;

export const Constructors_UsingDists_mean: (dist:genericDist) => Constructors_t = function (Arg1: any) {
  const result = DistributionTypesBS.Constructors.UsingDists.mean(Arg1);
  return result.TAG===0
    ? {tag:"FromDist", value:[{NAME:"ToScore", VAL:[result._0.VAL._0.TAG===0
    ? {tag:"Score_Dist", value:result._0.VAL._0._0}
    : {tag:"Score_Scalar", value:result._0.VAL._0._0}, result._0.VAL._1]}, result._1]}
    : result.TAG===1
    ? {tag:"FromFloat", value:[result._0.NAME==="ToFloat"
    ? {NAME:"ToFloat", VAL:result._0.VAL}
    : result._0.NAME==="ToDist"
    ? {NAME:"ToDist", VAL:typeof(result._0.VAL) === 'object'
    ? result._0.VAL.TAG===0
      ? {tag:"ToSampleSet", value:result._0.VAL._0}
      : result._0.VAL.TAG===1
      ? {tag:"Scale", value:[result._0.VAL._0, result._0.VAL._1]}
      : {tag:"Truncate", value:[result._0.VAL._0, result._0.VAL._1]}
    : $$toJS118296182[result._0.VAL]}
    : result._0.NAME==="ToDistCombination"
    ? {NAME:"ToDistCombination", VAL:[typeof(result._0.VAL[0]) === 'object'
    ? {tag:"Algebraic", value:$$toJS1066788171[result._0.VAL[0]._0]}
    : $$toJS269282217[result._0.VAL[0]], result._0.VAL[1], result._0.VAL[2]]}
    : result._0.NAME==="ToString"
    ? {NAME:"ToString", VAL:typeof(result._0.VAL) === 'object'
    ? {tag:"ToSparkline", value:result._0.VAL._0}
    : $$toJS292222791[result._0.VAL]}
    : {NAME:"ToBool", VAL:"IsNormalized"}, result._1]}
    : result.TAG===2
    ? {tag:"FromSamples", value:result._0}
    : {tag:"Mixture", value:result._0}
};
