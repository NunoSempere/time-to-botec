/* TypeScript file generated from GenericDist.resi by genType. */
/* eslint-disable import/first */


// @ts-ignore: Implicit any on import
const Curry = require('@rescript/std/lib/js/curry.js');

// @ts-ignore: Implicit any on import
const GenericDistBS = require('./GenericDist.bs');

import type {DistributionOperation_pointsetXSelection as DistributionTypes_DistributionOperation_pointsetXSelection} from './DistributionTypes.gen';

import type {error as DistributionTypes_error} from './DistributionTypes.gen';

import type {genericDist as DistributionTypes_genericDist} from './DistributionTypes.gen';

import type {pointSetDist as PointSetTypes_pointSetDist} from '../../../src/rescript/Distributions/PointSetDist/PointSetTypes.gen';

// tslint:disable-next-line:interface-over-type-literal
export type t = DistributionTypes_genericDist;

// tslint:disable-next-line:interface-over-type-literal
export type error = DistributionTypes_error;

// tslint:disable-next-line:interface-over-type-literal
export type env = { readonly sampleCount: number; readonly xyPointLength: number };

export const toPointSet: (_1:t, _2:{
  readonly xyPointLength: number; 
  readonly sampleCount: number; 
  readonly xSelection?: DistributionTypes_DistributionOperation_pointsetXSelection
}, _3:void) => 
    { tag: "Ok"; value: PointSetTypes_pointSetDist }
  | { tag: "Error"; value: error } = function (Arg1: any, Arg2: any, Arg3: any) {
  const result = Curry._5(GenericDistBS.toPointSet, Arg1, Arg2.xyPointLength, Arg2.sampleCount, Arg2.xSelection, Arg3);
  return result.TAG===0
    ? {tag:"Ok", value:result._0}
    : {tag:"Error", value:result._0}
};
