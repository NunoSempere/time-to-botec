/* TypeScript file generated from DistributionOperation.resi by genType. */
/* eslint-disable import/first */


const $$toRE118296182: { [key: string]: any } = {"Normalize": 0, "ToPointSet": 1, "Inspect": 2};

const $$toRE269282217: { [key: string]: any } = {"Pointwise": 0};

const $$toRE292222791: { [key: string]: any } = {"ToString": 0};

const $$toRE1066788171: { [key: string]: any } = {"AsDefault": 0, "AsSymbolic": 1, "AsMonteCarlo": 2, "AsConvolution": 3};

// @ts-ignore: Implicit any on import
const Curry = require('@rescript/std/lib/js/curry.js');

// @ts-ignore: Implicit any on import
const DistributionOperationBS = require('./DistributionOperation.bs');

import type {DistributionOperation_genericFunctionCallInfo as DistributionTypes_DistributionOperation_genericFunctionCallInfo} from './DistributionTypes.gen';

import type {env as GenericDist_env} from './GenericDist.gen';

import type {error as DistributionTypes_error} from './DistributionTypes.gen';

import type {genericDist as DistributionTypes_genericDist} from './DistributionTypes.gen';

import type {t as SampleSetDist_t} from '../../../src/rescript/Distributions/SampleSetDist/SampleSetDist.gen';

// tslint:disable-next-line:interface-over-type-literal
export type outputType = 
    { tag: "Dist"; value: DistributionTypes_genericDist }
  | { tag: "Float"; value: number }
  | { tag: "String"; value: string }
  | { tag: "FloatArray"; value: number[] }
  | { tag: "Bool"; value: boolean }
  | { tag: "GenDistError"; value: DistributionTypes_error };

export const defaultEnv: GenericDist_env = DistributionOperationBS.defaultEnv;

export const run: (_1:{ readonly env: GenericDist_env }, _2:DistributionTypes_DistributionOperation_genericFunctionCallInfo) => outputType = function (Arg1: any, Arg2: any) {
  const result = Curry._2(DistributionOperationBS.run, Arg1.env, Arg2.tag==="FromDist"
    ? {TAG: 0, _0:{NAME: "ToScore", VAL: {TAG: 0, _0:Arg2.value[0].VAL[0].tag==="Score_Dist"
    ? {TAG: 0, _0:Arg2.value[0].VAL[0].value} as any
    : {TAG: 1, _0:Arg2.value[0].VAL[0].value} as any, _1:(Arg2.value[0].VAL[1] == null ? undefined : Arg2.value[0].VAL[1])} as any}, _1:Arg2.value[1]} as any
    : Arg2.tag==="FromFloat"
    ? {TAG: 1, _0:Arg2.value[0].NAME==="ToFloat"
    ? {NAME: "ToFloat", VAL: Arg2.value[0].VAL}
    : Arg2.value[0].NAME==="ToDist"
    ? {NAME: "ToDist", VAL: typeof(Arg2.value[0].VAL) === 'object'
    ? Arg2.value[0].VAL.tag==="ToSampleSet"
      ? {TAG: 0, _0:Arg2.value[0].VAL.value} as any
      : Arg2.value[0].VAL.tag==="Scale"
      ? {TAG: 1, _0:Arg2.value[0].VAL.value[0], _1:Arg2.value[0].VAL.value[1]} as any
      : {TAG: 2, _0:(Arg2.value[0].VAL.value[0] == null ? undefined : Arg2.value[0].VAL.value[0]), _1:(Arg2.value[0].VAL.value[1] == null ? undefined : Arg2.value[0].VAL.value[1])} as any
    : $$toRE118296182[Arg2.value[0].VAL]}
    : Arg2.value[0].NAME==="ToDistCombination"
    ? {NAME: "ToDistCombination", VAL: [typeof(Arg2.value[0].VAL[0]) === 'object'
    ? {TAG: 0, _0:$$toRE1066788171[Arg2.value[0].VAL[0].value]} as any
    : $$toRE269282217[Arg2.value[0].VAL[0]], Arg2.value[0].VAL[1], Arg2.value[0].VAL[2]]}
    : Arg2.value[0].NAME==="ToString"
    ? {NAME: "ToString", VAL: typeof(Arg2.value[0].VAL) === 'object'
    ? {TAG: 0, _0:Arg2.value[0].VAL.value} as any
    : $$toRE292222791[Arg2.value[0].VAL]}
    : {NAME: "ToBool", VAL: 0}, _1:Arg2.value[1]} as any
    : Arg2.tag==="FromSamples"
    ? {TAG: 2, _0:Arg2.value} as any
    : {TAG: 3, _0:Arg2.value} as any);
  return result.TAG===0
    ? {tag:"Dist", value:result._0}
    : result.TAG===1
    ? {tag:"Float", value:result._0}
    : result.TAG===2
    ? {tag:"String", value:result._0}
    : result.TAG===3
    ? {tag:"FloatArray", value:result._0}
    : result.TAG===4
    ? {tag:"Bool", value:result._0}
    : {tag:"GenDistError", value:result._0}
};

export const Constructors_mean: (_1:{ readonly env: GenericDist_env }, _2:DistributionTypes_genericDist) => 
    { tag: "Ok"; value: number }
  | { tag: "Error"; value: DistributionTypes_error } = function (Arg1: any, Arg2: any) {
  const result = Curry._2(DistributionOperationBS.Constructors.mean, Arg1.env, Arg2);
  return result.TAG===0
    ? {tag:"Ok", value:result._0}
    : {tag:"Error", value:result._0}
};

export const Constructors_stdev: (_1:{ readonly env: GenericDist_env }, _2:DistributionTypes_genericDist) => 
    { tag: "Ok"; value: number }
  | { tag: "Error"; value: DistributionTypes_error } = function (Arg1: any, Arg2: any) {
  const result = Curry._2(DistributionOperationBS.Constructors.stdev, Arg1.env, Arg2);
  return result.TAG===0
    ? {tag:"Ok", value:result._0}
    : {tag:"Error", value:result._0}
};

export const Constructors_variance: (_1:{ readonly env: GenericDist_env }, _2:DistributionTypes_genericDist) => 
    { tag: "Ok"; value: number }
  | { tag: "Error"; value: DistributionTypes_error } = function (Arg1: any, Arg2: any) {
  const result = Curry._2(DistributionOperationBS.Constructors.variance, Arg1.env, Arg2);
  return result.TAG===0
    ? {tag:"Ok", value:result._0}
    : {tag:"Error", value:result._0}
};

export const Constructors_sample: (_1:{ readonly env: GenericDist_env }, _2:DistributionTypes_genericDist) => 
    { tag: "Ok"; value: number }
  | { tag: "Error"; value: DistributionTypes_error } = function (Arg1: any, Arg2: any) {
  const result = Curry._2(DistributionOperationBS.Constructors.sample, Arg1.env, Arg2);
  return result.TAG===0
    ? {tag:"Ok", value:result._0}
    : {tag:"Error", value:result._0}
};

export const Constructors_cdf: (_1:{ readonly env: GenericDist_env }, _2:DistributionTypes_genericDist, _3:number) => 
    { tag: "Ok"; value: number }
  | { tag: "Error"; value: DistributionTypes_error } = function (Arg1: any, Arg2: any, Arg3: any) {
  const result = Curry._3(DistributionOperationBS.Constructors.cdf, Arg1.env, Arg2, Arg3);
  return result.TAG===0
    ? {tag:"Ok", value:result._0}
    : {tag:"Error", value:result._0}
};

export const Constructors_inv: (_1:{ readonly env: GenericDist_env }, _2:DistributionTypes_genericDist, _3:number) => 
    { tag: "Ok"; value: number }
  | { tag: "Error"; value: DistributionTypes_error } = function (Arg1: any, Arg2: any, Arg3: any) {
  const result = Curry._3(DistributionOperationBS.Constructors.inv, Arg1.env, Arg2, Arg3);
  return result.TAG===0
    ? {tag:"Ok", value:result._0}
    : {tag:"Error", value:result._0}
};

export const Constructors_pdf: (_1:{ readonly env: GenericDist_env }, _2:DistributionTypes_genericDist, _3:number) => 
    { tag: "Ok"; value: number }
  | { tag: "Error"; value: DistributionTypes_error } = function (Arg1: any, Arg2: any, Arg3: any) {
  const result = Curry._3(DistributionOperationBS.Constructors.pdf, Arg1.env, Arg2, Arg3);
  return result.TAG===0
    ? {tag:"Ok", value:result._0}
    : {tag:"Error", value:result._0}
};

export const Constructors_normalize: (_1:{ readonly env: GenericDist_env }, _2:DistributionTypes_genericDist) => 
    { tag: "Ok"; value: DistributionTypes_genericDist }
  | { tag: "Error"; value: DistributionTypes_error } = function (Arg1: any, Arg2: any) {
  const result = Curry._2(DistributionOperationBS.Constructors.normalize, Arg1.env, Arg2);
  return result.TAG===0
    ? {tag:"Ok", value:result._0}
    : {tag:"Error", value:result._0}
};

export const Constructors_isNormalized: (_1:{ readonly env: GenericDist_env }, _2:DistributionTypes_genericDist) => 
    { tag: "Ok"; value: boolean }
  | { tag: "Error"; value: DistributionTypes_error } = function (Arg1: any, Arg2: any) {
  const result = Curry._2(DistributionOperationBS.Constructors.isNormalized, Arg1.env, Arg2);
  return result.TAG===0
    ? {tag:"Ok", value:result._0}
    : {tag:"Error", value:result._0}
};

export const Constructors_LogScore_distEstimateDistAnswer: (_1:{ readonly env: GenericDist_env }, _2:DistributionTypes_genericDist, _3:DistributionTypes_genericDist) => 
    { tag: "Ok"; value: number }
  | { tag: "Error"; value: DistributionTypes_error } = function (Arg1: any, Arg2: any, Arg3: any) {
  const result = Curry._3(DistributionOperationBS.Constructors.isNormalized.distEstimateDistAnswer, Arg1.env, Arg2, Arg3);
  return result.TAG===0
    ? {tag:"Ok", value:result._0}
    : {tag:"Error", value:result._0}
};

export const Constructors_LogScore_distEstimateDistAnswerWithPrior: (_1:{ readonly env: GenericDist_env }, _2:DistributionTypes_genericDist, _3:DistributionTypes_genericDist, _4:DistributionTypes_genericDist) => 
    { tag: "Ok"; value: number }
  | { tag: "Error"; value: DistributionTypes_error } = function (Arg1: any, Arg2: any, Arg3: any, Arg4: any) {
  const result = Curry._4(DistributionOperationBS.Constructors.isNormalized.distEstimateDistAnswerWithPrior, Arg1.env, Arg2, Arg3, Arg4);
  return result.TAG===0
    ? {tag:"Ok", value:result._0}
    : {tag:"Error", value:result._0}
};

export const Constructors_LogScore_distEstimateScalarAnswer: (_1:{ readonly env: GenericDist_env }, _2:DistributionTypes_genericDist, _3:number) => 
    { tag: "Ok"; value: number }
  | { tag: "Error"; value: DistributionTypes_error } = function (Arg1: any, Arg2: any, Arg3: any) {
  const result = Curry._3(DistributionOperationBS.Constructors.isNormalized.distEstimateScalarAnswer, Arg1.env, Arg2, Arg3);
  return result.TAG===0
    ? {tag:"Ok", value:result._0}
    : {tag:"Error", value:result._0}
};

export const Constructors_LogScore_distEstimateScalarAnswerWithPrior: (_1:{ readonly env: GenericDist_env }, _2:DistributionTypes_genericDist, _3:number, _4:DistributionTypes_genericDist) => 
    { tag: "Ok"; value: number }
  | { tag: "Error"; value: DistributionTypes_error } = function (Arg1: any, Arg2: any, Arg3: any, Arg4: any) {
  const result = Curry._4(DistributionOperationBS.Constructors.isNormalized.distEstimateScalarAnswerWithPrior, Arg1.env, Arg2, Arg3, Arg4);
  return result.TAG===0
    ? {tag:"Ok", value:result._0}
    : {tag:"Error", value:result._0}
};

export const Constructors_toPointSet: (_1:{ readonly env: GenericDist_env }, _2:DistributionTypes_genericDist) => 
    { tag: "Ok"; value: DistributionTypes_genericDist }
  | { tag: "Error"; value: DistributionTypes_error } = function (Arg1: any, Arg2: any) {
  const result = Curry._2(DistributionOperationBS.Constructors.toPointSet, Arg1.env, Arg2);
  return result.TAG===0
    ? {tag:"Ok", value:result._0}
    : {tag:"Error", value:result._0}
};

export const Constructors_toSampleSet: (_1:{ readonly env: GenericDist_env }, _2:DistributionTypes_genericDist, _3:number) => 
    { tag: "Ok"; value: DistributionTypes_genericDist }
  | { tag: "Error"; value: DistributionTypes_error } = function (Arg1: any, Arg2: any, Arg3: any) {
  const result = Curry._3(DistributionOperationBS.Constructors.toSampleSet, Arg1.env, Arg2, Arg3);
  return result.TAG===0
    ? {tag:"Ok", value:result._0}
    : {tag:"Error", value:result._0}
};

export const Constructors_fromSamples: (_1:{ readonly env: GenericDist_env }, _2:SampleSetDist_t) => 
    { tag: "Ok"; value: DistributionTypes_genericDist }
  | { tag: "Error"; value: DistributionTypes_error } = function (Arg1: any, Arg2: any) {
  const result = Curry._2(DistributionOperationBS.Constructors.fromSamples, Arg1.env, Arg2);
  return result.TAG===0
    ? {tag:"Ok", value:result._0}
    : {tag:"Error", value:result._0}
};

export const Constructors_truncate: (_1:{ readonly env: GenericDist_env }, _2:DistributionTypes_genericDist, _3:(null | undefined | number), _4:(null | undefined | number)) => 
    { tag: "Ok"; value: DistributionTypes_genericDist }
  | { tag: "Error"; value: DistributionTypes_error } = function (Arg1: any, Arg2: any, Arg3: any, Arg4: any) {
  const result = Curry._4(DistributionOperationBS.Constructors.truncate, Arg1.env, Arg2, (Arg3 == null ? undefined : Arg3), (Arg4 == null ? undefined : Arg4));
  return result.TAG===0
    ? {tag:"Ok", value:result._0}
    : {tag:"Error", value:result._0}
};

export const Constructors_inspect: (_1:{ readonly env: GenericDist_env }, _2:DistributionTypes_genericDist) => 
    { tag: "Ok"; value: DistributionTypes_genericDist }
  | { tag: "Error"; value: DistributionTypes_error } = function (Arg1: any, Arg2: any) {
  const result = Curry._2(DistributionOperationBS.Constructors.inspect, Arg1.env, Arg2);
  return result.TAG===0
    ? {tag:"Ok", value:result._0}
    : {tag:"Error", value:result._0}
};

export const Constructors_toString: (_1:{ readonly env: GenericDist_env }, _2:DistributionTypes_genericDist) => 
    { tag: "Ok"; value: string }
  | { tag: "Error"; value: DistributionTypes_error } = function (Arg1: any, Arg2: any) {
  const result = Curry._2(DistributionOperationBS.Constructors.toString, Arg1.env, Arg2);
  return result.TAG===0
    ? {tag:"Ok", value:result._0}
    : {tag:"Error", value:result._0}
};

export const Constructors_toSparkline: (_1:{ readonly env: GenericDist_env }, _2:DistributionTypes_genericDist, _3:number) => 
    { tag: "Ok"; value: string }
  | { tag: "Error"; value: DistributionTypes_error } = function (Arg1: any, Arg2: any, Arg3: any) {
  const result = Curry._3(DistributionOperationBS.Constructors.toSparkline, Arg1.env, Arg2, Arg3);
  return result.TAG===0
    ? {tag:"Ok", value:result._0}
    : {tag:"Error", value:result._0}
};

export const Constructors_algebraicAdd: (_1:{ readonly env: GenericDist_env }, _2:DistributionTypes_genericDist, _3:DistributionTypes_genericDist) => 
    { tag: "Ok"; value: DistributionTypes_genericDist }
  | { tag: "Error"; value: DistributionTypes_error } = function (Arg1: any, Arg2: any, Arg3: any) {
  const result = Curry._3(DistributionOperationBS.Constructors.algebraicAdd, Arg1.env, Arg2, Arg3);
  return result.TAG===0
    ? {tag:"Ok", value:result._0}
    : {tag:"Error", value:result._0}
};

export const Constructors_algebraicMultiply: (_1:{ readonly env: GenericDist_env }, _2:DistributionTypes_genericDist, _3:DistributionTypes_genericDist) => 
    { tag: "Ok"; value: DistributionTypes_genericDist }
  | { tag: "Error"; value: DistributionTypes_error } = function (Arg1: any, Arg2: any, Arg3: any) {
  const result = Curry._3(DistributionOperationBS.Constructors.algebraicMultiply, Arg1.env, Arg2, Arg3);
  return result.TAG===0
    ? {tag:"Ok", value:result._0}
    : {tag:"Error", value:result._0}
};

export const Constructors_algebraicDivide: (_1:{ readonly env: GenericDist_env }, _2:DistributionTypes_genericDist, _3:DistributionTypes_genericDist) => 
    { tag: "Ok"; value: DistributionTypes_genericDist }
  | { tag: "Error"; value: DistributionTypes_error } = function (Arg1: any, Arg2: any, Arg3: any) {
  const result = Curry._3(DistributionOperationBS.Constructors.algebraicDivide, Arg1.env, Arg2, Arg3);
  return result.TAG===0
    ? {tag:"Ok", value:result._0}
    : {tag:"Error", value:result._0}
};

export const Constructors_algebraicSubtract: (_1:{ readonly env: GenericDist_env }, _2:DistributionTypes_genericDist, _3:DistributionTypes_genericDist) => 
    { tag: "Ok"; value: DistributionTypes_genericDist }
  | { tag: "Error"; value: DistributionTypes_error } = function (Arg1: any, Arg2: any, Arg3: any) {
  const result = Curry._3(DistributionOperationBS.Constructors.algebraicSubtract, Arg1.env, Arg2, Arg3);
  return result.TAG===0
    ? {tag:"Ok", value:result._0}
    : {tag:"Error", value:result._0}
};

export const Constructors_algebraicLogarithm: (_1:{ readonly env: GenericDist_env }, _2:DistributionTypes_genericDist, _3:DistributionTypes_genericDist) => 
    { tag: "Ok"; value: DistributionTypes_genericDist }
  | { tag: "Error"; value: DistributionTypes_error } = function (Arg1: any, Arg2: any, Arg3: any) {
  const result = Curry._3(DistributionOperationBS.Constructors.algebraicLogarithm, Arg1.env, Arg2, Arg3);
  return result.TAG===0
    ? {tag:"Ok", value:result._0}
    : {tag:"Error", value:result._0}
};

export const Constructors_algebraicPower: (_1:{ readonly env: GenericDist_env }, _2:DistributionTypes_genericDist, _3:DistributionTypes_genericDist) => 
    { tag: "Ok"; value: DistributionTypes_genericDist }
  | { tag: "Error"; value: DistributionTypes_error } = function (Arg1: any, Arg2: any, Arg3: any) {
  const result = Curry._3(DistributionOperationBS.Constructors.algebraicPower, Arg1.env, Arg2, Arg3);
  return result.TAG===0
    ? {tag:"Ok", value:result._0}
    : {tag:"Error", value:result._0}
};

export const Constructors_scaleLogarithm: (_1:{ readonly env: GenericDist_env }, _2:DistributionTypes_genericDist, _3:number) => 
    { tag: "Ok"; value: DistributionTypes_genericDist }
  | { tag: "Error"; value: DistributionTypes_error } = function (Arg1: any, Arg2: any, Arg3: any) {
  const result = Curry._3(DistributionOperationBS.Constructors.scaleLogarithm, Arg1.env, Arg2, Arg3);
  return result.TAG===0
    ? {tag:"Ok", value:result._0}
    : {tag:"Error", value:result._0}
};

export const Constructors_scaleMultiply: (_1:{ readonly env: GenericDist_env }, _2:DistributionTypes_genericDist, _3:number) => 
    { tag: "Ok"; value: DistributionTypes_genericDist }
  | { tag: "Error"; value: DistributionTypes_error } = function (Arg1: any, Arg2: any, Arg3: any) {
  const result = Curry._3(DistributionOperationBS.Constructors.scaleMultiply, Arg1.env, Arg2, Arg3);
  return result.TAG===0
    ? {tag:"Ok", value:result._0}
    : {tag:"Error", value:result._0}
};

export const Constructors_scalePower: (_1:{ readonly env: GenericDist_env }, _2:DistributionTypes_genericDist, _3:number) => 
    { tag: "Ok"; value: DistributionTypes_genericDist }
  | { tag: "Error"; value: DistributionTypes_error } = function (Arg1: any, Arg2: any, Arg3: any) {
  const result = Curry._3(DistributionOperationBS.Constructors.scalePower, Arg1.env, Arg2, Arg3);
  return result.TAG===0
    ? {tag:"Ok", value:result._0}
    : {tag:"Error", value:result._0}
};

export const Constructors_pointwiseAdd: (_1:{ readonly env: GenericDist_env }, _2:DistributionTypes_genericDist, _3:DistributionTypes_genericDist) => 
    { tag: "Ok"; value: DistributionTypes_genericDist }
  | { tag: "Error"; value: DistributionTypes_error } = function (Arg1: any, Arg2: any, Arg3: any) {
  const result = Curry._3(DistributionOperationBS.Constructors.pointwiseAdd, Arg1.env, Arg2, Arg3);
  return result.TAG===0
    ? {tag:"Ok", value:result._0}
    : {tag:"Error", value:result._0}
};

export const Constructors_pointwiseMultiply: (_1:{ readonly env: GenericDist_env }, _2:DistributionTypes_genericDist, _3:DistributionTypes_genericDist) => 
    { tag: "Ok"; value: DistributionTypes_genericDist }
  | { tag: "Error"; value: DistributionTypes_error } = function (Arg1: any, Arg2: any, Arg3: any) {
  const result = Curry._3(DistributionOperationBS.Constructors.pointwiseMultiply, Arg1.env, Arg2, Arg3);
  return result.TAG===0
    ? {tag:"Ok", value:result._0}
    : {tag:"Error", value:result._0}
};

export const Constructors_pointwiseDivide: (_1:{ readonly env: GenericDist_env }, _2:DistributionTypes_genericDist, _3:DistributionTypes_genericDist) => 
    { tag: "Ok"; value: DistributionTypes_genericDist }
  | { tag: "Error"; value: DistributionTypes_error } = function (Arg1: any, Arg2: any, Arg3: any) {
  const result = Curry._3(DistributionOperationBS.Constructors.pointwiseDivide, Arg1.env, Arg2, Arg3);
  return result.TAG===0
    ? {tag:"Ok", value:result._0}
    : {tag:"Error", value:result._0}
};

export const Constructors_pointwiseSubtract: (_1:{ readonly env: GenericDist_env }, _2:DistributionTypes_genericDist, _3:DistributionTypes_genericDist) => 
    { tag: "Ok"; value: DistributionTypes_genericDist }
  | { tag: "Error"; value: DistributionTypes_error } = function (Arg1: any, Arg2: any, Arg3: any) {
  const result = Curry._3(DistributionOperationBS.Constructors.pointwiseSubtract, Arg1.env, Arg2, Arg3);
  return result.TAG===0
    ? {tag:"Ok", value:result._0}
    : {tag:"Error", value:result._0}
};

export const Constructors_pointwiseLogarithm: (_1:{ readonly env: GenericDist_env }, _2:DistributionTypes_genericDist, _3:DistributionTypes_genericDist) => 
    { tag: "Ok"; value: DistributionTypes_genericDist }
  | { tag: "Error"; value: DistributionTypes_error } = function (Arg1: any, Arg2: any, Arg3: any) {
  const result = Curry._3(DistributionOperationBS.Constructors.pointwiseLogarithm, Arg1.env, Arg2, Arg3);
  return result.TAG===0
    ? {tag:"Ok", value:result._0}
    : {tag:"Error", value:result._0}
};

export const Constructors_pointwisePower: (_1:{ readonly env: GenericDist_env }, _2:DistributionTypes_genericDist, _3:DistributionTypes_genericDist) => 
    { tag: "Ok"; value: DistributionTypes_genericDist }
  | { tag: "Error"; value: DistributionTypes_error } = function (Arg1: any, Arg2: any, Arg3: any) {
  const result = Curry._3(DistributionOperationBS.Constructors.pointwisePower, Arg1.env, Arg2, Arg3);
  return result.TAG===0
    ? {tag:"Ok", value:result._0}
    : {tag:"Error", value:result._0}
};
