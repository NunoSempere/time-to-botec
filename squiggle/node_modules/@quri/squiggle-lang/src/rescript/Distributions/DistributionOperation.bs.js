'use strict';

var Curry = require("@rescript/std/lib/js/curry.js");
var Caml_option = require("@rescript/std/lib/js/caml_option.js");
var E_O$QuriSquiggleLang = require("../Utility/E/E_O.bs.js");
var E_R$QuriSquiggleLang = require("../Utility/E/E_R.bs.js");
var GenericDist$QuriSquiggleLang = require("./GenericDist.bs.js");
var MagicNumbers$QuriSquiggleLang = require("../MagicNumbers.bs.js");
var SampleSetDist$QuriSquiggleLang = require("./SampleSetDist/SampleSetDist.bs.js");
var DistributionTypes$QuriSquiggleLang = require("./DistributionTypes.bs.js");

var defaultEnv_sampleCount = MagicNumbers$QuriSquiggleLang.Environment.defaultSampleCount;

var defaultEnv_xyPointLength = MagicNumbers$QuriSquiggleLang.Environment.defaultXYPointLength;

var defaultEnv = {
  sampleCount: defaultEnv_sampleCount,
  xyPointLength: defaultEnv_xyPointLength
};

function toError(t) {
  if (t.TAG === /* GenDistError */5) {
    return t._0;
  }
  
}

function toDistR(t) {
  if (t.TAG === /* Dist */0) {
    return {
            TAG: 0,
            _0: t._0,
            [Symbol.for("name")]: "Ok"
          };
  } else {
    return {
            TAG: 1,
            _0: E_O$QuriSquiggleLang.$$default(toError(t), /* Unreachable */1),
            [Symbol.for("name")]: "Error"
          };
  }
}

function toDist(t) {
  if (t.TAG === /* Dist */0) {
    return t._0;
  }
  
}

function toFloat(t) {
  if (t.TAG === /* Float */1) {
    return t._0;
  }
  
}

function toFloatR(t) {
  if (t.TAG === /* Float */1) {
    return {
            TAG: 0,
            _0: t._0,
            [Symbol.for("name")]: "Ok"
          };
  } else {
    return {
            TAG: 1,
            _0: E_O$QuriSquiggleLang.$$default(toError(t), /* Unreachable */1),
            [Symbol.for("name")]: "Error"
          };
  }
}

function toString(t) {
  if (t.TAG === /* String */2) {
    return t._0;
  }
  
}

function toStringR(t) {
  if (t.TAG === /* String */2) {
    return {
            TAG: 0,
            _0: t._0,
            [Symbol.for("name")]: "Ok"
          };
  } else {
    return {
            TAG: 1,
            _0: E_O$QuriSquiggleLang.$$default(toError(t), /* Unreachable */1),
            [Symbol.for("name")]: "Error"
          };
  }
}

function toBool(t) {
  if (t.TAG === /* Bool */4) {
    return t._0;
  }
  
}

function toBoolR(t) {
  if (t.TAG === /* Bool */4) {
    return {
            TAG: 0,
            _0: t._0,
            [Symbol.for("name")]: "Ok"
          };
  } else {
    return {
            TAG: 1,
            _0: E_O$QuriSquiggleLang.$$default(toError(t), /* Unreachable */1),
            [Symbol.for("name")]: "Error"
          };
  }
}

function fromResult(r) {
  if (r.TAG === /* Ok */0) {
    return r._0;
  } else {
    return {
            TAG: 5,
            _0: r._0,
            [Symbol.for("name")]: "GenDistError"
          };
  }
}

function run(env, functionCallInfo) {
  var xyPointLength = env.xyPointLength;
  var sampleCount = env.sampleCount;
  var reCall = function (envOpt, functionCallInfoOpt, param) {
    var env$1 = envOpt !== undefined ? envOpt : env;
    var functionCallInfo$1 = functionCallInfoOpt !== undefined ? functionCallInfoOpt : functionCallInfo;
    return run(env$1, functionCallInfo$1);
  };
  var toPointSetFn = function (r) {
    var e = reCall(undefined, {
          TAG: 0,
          _0: {
            NAME: "ToDist",
            VAL: /* ToPointSet */1
          },
          _1: r,
          [Symbol.for("name")]: "FromDist"
        }, undefined);
    if (e.TAG !== /* Dist */0) {
      return {
              TAG: 1,
              _0: E_O$QuriSquiggleLang.$$default(toError(e), /* Unreachable */1),
              [Symbol.for("name")]: "Error"
            };
    }
    var p = e._0;
    switch (p.TAG | 0) {
      case /* PointSet */0 :
          return {
                  TAG: 0,
                  _0: p._0,
                  [Symbol.for("name")]: "Ok"
                };
      case /* SampleSet */1 :
      case /* Symbolic */2 :
          return {
                  TAG: 1,
                  _0: E_O$QuriSquiggleLang.$$default(toError(e), /* Unreachable */1),
                  [Symbol.for("name")]: "Error"
                };
      
    }
  };
  var toSampleSetFn = function (r) {
    var e = reCall(undefined, {
          TAG: 0,
          _0: {
            NAME: "ToDist",
            VAL: {
              TAG: 0,
              _0: sampleCount,
              [Symbol.for("name")]: "ToSampleSet"
            }
          },
          _1: r,
          [Symbol.for("name")]: "FromDist"
        }, undefined);
    if (e.TAG !== /* Dist */0) {
      return {
              TAG: 1,
              _0: E_O$QuriSquiggleLang.$$default(toError(e), /* Unreachable */1),
              [Symbol.for("name")]: "Error"
            };
    }
    var p = e._0;
    switch (p.TAG | 0) {
      case /* SampleSet */1 :
          return {
                  TAG: 0,
                  _0: p._0,
                  [Symbol.for("name")]: "Ok"
                };
      case /* PointSet */0 :
      case /* Symbolic */2 :
          return {
                  TAG: 1,
                  _0: E_O$QuriSquiggleLang.$$default(toError(e), /* Unreachable */1),
                  [Symbol.for("name")]: "Error"
                };
      
    }
  };
  var scaleMultiply = function (r, weight) {
    return toDistR(reCall(undefined, {
                    TAG: 0,
                    _0: {
                      NAME: "ToDistCombination",
                      VAL: [
                        /* Pointwise */0,
                        "Multiply",
                        {
                          NAME: "Float",
                          VAL: weight
                        }
                      ]
                    },
                    _1: r,
                    [Symbol.for("name")]: "FromDist"
                  }, undefined));
  };
  var pointwiseAdd = function (r1, r2) {
    return toDistR(reCall(undefined, {
                    TAG: 0,
                    _0: {
                      NAME: "ToDistCombination",
                      VAL: [
                        /* Pointwise */0,
                        "Add",
                        {
                          NAME: "Dist",
                          VAL: r2
                        }
                      ]
                    },
                    _1: r1,
                    [Symbol.for("name")]: "FromDist"
                  }, undefined));
  };
  switch (functionCallInfo.TAG | 0) {
    case /* FromDist */0 :
        var subFnName = functionCallInfo._0;
        var dist = functionCallInfo._1;
        var variant = subFnName.NAME;
        if (variant === "ToString") {
          var bucketCount = subFnName.VAL;
          if (bucketCount) {
            return fromResult(E_R$QuriSquiggleLang.fmap(GenericDist$QuriSquiggleLang.toSparkline(dist, sampleCount, bucketCount._0, undefined), (function (r) {
                              return {
                                      TAG: 2,
                                      _0: r,
                                      [Symbol.for("name")]: "String"
                                    };
                            })));
          } else {
            return {
                    TAG: 2,
                    _0: GenericDist$QuriSquiggleLang.toString(dist),
                    [Symbol.for("name")]: "String"
                  };
          }
        }
        if (variant === "ToScore") {
          var match = subFnName.VAL;
          return fromResult(E_R$QuriSquiggleLang.fmap(GenericDist$QuriSquiggleLang.Score.logScore(dist, match._0, match._1, env), (function (s) {
                            return {
                                    TAG: 1,
                                    _0: s,
                                    [Symbol.for("name")]: "Float"
                                  };
                          })));
        }
        if (variant === "ToFloat") {
          return fromResult(E_R$QuriSquiggleLang.fmap(GenericDist$QuriSquiggleLang.toFloatOperation(dist, toPointSetFn, subFnName.VAL), (function (r) {
                            return {
                                    TAG: 1,
                                    _0: r,
                                    [Symbol.for("name")]: "Float"
                                  };
                          })));
        }
        if (variant === "ToBool") {
          return {
                  TAG: 4,
                  _0: GenericDist$QuriSquiggleLang.isNormalized(dist),
                  [Symbol.for("name")]: "Bool"
                };
        }
        if (variant === "ToDist") {
          var n = subFnName.VAL;
          if (typeof n === "number") {
            switch (n) {
              case /* Normalize */0 :
                  return {
                          TAG: 0,
                          _0: GenericDist$QuriSquiggleLang.normalize(dist),
                          [Symbol.for("name")]: "Dist"
                        };
              case /* ToPointSet */1 :
                  return fromResult(E_R$QuriSquiggleLang.fmap(GenericDist$QuriSquiggleLang.toPointSet(dist, xyPointLength, sampleCount, undefined, undefined), (function (r) {
                                    return {
                                            TAG: 0,
                                            _0: {
                                              TAG: 0,
                                              _0: r,
                                              [Symbol.for("name")]: "PointSet"
                                            },
                                            [Symbol.for("name")]: "Dist"
                                          };
                                  })));
              case /* Inspect */2 :
                  console.log("Console log requested: ", dist);
                  return {
                          TAG: 0,
                          _0: dist,
                          [Symbol.for("name")]: "Dist"
                        };
              
            }
          } else {
            switch (n.TAG | 0) {
              case /* ToSampleSet */0 :
                  return fromResult(E_R$QuriSquiggleLang.fmap(GenericDist$QuriSquiggleLang.toSampleSetDist(dist, n._0), (function (r) {
                                    return {
                                            TAG: 0,
                                            _0: {
                                              TAG: 1,
                                              _0: r,
                                              [Symbol.for("name")]: "SampleSet"
                                            },
                                            [Symbol.for("name")]: "Dist"
                                          };
                                  })));
              case /* Scale */1 :
                  var match$1 = n._0;
                  if (typeof match$1 === "object") {
                    return fromResult(E_R$QuriSquiggleLang.fmap(GenericDist$QuriSquiggleLang.pointwiseCombinationFloat(dist, toPointSetFn, {
                                        NAME: "LogarithmWithThreshold",
                                        VAL: match$1.VAL
                                      }, n._1), (function (r) {
                                      return {
                                              TAG: 0,
                                              _0: r,
                                              [Symbol.for("name")]: "Dist"
                                            };
                                    })));
                  } else if (match$1 === "Power") {
                    return fromResult(E_R$QuriSquiggleLang.fmap(GenericDist$QuriSquiggleLang.pointwiseCombinationFloat(dist, toPointSetFn, "Power", n._1), (function (r) {
                                      return {
                                              TAG: 0,
                                              _0: r,
                                              [Symbol.for("name")]: "Dist"
                                            };
                                    })));
                  } else if (match$1 === "Multiply") {
                    return fromResult(E_R$QuriSquiggleLang.fmap(GenericDist$QuriSquiggleLang.pointwiseCombinationFloat(dist, toPointSetFn, "Multiply", n._1), (function (r) {
                                      return {
                                              TAG: 0,
                                              _0: r,
                                              [Symbol.for("name")]: "Dist"
                                            };
                                    })));
                  } else {
                    return fromResult(E_R$QuriSquiggleLang.fmap(GenericDist$QuriSquiggleLang.pointwiseCombinationFloat(dist, toPointSetFn, "Logarithm", n._1), (function (r) {
                                      return {
                                              TAG: 0,
                                              _0: r,
                                              [Symbol.for("name")]: "Dist"
                                            };
                                    })));
                  }
              case /* Truncate */2 :
                  return fromResult(E_R$QuriSquiggleLang.fmap(GenericDist$QuriSquiggleLang.truncate(dist, toPointSetFn, Caml_option.some(n._0), Caml_option.some(n._1), undefined), (function (r) {
                                    return {
                                            TAG: 0,
                                            _0: r,
                                            [Symbol.for("name")]: "Dist"
                                          };
                                  })));
              
            }
          }
        } else {
          var match$2 = subFnName.VAL;
          var strategy = match$2[0];
          if (strategy) {
            var match$3 = match$2[2];
            if (match$3.NAME === "Dist") {
              return fromResult(E_R$QuriSquiggleLang.fmap(GenericDist$QuriSquiggleLang.algebraicCombination(strategy._0, dist, toPointSetFn, toSampleSetFn, match$2[1], match$3.VAL), (function (r) {
                                return {
                                        TAG: 0,
                                        _0: r,
                                        [Symbol.for("name")]: "Dist"
                                      };
                              })));
            } else {
              return {
                      TAG: 5,
                      _0: /* NotYetImplemented */0,
                      [Symbol.for("name")]: "GenDistError"
                    };
            }
          }
          var match$4 = match$2[2];
          var algebraicCombination = match$2[1];
          if (match$4.NAME === "Dist") {
            return fromResult(E_R$QuriSquiggleLang.fmap(GenericDist$QuriSquiggleLang.pointwiseCombination(dist, toPointSetFn, algebraicCombination, match$4.VAL), (function (r) {
                              return {
                                      TAG: 0,
                                      _0: r,
                                      [Symbol.for("name")]: "Dist"
                                    };
                            })));
          } else {
            return fromResult(E_R$QuriSquiggleLang.fmap(GenericDist$QuriSquiggleLang.pointwiseCombinationFloat(dist, toPointSetFn, algebraicCombination, match$4.VAL), (function (r) {
                              return {
                                      TAG: 0,
                                      _0: r,
                                      [Symbol.for("name")]: "Dist"
                                    };
                            })));
          }
        }
    case /* FromFloat */1 :
        return reCall(undefined, {
                    TAG: 1,
                    _0: functionCallInfo._0,
                    _1: functionCallInfo._1,
                    [Symbol.for("name")]: "FromFloat"
                  }, undefined);
    case /* FromSamples */2 :
        return fromResult(E_R$QuriSquiggleLang.fmap(E_R$QuriSquiggleLang.errMap(SampleSetDist$QuriSquiggleLang.make(functionCallInfo._0), (function (x) {
                              return {
                                      TAG: 0,
                                      _0: x,
                                      [Symbol.for("name")]: "SampleSetError"
                                    };
                            })), (function (x) {
                          return {
                                  TAG: 0,
                                  _0: {
                                    TAG: 1,
                                    _0: x,
                                    [Symbol.for("name")]: "SampleSet"
                                  },
                                  [Symbol.for("name")]: "Dist"
                                };
                        })));
    case /* Mixture */3 :
        return fromResult(E_R$QuriSquiggleLang.fmap(GenericDist$QuriSquiggleLang.mixture(functionCallInfo._0, scaleMultiply, pointwiseAdd, env), (function (r) {
                          return {
                                  TAG: 0,
                                  _0: r,
                                  [Symbol.for("name")]: "Dist"
                                };
                        })));
    
  }
}

function runFromDist(env, functionCallInfo, dist) {
  return run(env, {
              TAG: 0,
              _0: functionCallInfo,
              _1: dist,
              [Symbol.for("name")]: "FromDist"
            });
}

function runFromFloat(env, functionCallInfo, $$float) {
  return run(env, {
              TAG: 1,
              _0: functionCallInfo,
              _1: $$float,
              [Symbol.for("name")]: "FromFloat"
            });
}

function fmap(env, input, functionCallInfo) {
  var newFnCall;
  var exit = 0;
  if (functionCallInfo.TAG === /* FromDist */0) {
    switch (input.TAG | 0) {
      case /* Dist */0 :
          newFnCall = {
            TAG: 0,
            _0: {
              TAG: 0,
              _0: functionCallInfo._0,
              _1: input._0,
              [Symbol.for("name")]: "FromDist"
            },
            [Symbol.for("name")]: "Ok"
          };
          break;
      case /* GenDistError */5 :
          newFnCall = {
            TAG: 1,
            _0: input._0,
            [Symbol.for("name")]: "Error"
          };
          break;
      default:
        exit = 1;
    }
  } else {
    switch (input.TAG | 0) {
      case /* Float */1 :
          newFnCall = {
            TAG: 0,
            _0: {
              TAG: 1,
              _0: functionCallInfo._0,
              _1: input._0,
              [Symbol.for("name")]: "FromFloat"
            },
            [Symbol.for("name")]: "Ok"
          };
          break;
      case /* GenDistError */5 :
          newFnCall = {
            TAG: 1,
            _0: input._0,
            [Symbol.for("name")]: "Error"
          };
          break;
      default:
        exit = 1;
    }
  }
  if (exit === 1) {
    newFnCall = functionCallInfo.TAG === /* FromDist */0 ? ({
          TAG: 1,
          _0: {
            TAG: 7,
            _0: "Expected dist, got something else",
            [Symbol.for("name")]: "OtherError"
          },
          [Symbol.for("name")]: "Error"
        }) : ({
          TAG: 1,
          _0: {
            TAG: 7,
            _0: "Expected float, got something else",
            [Symbol.for("name")]: "OtherError"
          },
          [Symbol.for("name")]: "Error"
        });
  }
  return fromResult(E_R$QuriSquiggleLang.fmap(newFnCall, (function (param) {
                    return run(env, param);
                  })));
}

function mean(env, dist) {
  return toFloatR(run(env, Curry._1(DistributionTypes$QuriSquiggleLang.Constructors.UsingDists.mean, dist)));
}

function stdev(env, dist) {
  return toFloatR(run(env, Curry._1(DistributionTypes$QuriSquiggleLang.Constructors.UsingDists.stdev, dist)));
}

function variance(env, dist) {
  return toFloatR(run(env, Curry._1(DistributionTypes$QuriSquiggleLang.Constructors.UsingDists.variance, dist)));
}

function sample(env, dist) {
  return toFloatR(run(env, Curry._1(DistributionTypes$QuriSquiggleLang.Constructors.UsingDists.sample, dist)));
}

function cdf(env, dist, f) {
  return toFloatR(run(env, Curry._2(DistributionTypes$QuriSquiggleLang.Constructors.UsingDists.cdf, dist, f)));
}

function inv(env, dist, f) {
  return toFloatR(run(env, Curry._2(DistributionTypes$QuriSquiggleLang.Constructors.UsingDists.inv, dist, f)));
}

function pdf(env, dist, f) {
  return toFloatR(run(env, Curry._2(DistributionTypes$QuriSquiggleLang.Constructors.UsingDists.pdf, dist, f)));
}

function normalize(env, dist) {
  return toDistR(run(env, Curry._1(DistributionTypes$QuriSquiggleLang.Constructors.UsingDists.normalize, dist)));
}

function isNormalized(env, dist) {
  return toBoolR(run(env, Curry._1(DistributionTypes$QuriSquiggleLang.Constructors.UsingDists.isNormalized, dist)));
}

function distEstimateDistAnswer(env, estimate, answer) {
  return toFloatR(run(env, Curry._2(DistributionTypes$QuriSquiggleLang.Constructors.UsingDists.LogScore.distEstimateDistAnswer, estimate, answer)));
}

function distEstimateDistAnswerWithPrior(env, estimate, answer, prior) {
  return toFloatR(run(env, Curry._3(DistributionTypes$QuriSquiggleLang.Constructors.UsingDists.LogScore.distEstimateDistAnswerWithPrior, estimate, answer, prior)));
}

function distEstimateScalarAnswer(env, estimate, answer) {
  return toFloatR(run(env, Curry._2(DistributionTypes$QuriSquiggleLang.Constructors.UsingDists.LogScore.distEstimateScalarAnswer, estimate, answer)));
}

function distEstimateScalarAnswerWithPrior(env, estimate, answer, prior) {
  return toFloatR(run(env, Curry._3(DistributionTypes$QuriSquiggleLang.Constructors.UsingDists.LogScore.distEstimateScalarAnswerWithPrior, estimate, answer, prior)));
}

var LogScore = {
  distEstimateDistAnswer: distEstimateDistAnswer,
  distEstimateDistAnswerWithPrior: distEstimateDistAnswerWithPrior,
  distEstimateScalarAnswer: distEstimateScalarAnswer,
  distEstimateScalarAnswerWithPrior: distEstimateScalarAnswerWithPrior
};

function toPointSet(env, dist) {
  return toDistR(run(env, Curry._1(DistributionTypes$QuriSquiggleLang.Constructors.UsingDists.toPointSet, dist)));
}

function toSampleSet(env, dist, n) {
  return toDistR(run(env, Curry._2(DistributionTypes$QuriSquiggleLang.Constructors.UsingDists.toSampleSet, dist, n)));
}

function fromSamples(env, xs) {
  return toDistR(run(env, Curry._1(DistributionTypes$QuriSquiggleLang.Constructors.UsingDists.fromSamples, xs)));
}

function truncate(env, dist, leftCutoff, rightCutoff) {
  return toDistR(run(env, Curry._3(DistributionTypes$QuriSquiggleLang.Constructors.UsingDists.truncate, dist, leftCutoff, rightCutoff)));
}

function inspect(env, dist) {
  return toDistR(run(env, Curry._1(DistributionTypes$QuriSquiggleLang.Constructors.UsingDists.inspect, dist)));
}

function toString$1(env, dist) {
  return toStringR(run(env, Curry._1(DistributionTypes$QuriSquiggleLang.Constructors.UsingDists.toString, dist)));
}

function toSparkline(env, dist, bucketCount) {
  return toStringR(run(env, Curry._2(DistributionTypes$QuriSquiggleLang.Constructors.UsingDists.toSparkline, dist, bucketCount)));
}

function algebraicAdd(env, dist1, dist2) {
  return toDistR(run(env, Curry._2(DistributionTypes$QuriSquiggleLang.Constructors.UsingDists.algebraicAdd, dist1, dist2)));
}

function algebraicMultiply(env, dist1, dist2) {
  return toDistR(run(env, Curry._2(DistributionTypes$QuriSquiggleLang.Constructors.UsingDists.algebraicMultiply, dist1, dist2)));
}

function algebraicDivide(env, dist1, dist2) {
  return toDistR(run(env, Curry._2(DistributionTypes$QuriSquiggleLang.Constructors.UsingDists.algebraicDivide, dist1, dist2)));
}

function algebraicSubtract(env, dist1, dist2) {
  return toDistR(run(env, Curry._2(DistributionTypes$QuriSquiggleLang.Constructors.UsingDists.algebraicSubtract, dist1, dist2)));
}

function algebraicLogarithm(env, dist1, dist2) {
  return toDistR(run(env, Curry._2(DistributionTypes$QuriSquiggleLang.Constructors.UsingDists.algebraicLogarithm, dist1, dist2)));
}

function algebraicPower(env, dist1, dist2) {
  return toDistR(run(env, Curry._2(DistributionTypes$QuriSquiggleLang.Constructors.UsingDists.algebraicPower, dist1, dist2)));
}

function scaleMultiply(env, dist, n) {
  return toDistR(run(env, Curry._2(DistributionTypes$QuriSquiggleLang.Constructors.UsingDists.scaleMultiply, dist, n)));
}

function scalePower(env, dist, n) {
  return toDistR(run(env, Curry._2(DistributionTypes$QuriSquiggleLang.Constructors.UsingDists.scalePower, dist, n)));
}

function scaleLogarithm(env, dist, n) {
  return toDistR(run(env, Curry._2(DistributionTypes$QuriSquiggleLang.Constructors.UsingDists.scaleLogarithm, dist, n)));
}

function pointwiseAdd(env, dist1, dist2) {
  return toDistR(run(env, Curry._2(DistributionTypes$QuriSquiggleLang.Constructors.UsingDists.pointwiseAdd, dist1, dist2)));
}

function pointwiseMultiply(env, dist1, dist2) {
  return toDistR(run(env, Curry._2(DistributionTypes$QuriSquiggleLang.Constructors.UsingDists.pointwiseMultiply, dist1, dist2)));
}

function pointwiseDivide(env, dist1, dist2) {
  return toDistR(run(env, Curry._2(DistributionTypes$QuriSquiggleLang.Constructors.UsingDists.pointwiseDivide, dist1, dist2)));
}

function pointwiseSubtract(env, dist1, dist2) {
  return toDistR(run(env, Curry._2(DistributionTypes$QuriSquiggleLang.Constructors.UsingDists.pointwiseSubtract, dist1, dist2)));
}

function pointwiseLogarithm(env, dist1, dist2) {
  return toDistR(run(env, Curry._2(DistributionTypes$QuriSquiggleLang.Constructors.UsingDists.pointwiseLogarithm, dist1, dist2)));
}

function pointwisePower(env, dist1, dist2) {
  return toDistR(run(env, Curry._2(DistributionTypes$QuriSquiggleLang.Constructors.UsingDists.pointwisePower, dist1, dist2)));
}

var Output = {
  toDist: toDist,
  toDistR: toDistR,
  toFloat: toFloat,
  toFloatR: toFloatR,
  toString: toString,
  toStringR: toStringR,
  toBool: toBool,
  toBoolR: toBoolR,
  toError: toError,
  fmap: fmap
};

var Constructors = {
  mean: mean,
  stdev: stdev,
  variance: variance,
  sample: sample,
  cdf: cdf,
  inv: inv,
  pdf: pdf,
  normalize: normalize,
  isNormalized: isNormalized,
  LogScore: LogScore,
  toPointSet: toPointSet,
  toSampleSet: toSampleSet,
  fromSamples: fromSamples,
  truncate: truncate,
  inspect: inspect,
  toString: toString$1,
  toSparkline: toSparkline,
  algebraicAdd: algebraicAdd,
  algebraicMultiply: algebraicMultiply,
  algebraicDivide: algebraicDivide,
  algebraicSubtract: algebraicSubtract,
  algebraicLogarithm: algebraicLogarithm,
  algebraicPower: algebraicPower,
  scaleLogarithm: scaleLogarithm,
  scaleMultiply: scaleMultiply,
  scalePower: scalePower,
  pointwiseAdd: pointwiseAdd,
  pointwiseMultiply: pointwiseMultiply,
  pointwiseDivide: pointwiseDivide,
  pointwiseSubtract: pointwiseSubtract,
  pointwiseLogarithm: pointwiseLogarithm,
  pointwisePower: pointwisePower
};

exports.defaultEnv = defaultEnv;
exports.run = run;
exports.runFromDist = runFromDist;
exports.runFromFloat = runFromFloat;
exports.Output = Output;
exports.Constructors = Constructors;
/* GenericDist-QuriSquiggleLang Not a pure module */
