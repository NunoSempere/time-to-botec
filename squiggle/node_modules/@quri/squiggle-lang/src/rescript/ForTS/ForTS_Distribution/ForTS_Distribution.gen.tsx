/* TypeScript file generated from ForTS_Distribution.res by genType. */
/* eslint-disable import/first */


// @ts-ignore: Implicit any on import
const Curry = require('@rescript/std/lib/js/curry.js');

// @ts-ignore: Implicit any on import
const ForTS_DistributionBS = require('./ForTS_Distribution.bs');

import type {distributionTag as $$distributionTag} from './ForTS_Distribution_tag';

import type {env as GenericDist_env} from '../../../../src/rescript/Distributions/GenericDist.gen';

import type {environment as ForTS_Distribution_Environment_environment} from './ForTS_Distribution_Environment.gen';

import type {error as DistributionTypes_error} from '../../../../src/rescript/Distributions/DistributionTypes.gen';

import type {error as GenericDist_error} from '../../../../src/rescript/Distributions/GenericDist.gen';

import type {genericDist as DistributionTypes_genericDist} from '../../../../src/rescript/Distributions/DistributionTypes.gen';

import type {pointSetDist as PointSetTypes_pointSetDist} from '../../../../src/rescript/Distributions/PointSetDist/PointSetTypes.gen';

import type {pointSetDistribution as ForTS_Distribution_PointSetDistribution_pointSetDistribution} from './ForTS_Distribution_PointSetDistribution.gen';

import type {sampleSetDistribution as ForTS_Distribution_SampleSetDistribution_sampleSetDistribution} from './ForTS_Distribution_SampleSetDistribution.gen';

import type {symbolicDistribution as ForTS_Distribution_SymbolicDistribution_symbolicDistribution} from './ForTS_Distribution_SymbolicDistribution.gen';

// tslint:disable-next-line:interface-over-type-literal
export type distribution = DistributionTypes_genericDist;

// tslint:disable-next-line:interface-over-type-literal
export type distributionError = DistributionTypes_error;

// tslint:disable-next-line:interface-over-type-literal
export type pointSetDistribution = ForTS_Distribution_PointSetDistribution_pointSetDistribution;

// tslint:disable-next-line:interface-over-type-literal
export type sampleSetDistribution = ForTS_Distribution_SampleSetDistribution_sampleSetDistribution;

// tslint:disable-next-line:interface-over-type-literal
export type symbolicDistribution = ForTS_Distribution_SymbolicDistribution_symbolicDistribution;

// tslint:disable-next-line:interface-over-type-literal
export type environment = ForTS_Distribution_Environment_environment;

// tslint:disable-next-line:interface-over-type-literal
export type distributionTag = $$distributionTag;

export const defaultEnvironment: environment = ForTS_DistributionBS.defaultEnvironment;

export const getTag: (variant:distribution) => distributionTag = ForTS_DistributionBS.getTag;

export const getPointSet: (variant:distribution) => (null | undefined | pointSetDistribution) = ForTS_DistributionBS.getPointSet;

export const getSampleSet: (variant:distribution) => (null | undefined | sampleSetDistribution) = ForTS_DistributionBS.getSampleSet;

export const getSymbolic: (variant:distribution) => (null | undefined | symbolicDistribution) = ForTS_DistributionBS.getSymbolic;

export const mean: (_1:{ readonly env: GenericDist_env }, _2:DistributionTypes_genericDist) => 
    { tag: "Ok"; value: number }
  | { tag: "Error"; value: DistributionTypes_error } = function (Arg1: any, Arg2: any) {
  const result = Curry._2(ForTS_DistributionBS.mean, Arg1.env, Arg2);
  return result.TAG===0
    ? {tag:"Ok", value:result._0}
    : {tag:"Error", value:result._0}
};

export const stdev: (_1:{ readonly env: GenericDist_env }, _2:DistributionTypes_genericDist) => 
    { tag: "Ok"; value: number }
  | { tag: "Error"; value: DistributionTypes_error } = function (Arg1: any, Arg2: any) {
  const result = Curry._2(ForTS_DistributionBS.stdev, Arg1.env, Arg2);
  return result.TAG===0
    ? {tag:"Ok", value:result._0}
    : {tag:"Error", value:result._0}
};

export const variance: (_1:{ readonly env: GenericDist_env }, _2:DistributionTypes_genericDist) => 
    { tag: "Ok"; value: number }
  | { tag: "Error"; value: DistributionTypes_error } = function (Arg1: any, Arg2: any) {
  const result = Curry._2(ForTS_DistributionBS.variance, Arg1.env, Arg2);
  return result.TAG===0
    ? {tag:"Ok", value:result._0}
    : {tag:"Error", value:result._0}
};

export const sample: (_1:{ readonly env: GenericDist_env }, _2:DistributionTypes_genericDist) => 
    { tag: "Ok"; value: number }
  | { tag: "Error"; value: DistributionTypes_error } = function (Arg1: any, Arg2: any) {
  const result = Curry._2(ForTS_DistributionBS.sample, Arg1.env, Arg2);
  return result.TAG===0
    ? {tag:"Ok", value:result._0}
    : {tag:"Error", value:result._0}
};

export const cdf: (_1:{ readonly env: GenericDist_env }, _2:DistributionTypes_genericDist, _3:number) => 
    { tag: "Ok"; value: number }
  | { tag: "Error"; value: DistributionTypes_error } = function (Arg1: any, Arg2: any, Arg3: any) {
  const result = Curry._3(ForTS_DistributionBS.cdf, Arg1.env, Arg2, Arg3);
  return result.TAG===0
    ? {tag:"Ok", value:result._0}
    : {tag:"Error", value:result._0}
};

export const inv: (_1:{ readonly env: GenericDist_env }, _2:DistributionTypes_genericDist, _3:number) => 
    { tag: "Ok"; value: number }
  | { tag: "Error"; value: DistributionTypes_error } = function (Arg1: any, Arg2: any, Arg3: any) {
  const result = Curry._3(ForTS_DistributionBS.inv, Arg1.env, Arg2, Arg3);
  return result.TAG===0
    ? {tag:"Ok", value:result._0}
    : {tag:"Error", value:result._0}
};

export const pdf: (_1:{ readonly env: GenericDist_env }, _2:DistributionTypes_genericDist, _3:number) => 
    { tag: "Ok"; value: number }
  | { tag: "Error"; value: DistributionTypes_error } = function (Arg1: any, Arg2: any, Arg3: any) {
  const result = Curry._3(ForTS_DistributionBS.pdf, Arg1.env, Arg2, Arg3);
  return result.TAG===0
    ? {tag:"Ok", value:result._0}
    : {tag:"Error", value:result._0}
};

export const normalize: (_1:{ readonly env: GenericDist_env }, _2:DistributionTypes_genericDist) => 
    { tag: "Ok"; value: DistributionTypes_genericDist }
  | { tag: "Error"; value: DistributionTypes_error } = function (Arg1: any, Arg2: any) {
  const result = Curry._2(ForTS_DistributionBS.normalize, Arg1.env, Arg2);
  return result.TAG===0
    ? {tag:"Ok", value:result._0}
    : {tag:"Error", value:result._0}
};

export const toPointSet: (variant:distribution, env:environment) => 
    { tag: "Ok"; value: PointSetTypes_pointSetDist }
  | { tag: "Error"; value: GenericDist_error } = function (Arg1: any, Arg2: any) {
  const result = Curry._2(ForTS_DistributionBS.toPointSet, Arg1, Arg2);
  return result.TAG===0
    ? {tag:"Ok", value:result._0}
    : {tag:"Error", value:result._0}
};

export const toString: (variant:distribution) => string = ForTS_DistributionBS.toString;
