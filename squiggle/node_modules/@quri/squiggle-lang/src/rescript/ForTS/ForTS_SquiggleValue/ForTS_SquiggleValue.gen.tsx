/* TypeScript file generated from ForTS_SquiggleValue.res by genType. */
/* eslint-disable import/first */


// @ts-ignore: Implicit any on import
const ForTS_SquiggleValueBS = require('./ForTS_SquiggleValue.bs');

import type {arrayValue as Reducer_T_arrayValue} from '../../../../src/rescript/Reducer/Reducer_T.gen';

import type {map as Reducer_T_map} from '../../../../src/rescript/Reducer/Reducer_T.gen';

import type {squiggleValueTag as $$squiggleValueTag} from './ForTS_SquiggleValue_tag';

import type {squiggleValue_Declaration as ForTS_SquiggleValue_Declaration_squiggleValue_Declaration} from './ForTS_SquiggleValue_Declaration.gen';

import type {squiggleValue_Distribution as ForTS_SquiggleValue_Distribution_squiggleValue_Distribution} from './ForTS_SquiggleValue_Distribution.gen';

import type {squiggleValue_Lambda as ForTS_SquiggleValue_Lambda_squiggleValue_Lambda} from './ForTS_SquiggleValue_Lambda.gen';

import type {t as SqError_t} from '../../../../src/rescript/SqError.gen';

import type {value as Reducer_T_value} from '../../../../src/rescript/Reducer/Reducer_T.gen';

// tslint:disable-next-line:interface-over-type-literal
export type squiggleValue = Reducer_T_value;

// tslint:disable-next-line:interface-over-type-literal
export type error = SqError_t;

// tslint:disable-next-line:interface-over-type-literal
export type squiggleValue_Array = Reducer_T_arrayValue;

// tslint:disable-next-line:interface-over-type-literal
export type squiggleValue_Record = Reducer_T_map;

// tslint:disable-next-line:interface-over-type-literal
export type squiggleValue_Declaration = ForTS_SquiggleValue_Declaration_squiggleValue_Declaration;

// tslint:disable-next-line:interface-over-type-literal
export type squiggleValue_Distribution = ForTS_SquiggleValue_Distribution_squiggleValue_Distribution;

// tslint:disable-next-line:interface-over-type-literal
export type squiggleValue_Lambda = ForTS_SquiggleValue_Lambda_squiggleValue_Lambda;

// tslint:disable-next-line:interface-over-type-literal
export type squiggleValueTag = $$squiggleValueTag;

export const getTag: (variant:squiggleValue) => squiggleValueTag = ForTS_SquiggleValueBS.getTag;

export const toString: (variant:squiggleValue) => string = ForTS_SquiggleValueBS.toString;

export const toStringResult: (variantResult:
    { tag: "Ok"; value: squiggleValue }
  | { tag: "Error"; value: error }) => string = function (Arg1: any) {
  const result = ForTS_SquiggleValueBS.toStringResult(Arg1.tag==="Ok"
    ? {TAG: 0, _0:Arg1.value} as any
    : {TAG: 1, _0:Arg1.value} as any);
  return result
};

export const getArray: (variant:squiggleValue) => squiggleValue_Array = ForTS_SquiggleValueBS.getArray;

export const getBool: (variant:squiggleValue) => boolean = ForTS_SquiggleValueBS.getBool;

export const getDate: (variant:squiggleValue) => Date = ForTS_SquiggleValueBS.getDate;

export const getDeclaration: (variant:squiggleValue) => squiggleValue_Declaration = ForTS_SquiggleValueBS.getDeclaration;

export const getDistribution: (variant:squiggleValue) => squiggleValue_Distribution = ForTS_SquiggleValueBS.getDistribution;

export const getLambda: (variant:squiggleValue) => squiggleValue_Lambda = ForTS_SquiggleValueBS.getLambda;

export const getNumber: (variant:squiggleValue) => number = ForTS_SquiggleValueBS.getNumber;

export const getRecord: (variant:squiggleValue) => squiggleValue_Record = ForTS_SquiggleValueBS.getRecord;

export const getString: (variant:squiggleValue) => string = ForTS_SquiggleValueBS.getString;

export const getTimeDuration: (variant:squiggleValue) => number = ForTS_SquiggleValueBS.getTimeDuration;
