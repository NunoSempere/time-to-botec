'use strict';

var ForTS_SquiggleValue_tag = require("./ForTS_SquiggleValue_tag");
var Reducer_Value$QuriSquiggleLang = require("../../Reducer/Reducer_Value.bs.js");

var svtArray_ = ForTS_SquiggleValue_tag.squiggleValueTag.Array;

var svtBool_ = ForTS_SquiggleValue_tag.squiggleValueTag.Bool;

var svtDate_ = ForTS_SquiggleValue_tag.squiggleValueTag.Date;

var svtDeclaration_ = ForTS_SquiggleValue_tag.squiggleValueTag.Declaration;

var svtDistribution_ = ForTS_SquiggleValue_tag.squiggleValueTag.Distribution;

var svtLambda_ = ForTS_SquiggleValue_tag.squiggleValueTag.Lambda;

var svtNumber_ = ForTS_SquiggleValue_tag.squiggleValueTag.Number;

var svtRecord_ = ForTS_SquiggleValue_tag.squiggleValueTag.Record;

var svtString_ = ForTS_SquiggleValue_tag.squiggleValueTag.String;

var svtTimeDuration_ = ForTS_SquiggleValue_tag.squiggleValueTag.TimeDuration;

var svtVoid_ = ForTS_SquiggleValue_tag.squiggleValueTag.Void;

function getTag(variant) {
  if (typeof variant === "number") {
    return svtVoid_;
  }
  switch (variant.TAG | 0) {
    case /* IEvArray */0 :
        return svtArray_;
    case /* IEvBool */1 :
        return svtBool_;
    case /* IEvDate */2 :
        return svtDate_;
    case /* IEvDeclaration */3 :
        return svtDeclaration_;
    case /* IEvDistribution */4 :
        return svtDistribution_;
    case /* IEvLambda */5 :
        return svtLambda_;
    case /* IEvNumber */6 :
        return svtNumber_;
    case /* IEvRecord */7 :
        return svtRecord_;
    case /* IEvString */8 :
        return svtString_;
    case /* IEvTimeDuration */9 :
        return svtTimeDuration_;
    
  }
}

var toString = Reducer_Value$QuriSquiggleLang.toString;

var toStringResult = Reducer_Value$QuriSquiggleLang.toStringResult;

function getArray(variant) {
  if (typeof variant === "number") {
    throw {
          RE_EXN_ID: "Not_found",
          Error: new Error()
        };
  }
  if (variant.TAG === /* IEvArray */0) {
    return variant._0;
  }
  throw {
        RE_EXN_ID: "Not_found",
        Error: new Error()
      };
}

function getBool(variant) {
  if (typeof variant === "number") {
    throw {
          RE_EXN_ID: "Not_found",
          Error: new Error()
        };
  }
  if (variant.TAG === /* IEvBool */1) {
    return variant._0;
  }
  throw {
        RE_EXN_ID: "Not_found",
        Error: new Error()
      };
}

function getDate(variant) {
  if (typeof variant === "number") {
    throw {
          RE_EXN_ID: "Not_found",
          Error: new Error()
        };
  }
  if (variant.TAG === /* IEvDate */2) {
    return variant._0;
  }
  throw {
        RE_EXN_ID: "Not_found",
        Error: new Error()
      };
}

function getDeclaration(variant) {
  if (typeof variant === "number") {
    throw {
          RE_EXN_ID: "Not_found",
          Error: new Error()
        };
  }
  if (variant.TAG === /* IEvDeclaration */3) {
    return variant._0;
  }
  throw {
        RE_EXN_ID: "Not_found",
        Error: new Error()
      };
}

function getDistribution(variant) {
  if (typeof variant === "number") {
    throw {
          RE_EXN_ID: "Not_found",
          Error: new Error()
        };
  }
  if (variant.TAG === /* IEvDistribution */4) {
    return variant._0;
  }
  throw {
        RE_EXN_ID: "Not_found",
        Error: new Error()
      };
}

function getLambda(variant) {
  if (typeof variant === "number") {
    throw {
          RE_EXN_ID: "Not_found",
          Error: new Error()
        };
  }
  if (variant.TAG === /* IEvLambda */5) {
    return variant._0;
  }
  throw {
        RE_EXN_ID: "Not_found",
        Error: new Error()
      };
}

function getNumber(variant) {
  if (typeof variant === "number") {
    throw {
          RE_EXN_ID: "Not_found",
          Error: new Error()
        };
  }
  if (variant.TAG === /* IEvNumber */6) {
    return variant._0;
  }
  throw {
        RE_EXN_ID: "Not_found",
        Error: new Error()
      };
}

function getRecord(variant) {
  if (typeof variant === "number") {
    throw {
          RE_EXN_ID: "Not_found",
          Error: new Error()
        };
  }
  if (variant.TAG === /* IEvRecord */7) {
    return variant._0;
  }
  throw {
        RE_EXN_ID: "Not_found",
        Error: new Error()
      };
}

function getString(variant) {
  if (typeof variant === "number") {
    throw {
          RE_EXN_ID: "Not_found",
          Error: new Error()
        };
  }
  if (variant.TAG === /* IEvString */8) {
    return variant._0;
  }
  throw {
        RE_EXN_ID: "Not_found",
        Error: new Error()
      };
}

function getTimeDuration(variant) {
  if (typeof variant === "number") {
    throw {
          RE_EXN_ID: "Not_found",
          Error: new Error()
        };
  }
  if (variant.TAG === /* IEvTimeDuration */9) {
    return variant._0;
  }
  throw {
        RE_EXN_ID: "Not_found",
        Error: new Error()
      };
}

exports.svtArray_ = svtArray_;
exports.svtBool_ = svtBool_;
exports.svtDate_ = svtDate_;
exports.svtDeclaration_ = svtDeclaration_;
exports.svtDistribution_ = svtDistribution_;
exports.svtLambda_ = svtLambda_;
exports.svtNumber_ = svtNumber_;
exports.svtRecord_ = svtRecord_;
exports.svtString_ = svtString_;
exports.svtTimeDuration_ = svtTimeDuration_;
exports.svtVoid_ = svtVoid_;
exports.getTag = getTag;
exports.toString = toString;
exports.toStringResult = toStringResult;
exports.getArray = getArray;
exports.getBool = getBool;
exports.getDate = getDate;
exports.getDeclaration = getDeclaration;
exports.getDistribution = getDistribution;
exports.getLambda = getLambda;
exports.getNumber = getNumber;
exports.getRecord = getRecord;
exports.getString = getString;
exports.getTimeDuration = getTimeDuration;
/* svtArray_ Not a pure module */
