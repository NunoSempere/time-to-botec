/* TypeScript file generated from ForTS_ReducerProject.res by genType. */
/* eslint-disable import/first */


// @ts-ignore: Implicit any on import
const Curry = require('@rescript/std/lib/js/curry.js');

// @ts-ignore: Implicit any on import
const ForTS_ReducerProjectBS = require('./ForTS_ReducerProject.bs');

import type {environment as ForTS_Distribution_Environment_environment} from '../../../src/rescript/ForTS/ForTS_Distribution/ForTS_Distribution_Environment.gen';

import type {project as ReducerProject_T_project} from '../../../src/rescript/ReducerProject/ReducerProject_T.gen';

import type {squiggleValue_Record as ForTS_SquiggleValue_squiggleValue_Record} from '../../../src/rescript/ForTS/ForTS_SquiggleValue/ForTS_SquiggleValue.gen';

import type {squiggleValue as ForTS_SquiggleValue_squiggleValue} from '../../../src/rescript/ForTS/ForTS_SquiggleValue/ForTS_SquiggleValue.gen';

import type {t as SqError_t} from '../../../src/rescript/SqError.gen';

// tslint:disable-next-line:interface-over-type-literal
export type reducerProject = ReducerProject_T_project;

// tslint:disable-next-line:interface-over-type-literal
export type error = SqError_t;

// tslint:disable-next-line:interface-over-type-literal
export type squiggleValue = ForTS_SquiggleValue_squiggleValue;

// tslint:disable-next-line:interface-over-type-literal
export type squiggleValue_Record = ForTS_SquiggleValue_squiggleValue_Record;

// tslint:disable-next-line:interface-over-type-literal
export type environment = ForTS_Distribution_Environment_environment;

export const createProject: () => reducerProject = ForTS_ReducerProjectBS.createProject;

export const getSourceIds: (project:reducerProject) => string[] = ForTS_ReducerProjectBS.getSourceIds;

export const setSource: (project:reducerProject, sourceId:string, value:string) => void = function (Arg1: any, Arg2: any, Arg3: any) {
  const result = Curry._3(ForTS_ReducerProjectBS.setSource, Arg1, Arg2, Arg3);
  return result
};

export const removeSource: (project:reducerProject, sourceId:string) => void = function (Arg1: any, Arg2: any) {
  const result = Curry._2(ForTS_ReducerProjectBS.removeSource, Arg1, Arg2);
  return result
};

export const getSource: (project:reducerProject, sourceId:string) => (null | undefined | string) = function (Arg1: any, Arg2: any) {
  const result = Curry._2(ForTS_ReducerProjectBS.getSource, Arg1, Arg2);
  return result
};

export const touchSource: (project:reducerProject, sourceId:string) => void = function (Arg1: any, Arg2: any) {
  const result = Curry._2(ForTS_ReducerProjectBS.touchSource, Arg1, Arg2);
  return result
};

export const clean: (project:reducerProject, sourceId:string) => void = function (Arg1: any, Arg2: any) {
  const result = Curry._2(ForTS_ReducerProjectBS.clean, Arg1, Arg2);
  return result
};

export const cleanAll: (project:reducerProject) => void = ForTS_ReducerProjectBS.cleanAll;

export const cleanResults: (project:reducerProject, sourceId:string) => void = function (Arg1: any, Arg2: any) {
  const result = Curry._2(ForTS_ReducerProjectBS.cleanResults, Arg1, Arg2);
  return result
};

export const cleanAllResults: (project:reducerProject) => void = ForTS_ReducerProjectBS.cleanAllResults;

export const getIncludes: (project:reducerProject, sourceId:string) => 
    { tag: "Ok"; value: string[] }
  | { tag: "Error"; value: error } = function (Arg1: any, Arg2: any) {
  const result = Curry._2(ForTS_ReducerProjectBS.getIncludes, Arg1, Arg2);
  return result.TAG===0
    ? {tag:"Ok", value:result._0}
    : {tag:"Error", value:result._0}
};

export const getPastChain: (project:reducerProject, sourceId:string) => string[] = function (Arg1: any, Arg2: any) {
  const result = Curry._2(ForTS_ReducerProjectBS.getPastChain, Arg1, Arg2);
  return result
};

export const getContinues: (project:reducerProject, sourceId:string) => string[] = function (Arg1: any, Arg2: any) {
  const result = Curry._2(ForTS_ReducerProjectBS.getContinues, Arg1, Arg2);
  return result
};

export const setContinues: (project:reducerProject, sourceId:string, continues:string[]) => void = function (Arg1: any, Arg2: any, Arg3: any) {
  const result = Curry._3(ForTS_ReducerProjectBS.setContinues, Arg1, Arg2, Arg3);
  return result
};

export const getDependencies: (project:reducerProject, sourceId:string) => string[] = function (Arg1: any, Arg2: any) {
  const result = Curry._2(ForTS_ReducerProjectBS.getDependencies, Arg1, Arg2);
  return result
};

export const getDependents: (project:reducerProject, sourceId:string) => string[] = function (Arg1: any, Arg2: any) {
  const result = Curry._2(ForTS_ReducerProjectBS.getDependents, Arg1, Arg2);
  return result
};

export const getRunOrder: (project:reducerProject) => string[] = ForTS_ReducerProjectBS.getRunOrder;

export const getRunOrderFor: (project:reducerProject, sourceId:string) => string[] = function (Arg1: any, Arg2: any) {
  const result = Curry._2(ForTS_ReducerProjectBS.getRunOrderFor, Arg1, Arg2);
  return result
};

export const parseIncludes: (project:reducerProject, sourceId:string) => void = function (Arg1: any, Arg2: any) {
  const result = Curry._2(ForTS_ReducerProjectBS.parseIncludes, Arg1, Arg2);
  return result
};

export const rawParse: (project:reducerProject, sourceId:string) => void = function (Arg1: any, Arg2: any) {
  const result = Curry._2(ForTS_ReducerProjectBS.rawParse, Arg1, Arg2);
  return result
};

export const run: (project:reducerProject, sourceId:string) => void = function (Arg1: any, Arg2: any) {
  const result = Curry._2(ForTS_ReducerProjectBS.run, Arg1, Arg2);
  return result
};

export const runAll: (project:reducerProject) => void = ForTS_ReducerProjectBS.runAll;

export const getBindings: (project:reducerProject, sourceId:string) => squiggleValue_Record = function (Arg1: any, Arg2: any) {
  const result = Curry._2(ForTS_ReducerProjectBS.getBindings, Arg1, Arg2);
  return result
};

export const getResult: (project:reducerProject, sourceId:string) => 
    { tag: "Ok"; value: squiggleValue }
  | { tag: "Error"; value: error } = function (Arg1: any, Arg2: any) {
  const result = Curry._2(ForTS_ReducerProjectBS.getResult, Arg1, Arg2);
  return result.TAG===0
    ? {tag:"Ok", value:result._0}
    : {tag:"Error", value:result._0}
};

export const evaluate: (sourceCode:string) => [
    { tag: "Ok"; value: squiggleValue }
  | { tag: "Error"; value: error }, squiggleValue_Record] = function (Arg1: any) {
  const result = ForTS_ReducerProjectBS.evaluate(Arg1);
  return [result[0].TAG===0
    ? {tag:"Ok", value:result[0]._0}
    : {tag:"Error", value:result[0]._0}, result[1]]
};

export const setEnvironment: (project:reducerProject, environment:environment) => void = function (Arg1: any, Arg2: any) {
  const result = Curry._2(ForTS_ReducerProjectBS.setEnvironment, Arg1, Arg2);
  return result
};

export const getEnvironment: (project:reducerProject) => environment = ForTS_ReducerProjectBS.getEnvironment;
