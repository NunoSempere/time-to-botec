'use strict';

var Curry = require("@rescript/std/lib/js/curry.js");
var E_R$QuriSquiggleLang = require("../Utility/E/E_R.bs.js");
var GenericDist$QuriSquiggleLang = require("../Distributions/GenericDist.bs.js");
var FunctionRegistry_Core$QuriSquiggleLang = require("../FunctionRegistry/FunctionRegistry_Core.bs.js");
var FunctionRegistry_Helpers$QuriSquiggleLang = require("../FunctionRegistry/FunctionRegistry_Helpers.bs.js");

var nameSpace = "Dist";

function runScoring(estimate, answer, prior, env) {
  return E_R$QuriSquiggleLang.errMap(E_R$QuriSquiggleLang.fmap(GenericDist$QuriSquiggleLang.Score.logScore(estimate, answer, prior, env), FunctionRegistry_Helpers$QuriSquiggleLang.Wrappers.evNumber), (function (e) {
                return {
                        TAG: 2,
                        _0: e,
                        [Symbol.for("name")]: "REDistributionError"
                      };
              }));
}

var library = [
  FunctionRegistry_Core$QuriSquiggleLang.$$Function.make("logScore", nameSpace, true, [
        FunctionRegistry_Core$QuriSquiggleLang.FnDefinition.make("logScore", [{
                TAG: 0,
                _0: [
                  [
                    "estimate",
                    /* FRTypeDist */6
                  ],
                  [
                    "answer",
                    /* FRTypeDistOrNumber */5
                  ],
                  [
                    "prior",
                    /* FRTypeDist */6
                  ]
                ],
                [Symbol.for("name")]: "FRTypeRecord"
              }], (function (inputs, context, param) {
                var e = Curry._2(FunctionRegistry_Helpers$QuriSquiggleLang.Prepare.ToValueArray.Record.threeArgs, inputs, [
                      "estimate",
                      "answer",
                      "prior"
                    ]);
                if (e.TAG !== /* Ok */0) {
                  return {
                          TAG: 1,
                          _0: FunctionRegistry_Helpers$QuriSquiggleLang.wrapError(e._0),
                          [Symbol.for("name")]: "Error"
                        };
                }
                var match = e._0;
                if (match.length !== 3) {
                  return {
                          TAG: 1,
                          _0: FunctionRegistry_Helpers$QuriSquiggleLang.impossibleError,
                          [Symbol.for("name")]: "Error"
                        };
                }
                var estimate = match[0];
                if (typeof estimate === "number") {
                  return {
                          TAG: 1,
                          _0: FunctionRegistry_Helpers$QuriSquiggleLang.impossibleError,
                          [Symbol.for("name")]: "Error"
                        };
                }
                if (estimate.TAG !== /* IEvDistribution */4) {
                  return {
                          TAG: 1,
                          _0: FunctionRegistry_Helpers$QuriSquiggleLang.impossibleError,
                          [Symbol.for("name")]: "Error"
                        };
                }
                var estimate$1 = estimate._0;
                var d = match[1];
                if (typeof d === "number") {
                  return {
                          TAG: 1,
                          _0: FunctionRegistry_Helpers$QuriSquiggleLang.impossibleError,
                          [Symbol.for("name")]: "Error"
                        };
                }
                switch (d.TAG | 0) {
                  case /* IEvDistribution */4 :
                      var prior = match[2];
                      if (typeof prior === "number" || prior.TAG !== /* IEvDistribution */4) {
                        return {
                                TAG: 1,
                                _0: FunctionRegistry_Helpers$QuriSquiggleLang.impossibleError,
                                [Symbol.for("name")]: "Error"
                              };
                      } else {
                        return runScoring(estimate$1, {
                                    TAG: 0,
                                    _0: d._0,
                                    [Symbol.for("name")]: "Score_Dist"
                                  }, prior._0, context.environment);
                      }
                  case /* IEvNumber */6 :
                      var prior$1 = match[2];
                      if (typeof prior$1 === "number" || prior$1.TAG !== /* IEvDistribution */4) {
                        return {
                                TAG: 1,
                                _0: FunctionRegistry_Helpers$QuriSquiggleLang.impossibleError,
                                [Symbol.for("name")]: "Error"
                              };
                      } else {
                        return runScoring(estimate$1, {
                                    TAG: 1,
                                    _0: d._0,
                                    [Symbol.for("name")]: "Score_Scalar"
                                  }, prior$1._0, context.environment);
                      }
                  default:
                    return {
                            TAG: 1,
                            _0: FunctionRegistry_Helpers$QuriSquiggleLang.impossibleError,
                            [Symbol.for("name")]: "Error"
                          };
                }
              }), undefined),
        FunctionRegistry_Core$QuriSquiggleLang.FnDefinition.make("logScore", [{
                TAG: 0,
                _0: [
                  [
                    "estimate",
                    /* FRTypeDist */6
                  ],
                  [
                    "answer",
                    /* FRTypeDistOrNumber */5
                  ]
                ],
                [Symbol.for("name")]: "FRTypeRecord"
              }], (function (inputs, context, param) {
                var e = Curry._2(FunctionRegistry_Helpers$QuriSquiggleLang.Prepare.ToValueArray.Record.twoArgs, inputs, [
                      "estimate",
                      "answer"
                    ]);
                if (e.TAG !== /* Ok */0) {
                  return {
                          TAG: 1,
                          _0: FunctionRegistry_Helpers$QuriSquiggleLang.wrapError(e._0),
                          [Symbol.for("name")]: "Error"
                        };
                }
                var match = e._0;
                if (match.length !== 2) {
                  return {
                          TAG: 1,
                          _0: FunctionRegistry_Helpers$QuriSquiggleLang.impossibleError,
                          [Symbol.for("name")]: "Error"
                        };
                }
                var estimate = match[0];
                if (typeof estimate === "number") {
                  return {
                          TAG: 1,
                          _0: FunctionRegistry_Helpers$QuriSquiggleLang.impossibleError,
                          [Symbol.for("name")]: "Error"
                        };
                }
                if (estimate.TAG !== /* IEvDistribution */4) {
                  return {
                          TAG: 1,
                          _0: FunctionRegistry_Helpers$QuriSquiggleLang.impossibleError,
                          [Symbol.for("name")]: "Error"
                        };
                }
                var estimate$1 = estimate._0;
                var d = match[1];
                if (typeof d === "number") {
                  return {
                          TAG: 1,
                          _0: FunctionRegistry_Helpers$QuriSquiggleLang.impossibleError,
                          [Symbol.for("name")]: "Error"
                        };
                }
                switch (d.TAG | 0) {
                  case /* IEvDistribution */4 :
                      return runScoring(estimate$1, {
                                  TAG: 0,
                                  _0: d._0,
                                  [Symbol.for("name")]: "Score_Dist"
                                }, undefined, context.environment);
                  case /* IEvNumber */6 :
                      return runScoring(estimate$1, {
                                  TAG: 1,
                                  _0: d._0,
                                  [Symbol.for("name")]: "Score_Scalar"
                                }, undefined, context.environment);
                  default:
                    return {
                            TAG: 1,
                            _0: FunctionRegistry_Helpers$QuriSquiggleLang.impossibleError,
                            [Symbol.for("name")]: "Error"
                          };
                }
              }), undefined)
      ], [
        "Dist.logScore({estimate: normal(5,2), answer: normal(5.2,1), prior: normal(5.5,3)})",
        "Dist.logScore({estimate: normal(5,2), answer: normal(5.2,1)})",
        "Dist.logScore({estimate: normal(5,2), answer: 4.5})"
      ], /* EvtNumber */6, undefined, undefined, undefined),
  FunctionRegistry_Core$QuriSquiggleLang.$$Function.make("klDivergence", nameSpace, true, [FunctionRegistry_Core$QuriSquiggleLang.FnDefinition.make("klDivergence", [
              /* FRTypeDist */6,
              /* FRTypeDist */6
            ], (function (inputs, context, param) {
                if (inputs.length !== 2) {
                  return {
                          TAG: 1,
                          _0: FunctionRegistry_Helpers$QuriSquiggleLang.impossibleError,
                          [Symbol.for("name")]: "Error"
                        };
                }
                var estimate = inputs[0];
                if (typeof estimate === "number") {
                  return {
                          TAG: 1,
                          _0: FunctionRegistry_Helpers$QuriSquiggleLang.impossibleError,
                          [Symbol.for("name")]: "Error"
                        };
                }
                if (estimate.TAG !== /* IEvDistribution */4) {
                  return {
                          TAG: 1,
                          _0: FunctionRegistry_Helpers$QuriSquiggleLang.impossibleError,
                          [Symbol.for("name")]: "Error"
                        };
                }
                var d = inputs[1];
                if (typeof d === "number" || d.TAG !== /* IEvDistribution */4) {
                  return {
                          TAG: 1,
                          _0: FunctionRegistry_Helpers$QuriSquiggleLang.impossibleError,
                          [Symbol.for("name")]: "Error"
                        };
                } else {
                  return runScoring(estimate._0, {
                              TAG: 0,
                              _0: d._0,
                              [Symbol.for("name")]: "Score_Dist"
                            }, undefined, context.environment);
                }
              }), undefined)], ["Dist.klDivergence(normal(5,2), normal(5,1.5))"], /* EvtNumber */6, undefined, undefined, undefined)
];

var requiresNamespace = true;

exports.nameSpace = nameSpace;
exports.requiresNamespace = requiresNamespace;
exports.runScoring = runScoring;
exports.library = library;
/* library Not a pure module */
