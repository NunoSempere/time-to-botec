'use strict';

var Curry = require("@rescript/std/lib/js/curry.js");
var Belt_MapString = require("@rescript/std/lib/js/belt_MapString.js");
var E_A$QuriSquiggleLang = require("../Utility/E/E_A.bs.js");
var E_R$QuriSquiggleLang = require("../Utility/E/E_R.bs.js");
var SqError$QuriSquiggleLang = require("../SqError.bs.js");
var XYShape$QuriSquiggleLang = require("../Utility/XYShape.bs.js");
var Discrete$QuriSquiggleLang = require("../Distributions/PointSetDist/Discrete.bs.js");
var Continuous$QuriSquiggleLang = require("../Distributions/PointSetDist/Continuous.bs.js");
var GenericDist$QuriSquiggleLang = require("../Distributions/GenericDist.bs.js");
var PointSetDist$QuriSquiggleLang = require("../Distributions/PointSetDist/PointSetDist.bs.js");
var Reducer_Lambda$QuriSquiggleLang = require("../Reducer/Reducer_Lambda.bs.js");
var FunctionRegistry_Core$QuriSquiggleLang = require("../FunctionRegistry/FunctionRegistry_Core.bs.js");
var FunctionRegistry_Helpers$QuriSquiggleLang = require("../FunctionRegistry/FunctionRegistry_Helpers.bs.js");

var nameSpace = "PointSet";

function inputsToDist(inputs, xyShapeToPointSetDist) {
  if (inputs.length !== 1) {
    return SqError$QuriSquiggleLang.Message.$$throw(FunctionRegistry_Helpers$QuriSquiggleLang.impossibleError);
  }
  var items = inputs[0];
  if (typeof items === "number" || items.TAG !== /* IEvArray */0) {
    return SqError$QuriSquiggleLang.Message.$$throw(FunctionRegistry_Helpers$QuriSquiggleLang.impossibleError);
  } else {
    return E_R$QuriSquiggleLang.fmap(E_R$QuriSquiggleLang.bind({
                    TAG: 0,
                    _0: E_A$QuriSquiggleLang.fmap(items._0, (function (item) {
                            if (typeof item === "number") {
                              return SqError$QuriSquiggleLang.Message.$$throw(FunctionRegistry_Helpers$QuriSquiggleLang.impossibleError);
                            }
                            if (item.TAG !== /* IEvRecord */7) {
                              return SqError$QuriSquiggleLang.Message.$$throw(FunctionRegistry_Helpers$QuriSquiggleLang.impossibleError);
                            }
                            var map = item._0;
                            var xValue = Belt_MapString.get(map, "x");
                            var yValue = Belt_MapString.get(map, "y");
                            if (xValue !== undefined && !(typeof xValue === "number" || !(xValue.TAG === /* IEvNumber */6 && yValue !== undefined && !(typeof yValue === "number" || yValue.TAG !== /* IEvNumber */6)))) {
                              return [
                                      xValue._0,
                                      yValue._0
                                    ];
                            } else {
                              return SqError$QuriSquiggleLang.Message.$$throw(FunctionRegistry_Helpers$QuriSquiggleLang.impossibleError);
                            }
                          })),
                    [Symbol.for("name")]: "Ok"
                  }, (function (r) {
                      return E_R$QuriSquiggleLang.errMap(XYShape$QuriSquiggleLang.T.makeFromZipped(r), XYShape$QuriSquiggleLang.$$Error.toString);
                    })), (function (r) {
                  return {
                          TAG: 4,
                          _0: {
                            TAG: 0,
                            _0: Curry._1(xyShapeToPointSetDist, r),
                            [Symbol.for("name")]: "PointSet"
                          },
                          [Symbol.for("name")]: "IEvDistribution"
                        };
                }));
  }
}

function toType(r) {
  if (r.TAG === /* Ok */0) {
    return {
            TAG: 0,
            _0: FunctionRegistry_Helpers$QuriSquiggleLang.Wrappers.evDistribution({
                  TAG: 0,
                  _0: r._0,
                  [Symbol.for("name")]: "PointSet"
                }),
            [Symbol.for("name")]: "Ok"
          };
  } else {
    return {
            TAG: 1,
            _0: {
              TAG: 9,
              _0: r._0,
              [Symbol.for("name")]: "REOperationError"
            },
            [Symbol.for("name")]: "Error"
          };
  }
}

function doLambdaCall(aLambdaValue, list, context, reducer) {
  var f = Reducer_Lambda$QuriSquiggleLang.doLambdaCall(aLambdaValue, list, context, reducer);
  if (typeof f === "number" || f.TAG !== /* IEvNumber */6) {
    return {
            TAG: 1,
            _0: /* SampleMapNeedsNtoNFunction */4,
            [Symbol.for("name")]: "Error"
          };
  } else {
    return {
            TAG: 0,
            _0: f._0,
            [Symbol.for("name")]: "Ok"
          };
  }
}

function mapY(pointSetDist, aLambdaValue, context, reducer) {
  var fn = function (r) {
    return doLambdaCall(aLambdaValue, [{
                  TAG: 6,
                  _0: r,
                  [Symbol.for("name")]: "IEvNumber"
                }], context, reducer);
  };
  return toType(Curry._4(PointSetDist$QuriSquiggleLang.T.mapYResult, undefined, undefined, pointSetDist, fn));
}

var Internal = {
  toType: toType,
  doLambdaCall: doLambdaCall,
  mapY: mapY
};

var library = [
  FunctionRegistry_Core$QuriSquiggleLang.$$Function.make("fromDist", nameSpace, true, [FunctionRegistry_Core$QuriSquiggleLang.FnDefinition.make("fromDist", [/* FRTypeDist */6], (function (inputs, context, param) {
                if (inputs.length !== 1) {
                  return {
                          TAG: 1,
                          _0: FunctionRegistry_Helpers$QuriSquiggleLang.impossibleError,
                          [Symbol.for("name")]: "Error"
                        };
                }
                var dist = inputs[0];
                if (typeof dist === "number" || dist.TAG !== /* IEvDistribution */4) {
                  return {
                          TAG: 1,
                          _0: FunctionRegistry_Helpers$QuriSquiggleLang.impossibleError,
                          [Symbol.for("name")]: "Error"
                        };
                } else {
                  return E_R$QuriSquiggleLang.errMap(E_R$QuriSquiggleLang.fmap(E_R$QuriSquiggleLang.fmap(GenericDist$QuriSquiggleLang.toPointSet(dist._0, context.environment.xyPointLength, context.environment.sampleCount, undefined, undefined), FunctionRegistry_Helpers$QuriSquiggleLang.Wrappers.pointSet), FunctionRegistry_Helpers$QuriSquiggleLang.Wrappers.evDistribution), (function (e) {
                                return {
                                        TAG: 2,
                                        _0: e,
                                        [Symbol.for("name")]: "REDistributionError"
                                      };
                              }));
                }
              }), undefined)], ["PointSet.fromDist(normal(5,2))"], /* EvtDistribution */4, undefined, undefined, undefined),
  FunctionRegistry_Core$QuriSquiggleLang.$$Function.make("mapY", nameSpace, true, [FunctionRegistry_Core$QuriSquiggleLang.FnDefinition.make("mapY", [
              /* FRTypeDist */6,
              /* FRTypeLambda */7
            ], (function (inputs, context, reducer) {
                if (inputs.length !== 2) {
                  return {
                          TAG: 1,
                          _0: FunctionRegistry_Helpers$QuriSquiggleLang.impossibleError,
                          [Symbol.for("name")]: "Error"
                        };
                }
                var match = inputs[0];
                if (typeof match === "number") {
                  return {
                          TAG: 1,
                          _0: FunctionRegistry_Helpers$QuriSquiggleLang.impossibleError,
                          [Symbol.for("name")]: "Error"
                        };
                }
                if (match.TAG !== /* IEvDistribution */4) {
                  return {
                          TAG: 1,
                          _0: FunctionRegistry_Helpers$QuriSquiggleLang.impossibleError,
                          [Symbol.for("name")]: "Error"
                        };
                }
                var dist = match._0;
                switch (dist.TAG | 0) {
                  case /* PointSet */0 :
                      var lambda = inputs[1];
                      if (typeof lambda === "number" || lambda.TAG !== /* IEvLambda */5) {
                        return {
                                TAG: 1,
                                _0: FunctionRegistry_Helpers$QuriSquiggleLang.impossibleError,
                                [Symbol.for("name")]: "Error"
                              };
                      } else {
                        return mapY(dist._0, lambda._0, context, reducer);
                      }
                  case /* SampleSet */1 :
                  case /* Symbolic */2 :
                      return {
                              TAG: 1,
                              _0: FunctionRegistry_Helpers$QuriSquiggleLang.impossibleError,
                              [Symbol.for("name")]: "Error"
                            };
                  
                }
              }), undefined)], ["PointSet.mapY(mx(normal(5,2)), {|x| x + 1})"], /* EvtDistribution */4, undefined, undefined, undefined),
  FunctionRegistry_Core$QuriSquiggleLang.$$Function.make("makeContinuous", nameSpace, true, [FunctionRegistry_Core$QuriSquiggleLang.FnDefinition.make("makeContinuous", [{
                TAG: 2,
                _0: {
                  TAG: 0,
                  _0: [
                    [
                      "x",
                      /* FRTypeNumeric */2
                    ],
                    [
                      "y",
                      /* FRTypeNumeric */2
                    ]
                  ],
                  [Symbol.for("name")]: "FRTypeRecord"
                },
                [Symbol.for("name")]: "FRTypeArray"
              }], (function (inputs, param, param$1) {
                return E_R$QuriSquiggleLang.errMap(inputsToDist(inputs, (function (r) {
                                  return {
                                          TAG: 2,
                                          _0: Continuous$QuriSquiggleLang.make(undefined, undefined, undefined, r),
                                          [Symbol.for("name")]: "Continuous"
                                        };
                                })), FunctionRegistry_Helpers$QuriSquiggleLang.wrapError);
              }), undefined)], ["PointSet.makeContinuous([\n        {x: 0, y: 0.2},\n        {x: 1, y: 0.7},\n        {x: 2, y: 0.8},\n        {x: 3, y: 0.2}\n      ])"], /* EvtDistribution */4, undefined, undefined, undefined),
  FunctionRegistry_Core$QuriSquiggleLang.$$Function.make("makeDiscrete", nameSpace, true, [FunctionRegistry_Core$QuriSquiggleLang.FnDefinition.make("makeDiscrete", [{
                TAG: 2,
                _0: {
                  TAG: 0,
                  _0: [
                    [
                      "x",
                      /* FRTypeNumeric */2
                    ],
                    [
                      "y",
                      /* FRTypeNumeric */2
                    ]
                  ],
                  [Symbol.for("name")]: "FRTypeRecord"
                },
                [Symbol.for("name")]: "FRTypeArray"
              }], (function (inputs, param, param$1) {
                return E_R$QuriSquiggleLang.errMap(inputsToDist(inputs, (function (r) {
                                  return {
                                          TAG: 1,
                                          _0: Discrete$QuriSquiggleLang.make(undefined, undefined, r),
                                          [Symbol.for("name")]: "Discrete"
                                        };
                                })), FunctionRegistry_Helpers$QuriSquiggleLang.wrapError);
              }), undefined)], ["PointSet.makeDiscrete([\n        {x: 0, y: 0.2},\n        {x: 1, y: 0.7},\n        {x: 2, y: 0.8},\n        {x: 3, y: 0.2}\n      ])"], /* EvtDistribution */4, undefined, undefined, undefined)
];

var requiresNamespace = true;

exports.nameSpace = nameSpace;
exports.requiresNamespace = requiresNamespace;
exports.inputsToDist = inputsToDist;
exports.Internal = Internal;
exports.library = library;
/* library Not a pure module */
