'use strict';

var Belt_List = require("@rescript/std/lib/js/belt_List.js");
var Belt_Array = require("@rescript/std/lib/js/belt_Array.js");
var Belt_Result = require("@rescript/std/lib/js/belt_Result.js");
var Belt_MapString = require("@rescript/std/lib/js/belt_MapString.js");
var E_A$QuriSquiggleLang = require("../Utility/E/E_A.bs.js");
var ReducerProject_T$QuriSquiggleLang = require("./ReducerProject_T.bs.js");
var ReducerProject_ProjectItem$QuriSquiggleLang = require("./ReducerProject_ProjectItem.bs.js");

function getImmediateDependencies($$this, sourceId) {
  return ReducerProject_ProjectItem$QuriSquiggleLang.getImmediateDependencies(ReducerProject_T$QuriSquiggleLang.getItem($$this, sourceId));
}

function topologicalSortUtil($$this, sourceId, state) {
  var dependencies = Belt_Result.getWithDefault(ReducerProject_ProjectItem$QuriSquiggleLang.getImmediateDependencies(ReducerProject_T$QuriSquiggleLang.getItem($$this, sourceId)), []);
  var myVisited = Belt_MapString.set(state[0], sourceId, true);
  var match = E_A$QuriSquiggleLang.reduce(dependencies, [
        myVisited,
        state[1]
      ], (function (param, dependency) {
          var currStack = param[1];
          var currVisited = param[0];
          if (Belt_MapString.getWithDefault(currVisited, dependency, false)) {
            return [
                    currVisited,
                    currStack
                  ];
          } else {
            return topologicalSortUtil($$this, dependency, [
                        currVisited,
                        currStack
                      ]);
          }
        }));
  return [
          match[0],
          {
            hd: sourceId,
            tl: match[1]
          }
        ];
}

function getTopologicalSort($$this) {
  var match = E_A$QuriSquiggleLang.reduce(ReducerProject_T$QuriSquiggleLang.getSourceIds($$this), [
        undefined,
        /* [] */0
      ], (function (param, currId) {
          var currStack = param[1];
          var currVisited = param[0];
          if (Belt_MapString.getWithDefault(currVisited, currId, false)) {
            return [
                    currVisited,
                    currStack
                  ];
          } else {
            return topologicalSortUtil($$this, currId, [
                        currVisited,
                        currStack
                      ]);
          }
        }));
  return Belt_List.toArray(Belt_List.reverse(match[1]));
}

function getRunOrderFor($$this, sourceId) {
  var match = topologicalSortUtil($$this, sourceId, [
        undefined,
        /* [] */0
      ]);
  return Belt_List.toArray(Belt_List.reverse(match[1]));
}

function getDependencies($$this, sourceId) {
  var runOrder = getTopologicalSort($$this);
  var index = runOrder.indexOf(sourceId);
  return runOrder.slice(0, index);
}

function getDependents($$this, sourceId) {
  var runOrder = getTopologicalSort($$this);
  var index = runOrder.indexOf(sourceId);
  return Belt_Array.sliceToEnd(runOrder, index + 1 | 0);
}

function runOrderDiff(current, previous0) {
  var extraLength = E_A$QuriSquiggleLang.length(current) > E_A$QuriSquiggleLang.length(previous0) ? E_A$QuriSquiggleLang.length(current) - E_A$QuriSquiggleLang.length(previous0) | 0 : 0;
  var previous = previous0.slice(0);
  var filler = Belt_Array.make(extraLength, "");
  E_A$QuriSquiggleLang.forEach(filler, (function (param) {
          previous.push("");
        }));
  var zipped = E_A$QuriSquiggleLang.zip(current, previous);
  return E_A$QuriSquiggleLang.reduce(zipped, [
                true,
                []
              ], (function (param, param$1) {
                  var curr = param$1[0];
                  var acc = param[1];
                  if (param[0]) {
                    if (curr === param$1[1]) {
                      return [
                              true,
                              acc
                            ];
                    } else {
                      return [
                              false,
                              E_A$QuriSquiggleLang.concat(acc, [curr])
                            ];
                    }
                  } else {
                    return [
                            false,
                            E_A$QuriSquiggleLang.concat(acc, [curr])
                          ];
                  }
                }))[1];
}

var ProjectItem;

var T;

var getSourceIds = ReducerProject_T$QuriSquiggleLang.getSourceIds;

var getItem = ReducerProject_T$QuriSquiggleLang.getItem;

var getRunOrder = getTopologicalSort;

exports.ProjectItem = ProjectItem;
exports.T = T;
exports.getSourceIds = getSourceIds;
exports.getItem = getItem;
exports.getImmediateDependencies = getImmediateDependencies;
exports.topologicalSortUtil = topologicalSortUtil;
exports.getTopologicalSort = getTopologicalSort;
exports.getRunOrder = getRunOrder;
exports.getRunOrderFor = getRunOrderFor;
exports.getDependencies = getDependencies;
exports.getDependents = getDependents;
exports.runOrderDiff = runOrderDiff;
/* E_A-QuriSquiggleLang Not a pure module */
