'use strict';

var Belt_MapString = require("@rescript/std/lib/js/belt_MapString.js");
var E_A$QuriSquiggleLang = require("../Utility/E/E_A.bs.js");
var SqError$QuriSquiggleLang = require("../SqError.bs.js");
var Reducer_Lambda$QuriSquiggleLang = require("../Reducer/Reducer_Lambda.bs.js");
var Reducer_Namespace$QuriSquiggleLang = require("../Reducer/Reducer_Namespace.bs.js");
var SquiggleLibrary_Math$QuriSquiggleLang = require("./SquiggleLibrary_Math.bs.js");
var FunctionRegistry_Core$QuriSquiggleLang = require("../FunctionRegistry/FunctionRegistry_Core.bs.js");
var FunctionRegistry_Library$QuriSquiggleLang = require("../FunctionRegistry/FunctionRegistry_Library.bs.js");
var SquiggleLibrary_Versions$QuriSquiggleLang = require("./SquiggleLibrary_Versions.bs.js");

var res = Reducer_Namespace$QuriSquiggleLang.mergeFrom(Reducer_Namespace$QuriSquiggleLang.mergeFrom(Reducer_Namespace$QuriSquiggleLang.make(undefined), SquiggleLibrary_Math$QuriSquiggleLang.make(undefined)), SquiggleLibrary_Versions$QuriSquiggleLang.make(undefined));

var res$1 = Reducer_Namespace$QuriSquiggleLang.set(res, "$_atIndex_$", {
      TAG: 5,
      _0: Reducer_Lambda$QuriSquiggleLang.makeFFILambda("$_atIndex_$", (function (inputs, param, param$1) {
              if (inputs.length !== 2) {
                return SqError$QuriSquiggleLang.Message.$$throw({
                            TAG: 15,
                            _0: "Trying to access key on wrong value",
                            [Symbol.for("name")]: "REOther"
                          });
              }
              var aValueArray = inputs[0];
              if (typeof aValueArray === "number") {
                return SqError$QuriSquiggleLang.Message.$$throw({
                            TAG: 15,
                            _0: "Trying to access key on wrong value",
                            [Symbol.for("name")]: "REOther"
                          });
              }
              switch (aValueArray.TAG | 0) {
                case /* IEvArray */0 :
                    var fIndex = inputs[1];
                    if (typeof fIndex === "number") {
                      return SqError$QuriSquiggleLang.Message.$$throw({
                                  TAG: 15,
                                  _0: "Trying to access key on wrong value",
                                  [Symbol.for("name")]: "REOther"
                                });
                    }
                    if (fIndex.TAG !== /* IEvNumber */6) {
                      return SqError$QuriSquiggleLang.Message.$$throw({
                                  TAG: 15,
                                  _0: "Trying to access key on wrong value",
                                  [Symbol.for("name")]: "REOther"
                                });
                    }
                    var index = fIndex._0 | 0;
                    var value = E_A$QuriSquiggleLang.get(aValueArray._0, index);
                    if (value !== undefined) {
                      return value;
                    } else {
                      return SqError$QuriSquiggleLang.Message.$$throw({
                                  TAG: 1,
                                  _0: "Array index not found",
                                  _1: index,
                                  [Symbol.for("name")]: "REArrayIndexNotFound"
                                });
                    }
                case /* IEvRecord */7 :
                    var sIndex = inputs[1];
                    if (typeof sIndex === "number") {
                      return SqError$QuriSquiggleLang.Message.$$throw({
                                  TAG: 15,
                                  _0: "Trying to access key on wrong value",
                                  [Symbol.for("name")]: "REOther"
                                });
                    }
                    if (sIndex.TAG !== /* IEvString */8) {
                      return SqError$QuriSquiggleLang.Message.$$throw({
                                  TAG: 15,
                                  _0: "Trying to access key on wrong value",
                                  [Symbol.for("name")]: "REOther"
                                });
                    }
                    var sIndex$1 = sIndex._0;
                    var value$1 = Belt_MapString.get(aValueArray._0, sIndex$1);
                    if (value$1 !== undefined) {
                      return value$1;
                    } else {
                      return SqError$QuriSquiggleLang.Message.$$throw({
                                  TAG: 10,
                                  _0: "Record property not found",
                                  _1: sIndex$1,
                                  [Symbol.for("name")]: "RERecordPropertyNotFound"
                                });
                    }
                default:
                  return SqError$QuriSquiggleLang.Message.$$throw({
                              TAG: 15,
                              _0: "Trying to access key on wrong value",
                              [Symbol.for("name")]: "REOther"
                            });
              }
            })),
      [Symbol.for("name")]: "IEvLambda"
    });

var res$2 = E_A$QuriSquiggleLang.reduce(FunctionRegistry_Library$QuriSquiggleLang.nonRegistryLambdas, res$1, (function (cur, param) {
        return Reducer_Namespace$QuriSquiggleLang.set(cur, param[0], {
                    TAG: 5,
                    _0: param[1],
                    [Symbol.for("name")]: "IEvLambda"
                  });
      }));

var res$3 = E_A$QuriSquiggleLang.reduce(FunctionRegistry_Core$QuriSquiggleLang.Registry.allNames(FunctionRegistry_Library$QuriSquiggleLang.registry), res$2, (function (cur, name) {
        return Reducer_Namespace$QuriSquiggleLang.set(cur, name, {
                    TAG: 5,
                    _0: Reducer_Lambda$QuriSquiggleLang.makeFFILambda(name, (function ($$arguments, context, reducer) {
                            var value = FunctionRegistry_Library$QuriSquiggleLang.call(name, $$arguments, context, reducer);
                            if (value.TAG === /* Ok */0) {
                              return value._0;
                            } else {
                              return SqError$QuriSquiggleLang.Message.$$throw(value._0);
                            }
                          })),
                    [Symbol.for("name")]: "IEvLambda"
                  });
      }));

var stdLib = res$3;

exports.stdLib = stdLib;
/* res Not a pure module */
