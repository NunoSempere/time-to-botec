'use strict';

var Caml = require("@rescript/std/lib/js/caml.js");
var Curry = require("@rescript/std/lib/js/curry.js");
var Jstat = require("jstat");
var Js_math = require("@rescript/std/lib/js/js_math.js");
var Js_array = require("@rescript/std/lib/js/js_array.js");
var Belt_List = require("@rescript/std/lib/js/belt_List.js");
var Belt_Array = require("@rescript/std/lib/js/belt_Array.js");
var Caml_array = require("@rescript/std/lib/js/caml_array.js");
var Belt_Result = require("@rescript/std/lib/js/belt_Result.js");
var Caml_option = require("@rescript/std/lib/js/caml_option.js");
var Belt_SortArray = require("@rescript/std/lib/js/belt_SortArray.js");
var Caml_exceptions = require("@rescript/std/lib/js/caml_exceptions.js");
var Caml_splice_call = require("@rescript/std/lib/js/caml_splice_call.js");
var E_O$QuriSquiggleLang = require("./E_O.bs.js");
var E_R$QuriSquiggleLang = require("./E_R.bs.js");

function length(prim) {
  return prim.length;
}

function unsafe_get(prim0, prim1) {
  return prim0[prim1];
}

function last(a) {
  return Belt_Array.get(a, a.length - 1 | 0);
}

function first(__x) {
  return Belt_Array.get(__x, 0);
}

function isEmpty(r) {
  return r.length < 1;
}

function getByFmap(a, fn, boolCondition) {
  var i = 0;
  var finalFunctionValue;
  var length = a.length;
  while(i < length && finalFunctionValue === undefined) {
    var itemWithFnApplied = Curry._1(fn, a[i]);
    if (Curry._1(boolCondition, itemWithFnApplied)) {
      finalFunctionValue = Caml_option.some(itemWithFnApplied);
    }
    i = i + 1 | 0;
  };
  return finalFunctionValue;
}

function zip3(a, b, c) {
  return Belt_Array.map(Belt_Array.zip(Belt_Array.zip(a, b), c), (function (param) {
                var match = param[0];
                return [
                        match[0],
                        match[1],
                        param[1]
                      ];
              }));
}

function uniq(__x) {
  return Belt_Array.reduce(__x, [], (function (acc, v) {
                if (Belt_Array.some(acc, (function (param) {
                          return v === param;
                        }))) {
                  return acc;
                } else {
                  return Belt_Array.concat([v], acc);
                }
              }));
}

function intersperse(a, b) {
  var c = Belt_Array.concatMany(Belt_Array.zipBy(a, b, (function (e, f) {
              return [
                      e,
                      f
                    ];
            })));
  return Belt_Array.concat(c, Belt_Array.sliceToEnd(a, b.length));
}

function accumulate(items, fn) {
  var length = items.length;
  var empty = Belt_Array.make(length, items[0]);
  Belt_Array.forEachWithIndex(items, (function (index, element) {
          var item = index !== 0 ? Curry._2(fn, element, empty[index - 1 | 0]) : element;
          Belt_Array.set(empty, index, item);
        }));
  return empty;
}

function tail(__x) {
  return Belt_Array.sliceToEnd(__x, 1);
}

function pairwise(t, fn) {
  return Belt_Array.zipBy(t, Belt_Array.sliceToEnd(t, 1), fn);
}

function toRanges(a) {
  if (a.length > 1) {
    return {
            TAG: 0,
            _0: Belt_Array.zip(a, Belt_Array.sliceToEnd(a, 1)),
            [Symbol.for("name")]: "Ok"
          };
  } else {
    return {
            TAG: 1,
            _0: "Must be at least 2 elements",
            [Symbol.for("name")]: "Error"
          };
  }
}

function joinWith(prim0, prim1) {
  return prim0.join(prim1);
}

function transpose(xs) {
  var arr = [];
  for(var i = 0 ,i_finish = xs.length; i < i_finish; ++i){
    for(var j = 0 ,j_finish = Caml_array.get(xs, i).length; j < j_finish; ++j){
      if (arr.length <= j) {
        Js_array.push([Caml_array.get(Caml_array.get(xs, i), j)], arr);
      } else {
        Js_array.push(Caml_array.get(Caml_array.get(xs, i), j), Caml_array.get(arr, j));
      }
    }
  }
  return arr;
}

function concatSomes(optionals) {
  return Belt_Array.map(Belt_Array.keep(optionals, E_O$QuriSquiggleLang.isSome), (function (__x) {
                return E_O$QuriSquiggleLang.toExn(__x, "Warning: This should not have happened");
              }));
}

function defaultEmpty(o) {
  if (o !== undefined) {
    return o;
  } else {
    return [];
  }
}

function arrSomeToSomeArr(_optionals) {
  while(true) {
    var optionals = _optionals;
    var optionals$p = Belt_List.fromArray(optionals);
    if (!optionals$p) {
      return [];
    }
    if (optionals$p.hd === undefined) {
      return ;
    }
    _optionals = Belt_List.toArray(optionals$p.tl);
    continue ;
  };
}

function firstSome(x) {
  return Belt_Array.getBy(x, E_O$QuriSquiggleLang.isSome);
}

function firstSomeFn(r) {
  return E_O$QuriSquiggleLang.flatten(getByFmap(r, (function (l) {
                    return Curry._1(l, undefined);
                  }), E_O$QuriSquiggleLang.isSome));
}

function firstSomeFnWithDefault(r, $$default) {
  return E_O$QuriSquiggleLang.$$default(firstSomeFn(r), $$default);
}

function openIfAllSome(optionals) {
  if (Belt_Array.every(optionals, E_O$QuriSquiggleLang.isSome)) {
    return Belt_Array.map(optionals, (function (__x) {
                  return E_O$QuriSquiggleLang.toExn(__x, "Warning: This should not have happened");
                }));
  }
  
}

var O = {
  concatSomes: concatSomes,
  defaultEmpty: defaultEmpty,
  arrSomeToSomeArr: arrSomeToSomeArr,
  firstSome: firstSome,
  firstSomeFn: firstSomeFn,
  firstSomeFnWithDefault: firstSomeFnWithDefault,
  openIfAllSome: openIfAllSome
};

function firstErrorOrOpen(results) {
  var match = Belt_Array.getBy(results, Belt_Result.isError);
  var bringErrorUp = match !== undefined && match.TAG !== /* Ok */0 ? ({
        TAG: 1,
        _0: match._0,
        [Symbol.for("name")]: "Error"
      }) : ({
        TAG: 0,
        _0: results,
        [Symbol.for("name")]: "Ok"
      });
  var forceOpen = function (r) {
    return Belt_Array.map(r, Belt_Result.getExn);
  };
  return Belt_Result.map(bringErrorUp, forceOpen);
}

function filterOk(x) {
  return concatSomes(Belt_Array.map(x, E_R$QuriSquiggleLang.toOption));
}

function forM(x, fn) {
  return firstErrorOrOpen(Belt_Array.map(x, fn));
}

function foldM(x, init, fn) {
  var acc = init;
  var $$final = {
    TAG: 0,
    _0: undefined,
    [Symbol.for("name")]: "Ok"
  };
  var $$break = false;
  var i = 0;
  while($$break !== true && i < x.length) {
    var r = Curry._2(fn, acc, Caml_array.get(x, i));
    if (r.TAG === /* Ok */0) {
      acc = r._0;
    } else {
      $$final = {
        TAG: 1,
        _0: r._0,
        [Symbol.for("name")]: "Error"
      };
      $$break = true;
    }
    i = i + 1 | 0;
  };
  var err = $$final;
  if (err.TAG === /* Ok */0) {
    return {
            TAG: 0,
            _0: acc,
            [Symbol.for("name")]: "Ok"
          };
  } else {
    return {
            TAG: 1,
            _0: err._0,
            [Symbol.for("name")]: "Error"
          };
  }
}

var R = {
  firstErrorOrOpen: firstErrorOrOpen,
  filterOk: filterOk,
  forM: forM,
  foldM: foldM
};

function mean(prim) {
  return Jstat.mean(prim);
}

function geomean(prim) {
  return Jstat.geomean(prim);
}

function mode(prim) {
  return Jstat.mode(prim);
}

function variance(prim) {
  return Jstat.variance(prim);
}

function stdev(prim) {
  return Jstat.stdev(prim);
}

function sum(prim) {
  return Jstat.sum(prim);
}

function product(prim) {
  return Jstat.product(prim);
}

var floatCompare = Caml.float_compare;

function sort(t) {
  var typedArray = new Float64Array(t);
  typedArray.sort();
  var typedArrayToArray = (a => Array.from(a));
  return typedArrayToArray(typedArray);
}

function getNonFinite(t) {
  return Belt_Array.getBy(t, (function (r) {
                return !Number.isFinite(r);
              }));
}

function getBelowZero(t) {
  return Belt_Array.getBy(t, (function (r) {
                return r < 0.0;
              }));
}

function isSorted(t) {
  if (t.length < 1) {
    return true;
  } else {
    return Belt_Array.every(pairwise(t, (function (first, second) {
                      return first < second;
                    })), (function (t) {
                  return t;
                }));
  }
}

function percentile(a, b) {
  return Jstat.percentile(a, b, false);
}

function diff(t) {
  return pairwise(t, (function (left, right) {
                return right - left;
              }));
}

function cumSum(t) {
  return accumulate(t, (function (a, b) {
                return a + b;
              }));
}

function cumProd(t) {
  return accumulate(t, (function (a, b) {
                return a * b;
              }));
}

var $$RangeError = /* @__PURE__ */Caml_exceptions.create("E_A-QuriSquiggleLang.Floats.RangeError");

function range(min, max, n) {
  switch (n) {
    case 0 :
        return [];
    case 1 :
        return [min];
    case 2 :
        return [
                min,
                max
              ];
    default:
      if (min === max) {
        return Belt_Array.make(n, min);
      }
      if (n < 0) {
        throw {
              RE_EXN_ID: $$RangeError,
              _1: "n must be greater than 0",
              Error: new Error()
            };
      }
      if (min > max) {
        throw {
              RE_EXN_ID: $$RangeError,
              _1: "Min value is less then max value",
              Error: new Error()
            };
      }
      var diff = (max - min) / (n - 1 | 0);
      return Belt_Array.makeBy(n, (function (i) {
                    return min + i * diff;
                  }));
  }
}

function min(prim) {
  return Caml_splice_call.spliceApply(Math.min, [prim]);
}

function max(prim) {
  return Caml_splice_call.spliceApply(Math.max, [prim]);
}

function range$1(minOpt, maxOpt, a) {
  var min = minOpt !== undefined ? minOpt : first;
  var max = maxOpt !== undefined ? maxOpt : last;
  var match = Curry._1(min, a);
  var match$1 = Curry._1(max, a);
  if (match !== undefined && match$1 !== undefined) {
    return match$1 - match;
  }
  
}

function binarySearchFirstElementGreaterIndex(ar, el) {
  var el$1 = Belt_SortArray.binarySearchBy(ar, el, floatCompare);
  var el$2 = el$1 < 0 ? Math.imul(el$1, -1) - 1 | 0 : el$1;
  if (el$2 >= ar.length) {
    return "overMax";
  } else if (el$2 === 0) {
    return "underMin";
  } else {
    return {
            NAME: "firstHigher",
            VAL: el$2
          };
  }
}

function concat(t1, t2) {
  return sort(Belt_Array.concat(t1, t2));
}

function concatMany(t1) {
  return sort(Belt_Array.concatMany(t1));
}

function makeIncrementalUp(a, b) {
  return Belt_Array.makeBy((b - a | 0) + 1 | 0, (function (i) {
                return a + i | 0;
              }));
}

function makeIncrementalDown(a, b) {
  return Belt_Array.makeBy((a - b | 0) + 1 | 0, (function (i) {
                return a - i | 0;
              }));
}

var Sorted = {
  min: first,
  max: last,
  range: range$1,
  binarySearchFirstElementGreaterIndex: binarySearchFirstElementGreaterIndex,
  concat: concat,
  concatMany: concatMany,
  makeIncrementalUp: makeIncrementalUp,
  makeIncrementalDown: makeIncrementalDown
};

var Floats = {
  mean: mean,
  geomean: geomean,
  mode: mode,
  variance: variance,
  stdev: stdev,
  sum: sum,
  product: product,
  random: Js_math.random_int,
  floatCompare: floatCompare,
  sort: sort,
  getNonFinite: getNonFinite,
  getBelowZero: getBelowZero,
  isSorted: isSorted,
  percentile: percentile,
  diff: diff,
  cumSum: cumSum,
  cumProd: cumProd,
  $$RangeError: $$RangeError,
  range: range,
  min: min,
  max: max,
  Sorted: Sorted
};

var fmap = Belt_Array.map;

var fmapi = Belt_Array.mapWithIndex;

var forEach = Belt_Array.forEach;

var forEachI = Belt_Array.forEachWithIndex;

var get = Belt_Array.get;

var getBy = Belt_Array.getBy;

var getIndexBy = Belt_Array.getIndexBy;

var concat$1 = Belt_Array.concat;

var concatMany$1 = Belt_Array.concatMany;

var makeBy = Belt_Array.makeBy;

var slice = Belt_Array.slice;

var reduce = Belt_Array.reduce;

var reduceReverse = Belt_Array.reduceReverse;

var reducei = Belt_Array.reduceWithIndex;

var fold_left = Belt_Array.reduce;

var some = Belt_Array.some;

var every = Belt_Array.every;

var stableSortBy = Belt_SortArray.stableSortBy;

var zip = Belt_Array.zip;

var unzip = Belt_Array.unzip;

var to_list = Belt_List.fromArray;

var filter = Belt_Array.keep;

var Sorted$1;

exports.fmap = fmap;
exports.fmapi = fmapi;
exports.forEach = forEach;
exports.forEachI = forEachI;
exports.length = length;
exports.unsafe_get = unsafe_get;
exports.get = get;
exports.getBy = getBy;
exports.getIndexBy = getIndexBy;
exports.last = last;
exports.first = first;
exports.concat = concat$1;
exports.concatMany = concatMany$1;
exports.makeBy = makeBy;
exports.slice = slice;
exports.reduce = reduce;
exports.reduceReverse = reduceReverse;
exports.reducei = reducei;
exports.fold_left = fold_left;
exports.some = some;
exports.every = every;
exports.isEmpty = isEmpty;
exports.stableSortBy = stableSortBy;
exports.getByFmap = getByFmap;
exports.zip = zip;
exports.unzip = unzip;
exports.zip3 = zip3;
exports.to_list = to_list;
exports.uniq = uniq;
exports.intersperse = intersperse;
exports.accumulate = accumulate;
exports.tail = tail;
exports.pairwise = pairwise;
exports.toRanges = toRanges;
exports.filter = filter;
exports.joinWith = joinWith;
exports.transpose = transpose;
exports.O = O;
exports.R = R;
exports.Floats = Floats;
exports.Sorted = Sorted$1;
/* jstat Not a pure module */
