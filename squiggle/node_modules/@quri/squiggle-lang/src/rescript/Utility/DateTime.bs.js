'use strict';

var Curry = require("@rescript/std/lib/js/curry.js");
var E_R$QuriSquiggleLang = require("./E/E_R.bs.js");
var E_Float$QuriSquiggleLang = require("./E/E_Float.bs.js");

var year = 86400000 * 365.25;

function fromFloat(f) {
  return f;
}

function toFloat(d) {
  return d;
}

function fromMinutes(h) {
  return h * 60000;
}

function fromHours(h) {
  return h * 3600000;
}

function fromDays(d) {
  return d * 86400000;
}

function fromYears(y) {
  return y * year;
}

function toMinutes(t) {
  return t / 60000;
}

function toHours(t) {
  return t / 3600000;
}

function toDays(t) {
  return t / 86400000;
}

function toYears(t) {
  return t / year;
}

function toString(t) {
  var display = function (f, s) {
    return "" + E_Float$QuriSquiggleLang.with3DigitsPrecision(f) + " " + s + "" + (
            f !== 1.0 ? "s" : ""
          ) + "";
  };
  var abs = Math.abs(t);
  if (abs >= year) {
    return display(t / year, "year");
  } else if (abs >= 86400000) {
    return display(t / 86400000, "day");
  } else if (abs >= 3600000) {
    return display(t / 3600000, "hour");
  } else if (abs >= 60000) {
    return display(t / 60000, "minute");
  } else {
    return E_Float$QuriSquiggleLang.toFixed(t) + "ms";
  }
}

function add(t1, t2) {
  return t1 + t2;
}

function subtract(t1, t2) {
  return t1 - t2;
}

function multiply(t1, t2) {
  return t1 * t2;
}

function divide(t1, t2) {
  return t1 / t2;
}

var Duration = {
  minute: 60000,
  hour: 3600000,
  day: 86400000,
  year: year,
  fromFloat: fromFloat,
  toFloat: toFloat,
  fromMinutes: fromMinutes,
  fromHours: fromHours,
  fromDays: fromDays,
  fromYears: fromYears,
  toMinutes: toMinutes,
  toHours: toHours,
  toDays: toDays,
  toYears: toYears,
  toString: toString,
  add: add,
  subtract: subtract,
  multiply: multiply,
  divide: divide
};

function toFloat$1(prim) {
  return prim.getTime();
}

function getFullYear(prim) {
  return prim.getFullYear();
}

function toString$1(prim) {
  return prim.toDateString();
}

function fromFloat$1(prim) {
  return new Date(prim);
}

function fmap(t, fn) {
  return new Date(Curry._1(fn, t.getTime()));
}

function subtract$1(t1, t2) {
  var f1 = t1.getTime();
  var f2 = t2.getTime();
  var diff = f1 - f2;
  if (diff < 0.0) {
    return {
            TAG: 1,
            _0: "Cannot subtract a date by one that is in its future",
            [Symbol.for("name")]: "Error"
          };
  } else {
    return {
            TAG: 0,
            _0: diff,
            [Symbol.for("name")]: "Ok"
          };
  }
}

function addDuration(t, duration) {
  return new Date(t.getTime() + duration);
}

function subtractDuration(t, duration) {
  return new Date(t.getTime() - duration);
}

function makeWithYearInt(y) {
  if (y < 100) {
    return {
            TAG: 1,
            _0: "Year must be over 100",
            [Symbol.for("name")]: "Error"
          };
  } else if (y > 200000) {
    return {
            TAG: 1,
            _0: "Year must be less than 200000",
            [Symbol.for("name")]: "Error"
          };
  } else {
    return {
            TAG: 0,
            _0: new Date(y, 0.0),
            [Symbol.for("name")]: "Ok"
          };
  }
}

function makeFromYear(year$1) {
  var floor = Math.floor(year$1);
  return E_R$QuriSquiggleLang.fmap(makeWithYearInt(floor | 0), (function (earlyDate) {
                var diff = year$1 - floor;
                return addDuration(earlyDate, diff * year);
              }));
}

var $$Date$1 = {
  toFloat: toFloat$1,
  getFullYear: getFullYear,
  toString: toString$1,
  fromFloat: fromFloat$1,
  fmap: fmap,
  subtract: subtract$1,
  addDuration: addDuration,
  subtractDuration: subtractDuration,
  makeWithYearInt: makeWithYearInt,
  makeFromYear: makeFromYear
};

exports.Duration = Duration;
exports.$$Date = $$Date$1;
/* No side effect */
