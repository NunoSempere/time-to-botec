"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SqContinuousPointSetDist = exports.SqDiscretePointSetDist = exports.SqMixedPointSetDist = exports.wrapPointSetDist = void 0;
const zipWith_1 = __importDefault(require("lodash/zipWith"));
const SqDistribution_1 = require("./SqDistribution");
const RSPointSetDist = __importStar(require("../rescript/ForTS/ForTS_Distribution/ForTS_Distribution_PointSetDistribution.gen"));
const ForTS_Distribution_PointSetDistribution_tag_1 = require("../rescript/ForTS/ForTS_Distribution/ForTS_Distribution_PointSetDistribution_tag");
const shapePoints = (x) => {
    let xs = x.xyShape.xs;
    let ys = x.xyShape.ys;
    return (0, zipWith_1.default)(xs, ys, (x, y) => ({ x, y }));
};
const wrapPointSetDist = (value) => {
    const tag = RSPointSetDist.getTag(value);
    return new tagToClass[tag](value);
};
exports.wrapPointSetDist = wrapPointSetDist;
class SqAbstractPointSetDist {
    constructor(_value) {
        this._value = _value;
        this.valueMethod = (rsMethod) => {
            const value = rsMethod(this._value);
            if (!value)
                throw new Error("Internal casting error");
            return value;
        };
    }
    asDistribution() {
        return (0, SqDistribution_1.wrapDistribution)(RSPointSetDist.toDistribution(this._value));
    }
}
class SqMixedPointSetDist extends SqAbstractPointSetDist {
    constructor() {
        super(...arguments);
        this.tag = ForTS_Distribution_PointSetDistribution_tag_1.pointSetDistributionTag.Mixed;
    }
    get value() {
        return this.valueMethod(RSPointSetDist.getMixed);
    }
    asShape() {
        const v = this.value;
        return {
            discrete: shapePoints(v.discrete),
            continuous: shapePoints(v.continuous),
        };
    }
}
exports.SqMixedPointSetDist = SqMixedPointSetDist;
class SqDiscretePointSetDist extends SqAbstractPointSetDist {
    constructor() {
        super(...arguments);
        this.tag = ForTS_Distribution_PointSetDistribution_tag_1.pointSetDistributionTag.Discrete;
    }
    get value() {
        return this.valueMethod(RSPointSetDist.getDiscrete);
    }
    asShape() {
        const v = this.value;
        return {
            discrete: shapePoints(v),
            continuous: [],
        };
    }
}
exports.SqDiscretePointSetDist = SqDiscretePointSetDist;
class SqContinuousPointSetDist extends SqAbstractPointSetDist {
    constructor() {
        super(...arguments);
        this.tag = ForTS_Distribution_PointSetDistribution_tag_1.pointSetDistributionTag.Continuous;
    }
    get value() {
        return this.valueMethod(RSPointSetDist.getContinues);
    }
    asShape() {
        const v = this.value;
        return {
            discrete: [],
            continuous: shapePoints(v),
        };
    }
}
exports.SqContinuousPointSetDist = SqContinuousPointSetDist;
const tagToClass = {
    [ForTS_Distribution_PointSetDistribution_tag_1.pointSetDistributionTag.Mixed]: SqMixedPointSetDist,
    [ForTS_Distribution_PointSetDistribution_tag_1.pointSetDistributionTag.Discrete]: SqDiscretePointSetDist,
    [ForTS_Distribution_PointSetDistribution_tag_1.pointSetDistributionTag.Continuous]: SqContinuousPointSetDist,
};
//# sourceMappingURL=SqPointSetDist.js.map