"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const utils_1 = require("./utils");
const extra_typings_1 = require("@commander-js/extra-typings");
const open_1 = __importDefault(require("open"));
extra_typings_1.program
    .command("run")
    .arguments("[filename]")
    .option("-e, --eval <code>", "run a given squiggle code string instead of a file")
    .option("-t --time", "output the time it took to evaluate the code")
    .option("-q, --quiet", "don't output the results and bindings")
    .option("-b, --show-bindings", "show bindings even if the result is present")
    .action((filename, options) => {
    let src = "";
    let output = "RESULT_OR_BINDINGS";
    if (options.quiet && options.showBindings) {
        extra_typings_1.program.error("--quiet and --show-bindings can't be set at the same time.");
    }
    else if (options.quiet) {
        output = "NONE";
    }
    else if (options.showBindings) {
        output = "RESULT_AND_BINDINGS";
    }
    if (filename && options.eval) {
        extra_typings_1.program.error("Only one of filename and eval string should be set.");
    }
    else if (filename) {
        src = fs_1.default.readFileSync(filename, "utf-8");
    }
    else if (options.eval) {
        src = options.eval;
    }
    else {
        extra_typings_1.program.error("One of filename and eval string should be set.");
    }
    const sampleCount = process.env.SAMPLE_COUNT;
    (0, utils_1.run)(src, {
        output,
        measure: options.time,
        sampleCount,
    });
});
extra_typings_1.program.command("playground").action(() => {
    (0, open_1.default)("https://www.squiggle-language.com/playground");
});
const main = () => __awaiter(void 0, void 0, void 0, function* () {
    yield extra_typings_1.program.parseAsync();
});
main();
//# sourceMappingURL=index.js.map