"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.run = exports.green = exports.red = exports.measure = void 0;
const isFinite_1 = __importDefault(require("lodash/isFinite"));
const SqProject_1 = require("../SqProject");
const SqValue_1 = require("../SqValue");
const measure = (callback) => {
    const t1 = new Date();
    callback();
    const t2 = new Date();
    return (t2.getTime() - t1.getTime()) / 1000;
};
exports.measure = measure;
const red = (str) => `\x1b[31m${str}\x1b[0m`;
exports.red = red;
const green = (str) => `\x1b[32m${str}\x1b[0m`;
exports.green = green;
const run = (src, props = { output: "RESULT_OR_BINDINGS" }) => {
    const project = SqProject_1.SqProject.create();
    if (props.sampleCount && (0, isFinite_1.default)(Number(props.sampleCount))) {
        project.setEnvironment({
            sampleCount: Number(props.sampleCount),
            xyPointLength: Number(props.sampleCount),
        });
    }
    project.setSource("main", src);
    const time = (0, exports.measure)(() => project.run("main"));
    const bindings = project.getBindings("main");
    const result = project.getResult("main");
    let isFirstSection = true;
    const printLines = (...lines) => {
        if (!isFirstSection) {
            console.log();
        }
        isFirstSection = false;
        lines.forEach((line) => console.log(line));
    };
    if (result.tag === "Error") {
        printLines((0, exports.red)("Error:"), result.value.toStringWithStackTrace());
    }
    else {
        switch (props.output) {
            case "RESULT_OR_BINDINGS":
                if (result.value.tag === SqValue_1.SqValueTag.Void) {
                    printLines(bindings.toString());
                }
                else {
                    printLines(result.value.toString());
                }
                break;
            case "RESULT_AND_BINDINGS":
                printLines((0, exports.green)("Result:"), result.value.toString());
                printLines((0, exports.green)("Bindings:"), bindings.toString());
                break;
            case "NONE":
        }
    }
    if (props.measure) {
        printLines(`${(0, exports.green)("Time:")} ${time}s`);
    }
};
exports.run = run;
//# sourceMappingURL=utils.js.map