"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SqSymbolicDistribution = exports.SqSampleSetDistribution = exports.SqPointSetDistribution = exports.wrapDistribution = exports.SqDistributionTag = void 0;
const RSDistribution = __importStar(require("../rescript/ForTS/ForTS_Distribution/ForTS_Distribution.gen"));
const ForTS_Distribution_tag_1 = require("../rescript/ForTS/ForTS_Distribution/ForTS_Distribution_tag");
Object.defineProperty(exports, "SqDistributionTag", { enumerable: true, get: function () { return ForTS_Distribution_tag_1.distributionTag; } });
const SqDistributionError_1 = require("./SqDistributionError");
const SqPointSetDist_1 = require("./SqPointSetDist");
const types_1 = require("./types");
const wrapDistribution = (value) => {
    const tag = RSDistribution.getTag(value);
    return new tagToClass[tag](value);
};
exports.wrapDistribution = wrapDistribution;
class SqAbstractDistribution {
    constructor(_value) {
        this._value = _value;
        this.valueMethod = (rsMethod) => {
            const value = rsMethod(this._value);
            if (!value)
                throw new Error("Internal casting error");
            return value;
        };
    }
    pointSet(env) {
        const innerResult = RSDistribution.toPointSet(this._value, env);
        return (0, types_1.resultMap2)(innerResult, SqPointSetDist_1.wrapPointSetDist, (v) => new SqDistributionError_1.SqDistributionError(v));
    }
    toString() {
        RSDistribution.toString(this._value);
    }
    mean(env) {
        return (0, types_1.resultMap2)(RSDistribution.mean({ env }, this._value), (v) => v, (e) => new SqDistributionError_1.SqDistributionError(e));
    }
    pdf(env, n) {
        return (0, types_1.resultMap2)(RSDistribution.pdf({ env }, this._value, n), (v) => v, (e) => new SqDistributionError_1.SqDistributionError(e));
    }
    cdf(env, n) {
        return (0, types_1.resultMap2)(RSDistribution.cdf({ env }, this._value, n), (v) => v, (e) => new SqDistributionError_1.SqDistributionError(e));
    }
    inv(env, n) {
        return (0, types_1.resultMap2)(RSDistribution.inv({ env }, this._value, n), (v) => v, (e) => new SqDistributionError_1.SqDistributionError(e));
    }
    stdev(env) {
        return (0, types_1.resultMap2)(RSDistribution.stdev({ env }, this._value), (v) => v, (e) => new SqDistributionError_1.SqDistributionError(e));
    }
}
class SqPointSetDistribution extends SqAbstractDistribution {
    constructor() {
        super(...arguments);
        this.tag = ForTS_Distribution_tag_1.distributionTag.PointSet;
    }
    value() {
        return (0, SqPointSetDist_1.wrapPointSetDist)(this.valueMethod(RSDistribution.getPointSet));
    }
}
exports.SqPointSetDistribution = SqPointSetDistribution;
class SqSampleSetDistribution extends SqAbstractDistribution {
    constructor() {
        super(...arguments);
        this.tag = ForTS_Distribution_tag_1.distributionTag.SampleSet;
    }
    value() {
        return this.valueMethod(RSDistribution.getSampleSet);
    }
}
exports.SqSampleSetDistribution = SqSampleSetDistribution;
class SqSymbolicDistribution extends SqAbstractDistribution {
    constructor() {
        super(...arguments);
        this.tag = ForTS_Distribution_tag_1.distributionTag.Symbolic;
    }
}
exports.SqSymbolicDistribution = SqSymbolicDistribution;
const tagToClass = {
    [ForTS_Distribution_tag_1.distributionTag.PointSet]: SqPointSetDistribution,
    [ForTS_Distribution_tag_1.distributionTag.SampleSet]: SqSampleSetDistribution,
    [ForTS_Distribution_tag_1.distributionTag.Symbolic]: SqSymbolicDistribution,
};
//# sourceMappingURL=SqDistribution.js.map