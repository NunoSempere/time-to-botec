"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SqLambda = void 0;
const RSLambda = __importStar(require("../rescript/ForTS/ForTS_SquiggleValue/ForTS_SquiggleValue_Lambda.gen"));
class SqLambda {
    constructor(_value, location) {
        this._value = _value;
        this.location = location;
    }
    parameters() {
        return RSLambda.parameters(this._value);
    }
    call(args) {
        const { project, sourceId } = this.location;
        const callId = "__lambda__";
        const quote = (arg) => `"${arg.replace(new RegExp('"', "g"), '\\"')}"`;
        const argsSource = args
            .map((arg) => (typeof arg === "number" ? arg : quote(arg)))
            .join(",");
        const pathItems = [
            ...(this.location.path.root === "result" ? ["__result__"] : []),
            ...this.location.path.items,
        ];
        const functionNameSource = pathItems
            .map((item, i) => typeof item === "string" ? (i ? "." + item : item) : `[${item}]`)
            .join("");
        const source = `${functionNameSource}(${argsSource})`;
        project.setSource(callId, source);
        project.setContinues(callId, [sourceId]);
        project.run(callId);
        return project.getResult(callId);
    }
}
exports.SqLambda = SqLambda;
//# sourceMappingURL=SqLambda.js.map