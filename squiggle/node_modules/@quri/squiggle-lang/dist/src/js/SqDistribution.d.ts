import * as RSDistribution from "../rescript/ForTS/ForTS_Distribution/ForTS_Distribution.gen";
import { distributionTag as Tag } from "../rescript/ForTS/ForTS_Distribution/ForTS_Distribution_tag";
import { environment } from "../rescript/ForTS/ForTS__Types.gen";
import { SqDistributionError } from "./SqDistributionError";
declare type T = RSDistribution.distribution;
export { Tag as SqDistributionTag };
export declare const wrapDistribution: (value: T) => SqDistribution;
declare abstract class SqAbstractDistribution {
    private _value;
    abstract tag: Tag;
    constructor(_value: T);
    protected valueMethod: <IR>(rsMethod: (v: T) => IR | null | undefined) => NonNullable<IR>;
    pointSet(env: environment): import("./types").result<import("./SqPointSetDist").SqMixedPointSetDist | import("./SqPointSetDist").SqDiscretePointSetDist | import("./SqPointSetDist").SqContinuousPointSetDist, SqDistributionError>;
    toString(): void;
    mean(env: environment): import("./types").result<number, SqDistributionError>;
    pdf(env: environment, n: number): import("./types").result<number, SqDistributionError>;
    cdf(env: environment, n: number): import("./types").result<number, SqDistributionError>;
    inv(env: environment, n: number): import("./types").result<number, SqDistributionError>;
    stdev(env: environment): import("./types").result<number, SqDistributionError>;
}
export declare class SqPointSetDistribution extends SqAbstractDistribution {
    tag: Tag.PointSet;
    value(): import("./SqPointSetDist").SqMixedPointSetDist | import("./SqPointSetDist").SqDiscretePointSetDist | import("./SqPointSetDist").SqContinuousPointSetDist;
}
export declare class SqSampleSetDistribution extends SqAbstractDistribution {
    tag: Tag.SampleSet;
    value(): number[];
}
export declare class SqSymbolicDistribution extends SqAbstractDistribution {
    tag: Tag.Symbolic;
}
export declare type SqDistribution = SqPointSetDistribution | SqSampleSetDistribution | SqSymbolicDistribution;
