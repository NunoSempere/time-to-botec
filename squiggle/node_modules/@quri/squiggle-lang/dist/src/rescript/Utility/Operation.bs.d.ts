export namespace Convolution {
    export { fromAlgebraicOperation };
    export { canDoAlgebraicOperation };
    export { toFn };
}
export namespace $$Error {
    export { toString };
}
export function power(a: any, b: any): {
    [x: symbol]: string;
    TAG: number;
    _0: number;
};
export function divide(a: any, b: any): {
    [x: symbol]: string;
    TAG: number;
    _0: number;
};
export function logarithm(a: any, b: any): {
    [x: symbol]: string;
    TAG: number;
    _0: number;
};
export namespace Algebraic {
    export { toFn$1 as toFn };
    export { toString$1 as toString };
    export { format };
}
export namespace Pointwise {
    export { toString$2 as toString };
    export { format$1 as format };
}
export namespace DistToFloat {
    export { format$2 as format };
}
export namespace Scale {
    export { toFn$2 as toFn };
    export { format$3 as format };
    export { toIntegralSumCacheFn };
    export { toIntegralCacheFn };
}
export namespace Truncate {
    export { toString$3 as toString };
}
declare function fromAlgebraicOperation(op: any): "Multiply" | "Add" | "Subtract" | undefined;
declare function canDoAlgebraicOperation(op: any): boolean;
declare function toFn(x: any): (prim0: any, prim1: any) => any;
declare function toString(err: any): any;
declare function toFn$1(x: any, a: any, b: any): {
    [x: symbol]: string;
    TAG: number;
    _0: any;
};
declare function toString$1(x: any): "log" | "**" | "/" | "*" | "+" | "-";
declare function format(a: any, b: any, c: any): string;
declare function toString$2(x: any): "**" | "*" | "+";
declare function format$1(a: any, b: any, c: any): string;
declare function format$2(operation: any, value: any): string;
declare function toFn$2(x: any, a: any, b: any): {
    [x: symbol]: string;
    TAG: number;
    _0: number;
};
declare function format$3(operation: any, value: any, scaleBy: any): string;
declare function toIntegralSumCacheFn(x: any): (param: any, param$1: any) => void;
declare function toIntegralCacheFn(x: any): (param: any, param$1: any) => void;
declare function toString$3(left: any, right: any, nodeToString: any): string;
export {};
