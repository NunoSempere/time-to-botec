'use strict';
var Curry = require("@rescript/std/lib/js/curry.js");
var Caml_option = require("@rescript/std/lib/js/caml_option.js");
function dimap(e, sFn, rFn) {
    if (e !== undefined) {
        return Curry._1(sFn, Caml_option.valFromOption(e));
    }
    else {
        return Curry._1(rFn, undefined);
    }
}
function fmap(x, f) {
    if (x !== undefined) {
        return Caml_option.some(Curry._1(f, Caml_option.valFromOption(x)));
    }
}
function bind(o, f) {
    if (o !== undefined) {
        return Curry._1(f, Caml_option.valFromOption(o));
    }
}
function $$default(o, d) {
    if (o !== undefined) {
        return Caml_option.valFromOption(o);
    }
    else {
        return d;
    }
}
function defaultFn(o, d) {
    if (o !== undefined) {
        return Caml_option.valFromOption(o);
    }
    else {
        return Curry._1(d, undefined);
    }
}
function isSome(o) {
    return o !== undefined;
}
function isNone(o) {
    return o === undefined;
}
function toExn(o, err) {
    if (o !== undefined) {
        return Caml_option.valFromOption(o);
    }
    throw {
        RE_EXN_ID: "Failure",
        _1: err,
        Error: new Error()
    };
}
function some(a) {
    return Caml_option.some(a);
}
function firstSome(a, b) {
    if (a !== undefined) {
        return a;
    }
    else {
        return b;
    }
}
function flatten(o) {
    if (o !== undefined) {
        return Caml_option.valFromOption(o);
    }
}
function apply(o, a) {
    if (o !== undefined) {
        return bind(a, (function (b) {
            return Caml_option.some(Curry._1(o, b));
        }));
    }
}
function flatApply(fn, b) {
    return flatten(apply(fn, Caml_option.some(b)));
}
function toBool(opt) {
    return opt !== undefined;
}
function ffmap(fn, r) {
    if (r !== undefined) {
        return Curry._1(fn, Caml_option.valFromOption(r));
    }
}
function toString(opt) {
    if (opt !== undefined) {
        return opt;
    }
    else {
        return "";
    }
}
function toResult(e, error) {
    if (e !== undefined) {
        return {
            TAG: 0,
            _0: Caml_option.valFromOption(e),
            [Symbol.for("name")]: "Ok"
        };
    }
    else {
        return {
            TAG: 1,
            _0: error,
            [Symbol.for("name")]: "Error"
        };
    }
}
function compare(compare$1, f1, f2) {
    if (f1 !== undefined) {
        if (f2 !== undefined) {
            return Curry._2(compare$1, f1, f2) ? f1 : f2;
        }
        else {
            return f1;
        }
    }
    else if (f2 !== undefined) {
        return f2;
    }
    else {
        return;
    }
}
function min(param, param$1) {
    return compare((function (prim0, prim1) {
        return prim0 < prim1;
    }), param, param$1);
}
function max(param, param$1) {
    return compare((function (prim0, prim1) {
        return prim0 > prim1;
    }), param, param$1);
}
var toExt = toExn;
exports.dimap = dimap;
exports.fmap = fmap;
exports.bind = bind;
exports.$$default = $$default;
exports.default = $$default;
exports.__esModule = true;
exports.defaultFn = defaultFn;
exports.isSome = isSome;
exports.isNone = isNone;
exports.toExn = toExn;
exports.some = some;
exports.firstSome = firstSome;
exports.toExt = toExt;
exports.flatten = flatten;
exports.apply = apply;
exports.flatApply = flatApply;
exports.toBool = toBool;
exports.ffmap = ffmap;
exports.toString = toString;
exports.toResult = toResult;
exports.compare = compare;
exports.min = min;
exports.max = max;
//# sourceMappingURL=E_O.bs.js.map