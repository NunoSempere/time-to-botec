'use strict';
var Curry = require("@rescript/std/lib/js/curry.js");
var Belt_Result = require("@rescript/std/lib/js/belt_Result.js");
var Caml_option = require("@rescript/std/lib/js/caml_option.js");
var Caml_exceptions = require("@rescript/std/lib/js/caml_exceptions.js");
var Assertion = Caml_exceptions.create("E_R-QuriSquiggleLang.Assertion");
function result(okF, errF, r) {
    if (r.TAG === 0) {
        return Curry._1(okF, r._0);
    }
    else {
        return Curry._1(errF, r._0);
    }
}
function getError(r) {
    if (r.TAG === 0) {
        return;
    }
    else {
        return Caml_option.some(r._0);
    }
}
function fmap(r, f) {
    if (r.TAG === 0) {
        return {
            TAG: 0,
            _0: Curry._1(f, r._0),
            [Symbol.for("name")]: "Ok"
        };
    }
    else {
        return {
            TAG: 1,
            _0: r._0,
            [Symbol.for("name")]: "Error"
        };
    }
}
function bind(r, f) {
    if (r.TAG === 0) {
        return Curry._1(f, r._0);
    }
    else {
        return {
            TAG: 1,
            _0: r._0,
            [Symbol.for("name")]: "Error"
        };
    }
}
function toExn(x, msg) {
    if (x.TAG === 0) {
        return x._0;
    }
    throw {
        RE_EXN_ID: Assertion,
        _1: msg,
        Error: new Error()
    };
}
function toExnFnString(errorToStringFn, o) {
    if (o.TAG === 0) {
        return o._0;
    }
    throw {
        RE_EXN_ID: Assertion,
        _1: Curry._1(errorToStringFn, o._0),
        Error: new Error()
    };
}
function $$default($$default$1, res) {
    if (res.TAG === 0) {
        return res._0;
    }
    else {
        return $$default$1;
    }
}
function merge(a, b) {
    if (a.TAG === 0) {
        if (b.TAG === 0) {
            return {
                TAG: 0,
                _0: [
                    a._0,
                    b._0
                ],
                [Symbol.for("name")]: "Ok"
            };
        }
        else {
            return {
                TAG: 1,
                _0: b._0,
                [Symbol.for("name")]: "Error"
            };
        }
    }
    else {
        return {
            TAG: 1,
            _0: a._0,
            [Symbol.for("name")]: "Error"
        };
    }
}
function toOption(e) {
    if (e.TAG === 0) {
        return Caml_option.some(e._0);
    }
}
function errorIfCondition(errorCondition, errorMessage, r) {
    if (Curry._1(errorCondition, r)) {
        return {
            TAG: 1,
            _0: errorMessage,
            [Symbol.for("name")]: "Error"
        };
    }
    else {
        return {
            TAG: 0,
            _0: r,
            [Symbol.for("name")]: "Ok"
        };
    }
}
function ap(r, a) {
    if (r.TAG === 0) {
        return {
            TAG: 0,
            _0: Curry._1(r._0, a),
            [Symbol.for("name")]: "Ok"
        };
    }
    else {
        return {
            TAG: 1,
            _0: r._0,
            [Symbol.for("name")]: "Error"
        };
    }
}
function ap$p(r, a) {
    if (r.TAG === 0) {
        return fmap(a, r._0);
    }
    else {
        return {
            TAG: 1,
            _0: r._0,
            [Symbol.for("name")]: "Error"
        };
    }
}
function liftM2(op, xR, yR) {
    return ap$p(fmap(xR, op), yR);
}
function liftJoin2(op, xR, yR) {
    return bind(liftM2(op, xR, yR), (function (x) {
        return x;
    }));
}
function fmap2(r, f) {
    if (r.TAG === 0) {
        return {
            TAG: 0,
            _0: r._0,
            [Symbol.for("name")]: "Ok"
        };
    }
    else {
        return {
            TAG: 1,
            _0: Curry._1(f, r._0),
            [Symbol.for("name")]: "Error"
        };
    }
}
function unify(a, c) {
    if (a.TAG === 0) {
        return a._0;
    }
    else {
        return Curry._1(c, a._0);
    }
}
function errMap(a, map) {
    if (a.TAG === 0) {
        return {
            TAG: 0,
            _0: a._0,
            [Symbol.for("name")]: "Ok"
        };
    }
    else {
        return {
            TAG: 1,
            _0: Curry._1(map, a._0),
            [Symbol.for("name")]: "Error"
        };
    }
}
var isOk = Belt_Result.isOk;
exports.Assertion = Assertion;
exports.result = result;
exports.isOk = isOk;
exports.getError = getError;
exports.fmap = fmap;
exports.bind = bind;
exports.toExn = toExn;
exports.toExnFnString = toExnFnString;
exports.$$default = $$default;
exports.default = $$default;
exports.__esModule = true;
exports.merge = merge;
exports.toOption = toOption;
exports.errorIfCondition = errorIfCondition;
exports.ap = ap;
exports.ap$p = ap$p;
exports.liftM2 = liftM2;
exports.liftJoin2 = liftJoin2;
exports.fmap2 = fmap2;
exports.unify = unify;
exports.errMap = errMap;
//# sourceMappingURL=E_R.bs.js.map