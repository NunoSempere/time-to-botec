export var fmap: any;
export var fmapi: any;
export var forEach: any;
export var forEachI: any;
export function length(prim: any): any;
export function unsafe_get(prim0: any, prim1: any): any;
export var get: any;
export var getBy: any;
export var getIndexBy: any;
export function last(a: any): any;
export function first(__x: any): any;
declare var concat$1: any;
declare var concatMany$1: any;
export var makeBy: any;
export var slice: any;
export var reduce: any;
export var reduceReverse: any;
export var reducei: any;
export var fold_left: any;
export var some: any;
export var every: any;
export function isEmpty(r: any): boolean;
export var stableSortBy: any;
export function getByFmap(a: any, fn: any, boolCondition: any): any;
export var zip: any;
export var unzip: any;
export function zip3(a: any, b: any, c: any): any;
export var to_list: any;
export function uniq(__x: any): any;
export function intersperse(a: any, b: any): any;
export function accumulate(items: any, fn: any): any;
export function tail(__x: any): any;
export function pairwise(t: any, fn: any): any;
export function toRanges(a: any): {
    [x: symbol]: string;
    TAG: number;
    _0: any;
};
export var filter: any;
export function joinWith(prim0: any, prim1: any): any;
export function transpose(xs: any): any[];
export namespace O {
    export { concatSomes };
    export { defaultEmpty };
    export { arrSomeToSomeArr };
    export { firstSome };
    export { firstSomeFn };
    export { firstSomeFnWithDefault };
    export { openIfAllSome };
}
export namespace R {
    export { firstErrorOrOpen };
    export { filterOk };
    export { forM };
    export { foldM };
}
export namespace Floats {
    export { mean };
    export { geomean };
    export { mode };
    export { variance };
    export { stdev };
    export { sum };
    export { product };
    export const random: any;
    export { floatCompare };
    export { sort };
    export { getNonFinite };
    export { getBelowZero };
    export { isSorted };
    export { percentile };
    export { diff };
    export { cumSum };
    export { cumProd };
    export { $$RangeError };
    export { range };
    export { min };
    export { max };
    export { Sorted };
}
declare var Sorted$1: any;
declare function concatSomes(optionals: any): any;
declare function defaultEmpty(o: any): any;
declare function arrSomeToSomeArr(_optionals: any): never[] | undefined;
declare function firstSome(x: any): any;
declare function firstSomeFn(r: any): any;
declare function firstSomeFnWithDefault(r: any, $$default: any): any;
declare function openIfAllSome(optionals: any): any;
declare function firstErrorOrOpen(results: any): any;
declare function filterOk(x: any): any;
declare function forM(x: any, fn: any): any;
declare function foldM(x: any, init: any, fn: any): {
    [x: symbol]: string;
    TAG: number;
    _0: any;
};
declare function mean(prim: any): any;
declare function geomean(prim: any): any;
declare function mode(prim: any): any;
declare function variance(prim: any): any;
declare function stdev(prim: any): any;
declare function sum(prim: any): any;
declare function product(prim: any): any;
declare var floatCompare: any;
declare function sort(t: any): any[];
declare function getNonFinite(t: any): any;
declare function getBelowZero(t: any): any;
declare function isSorted(t: any): any;
declare function percentile(a: any, b: any): any;
declare function diff(t: any): any;
declare function cumSum(t: any): any;
declare function cumProd(t: any): any;
declare var $$RangeError: any;
declare function range(min: any, max: any, n: any): any;
declare function min(prim: any): any;
declare function max(prim: any): any;
declare namespace Sorted {
    export { first as min };
    export { last as max };
    export { range$1 as range };
    export { binarySearchFirstElementGreaterIndex };
    export { concat };
    export { concatMany };
    export { makeIncrementalUp };
    export { makeIncrementalDown };
}
declare function range$1(minOpt: any, maxOpt: any, a: any): number | undefined;
declare function binarySearchFirstElementGreaterIndex(ar: any, el: any): "overMax" | "underMin" | {
    NAME: string;
    VAL: any;
};
declare function concat(t1: any, t2: any): any[];
declare function concatMany(t1: any): any[];
declare function makeIncrementalUp(a: any, b: any): any;
declare function makeIncrementalDown(a: any, b: any): any;
export { concat$1 as concat, concatMany$1 as concatMany, Sorted$1 as Sorted };
