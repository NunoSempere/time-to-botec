export namespace Message {
    export { MessageException };
    export { toString };
    export { fromException };
    export { $$throw };
}
export var SqException: any;
export function fromMessageWithFrameStack(message: any, frameStack: any): {
    message: any;
    frameStack: any;
};
export function fromMessage(message: any): {
    message: any;
    frameStack: number;
};
export function fromParseError(param: any): {
    message: {
        [x: symbol]: string;
        TAG: number;
        _0: any;
    };
    frameStack: any;
};
export function getTopFrame(t: any): any;
export function getFrameStack(t: any): any;
declare function toString$1(t: any): string | undefined;
export function createOtherError(v: any): {
    message: {
        [x: symbol]: string;
        TAG: number;
        _0: any;
    };
    frameStack: number;
};
export function getFrameArray(t: any): any;
export function toStringWithStackTrace(t: any): string;
declare function $$throw$1(t: any): void;
export function throwMessageWithFrameStack(message: any, frameStack: any): void;
declare function fromException$1(exn: any): any;
export function rethrowWithFrameStack(fn: any, frameStack: any): any;
declare var MessageException: any;
declare function toString(err: any): string | undefined;
declare function fromException(exn: any): any;
declare function $$throw(errorValue: any): void;
export { toString$1 as toString, $$throw$1 as $$throw, fromException$1 as fromException };
