export function Dist(T: any): {
    minX: any;
    maxX: any;
    integral: any;
    xTotalRange: (t: any) => number;
    mapY: any;
    mapYResult: any;
    xToY: any;
    downsample: any;
    toPointSetDist: any;
    toDiscreteProbabilityMassFraction: any;
    toContinuous: any;
    toDiscrete: any;
    normalize: any;
    truncate: any;
    mean: any;
    variance: any;
    integralEndY: any;
    updateIntegralCache: any;
    Integral: {
        get: any;
        xToY: any;
        yToX: any;
        sum: any;
    };
};
export namespace Common {
    export { combineIntegralSums };
    export { combineIntegrals };
}
declare function combineIntegralSums(combineFn: any, t1IntegralSumCache: any, t2IntegralSumCache: any): any;
declare function combineIntegrals(combineFn: any, t1IntegralCache: any, t2IntegralCache: any): any;
export {};
