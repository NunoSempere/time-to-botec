import type { Algebraic_t as Operation_Algebraic_t } from '../../../src/rescript/Utility/Operation.gen';
export declare abstract class genericDist {
    protected opaque: any;
}
export declare type asAlgebraicCombinationStrategy = "AsDefault" | "AsSymbolic" | "AsMonteCarlo" | "AsConvolution";
export declare abstract class error {
    protected opaque: any;
}
export declare type DistributionOperation_pointsetXSelection = "Linear" | "ByWeight";
export declare type DistributionOperation_direction = "Pointwise" | {
    tag: "Algebraic";
    value: asAlgebraicCombinationStrategy;
};
export declare type DistributionOperation_toFloat = "Mean" | "Sample" | "IntegralSum" | "Mode" | "Stdev" | "Min" | "Max" | "Variance" | {
    NAME: "Cdf";
    VAL: number;
} | {
    NAME: "Inv";
    VAL: number;
} | {
    NAME: "Pdf";
    VAL: number;
};
export declare type DistributionOperation_toScaleFn = "Multiply" | "Power" | "Logarithm" | {
    NAME: "LogarithmWithThreshold";
    VAL: number;
};
export declare type DistributionOperation_toDist = "Normalize" | "ToPointSet" | "Inspect" | {
    tag: "ToSampleSet";
    value: number;
} | {
    tag: "Scale";
    value: [DistributionOperation_toScaleFn, number];
} | {
    tag: "Truncate";
    value: [(null | undefined | number), (null | undefined | number)];
};
export declare type DistributionOperation_toBool = "IsNormalized";
export declare type DistributionOperation_toString = "ToString" | {
    tag: "ToSparkline";
    value: number;
};
export declare type DistributionOperation_genericDistOrScalar = {
    tag: "Score_Dist";
    value: genericDist;
} | {
    tag: "Score_Scalar";
    value: number;
};
export declare type DistributionOperation_toScore = [
    DistributionOperation_genericDistOrScalar,
    (null | undefined | genericDist)
];
export declare type DistributionOperation_fromFloat = {
    NAME: "ToFloat";
    VAL: DistributionOperation_toFloat;
} | {
    NAME: "ToDist";
    VAL: DistributionOperation_toDist;
} | {
    NAME: "ToDistCombination";
    VAL: [
        DistributionOperation_direction,
        Operation_Algebraic_t,
        {
            NAME: "Dist";
            VAL: genericDist;
        } | {
            NAME: "Float";
            VAL: number;
        }
    ];
} | {
    NAME: "ToString";
    VAL: DistributionOperation_toString;
} | {
    NAME: "ToBool";
    VAL: DistributionOperation_toBool;
};
export declare type DistributionOperation_fromDist = DistributionOperation_fromFloat | {
    NAME: "ToScore";
    VAL: DistributionOperation_toScore;
};
export declare type DistributionOperation_genericFunctionCallInfo = {
    tag: "FromDist";
    value: [DistributionOperation_fromDist, genericDist];
} | {
    tag: "FromFloat";
    value: [DistributionOperation_fromFloat, number];
} | {
    tag: "FromSamples";
    value: number[];
} | {
    tag: "Mixture";
    value: Array<[genericDist, number]>;
};
export declare type Constructors_t = DistributionOperation_genericFunctionCallInfo;
export declare const Constructors_UsingDists_mean: (dist: genericDist) => Constructors_t;
