export namespace $$Error {
    export { fromString };
    export { toString };
    export { resultStringToResultError };
    export { sampleErrorToDistErr };
}
export namespace DistributionOperation {
    export { floatCallToString };
    export { distCallToString };
    export { toString$1 as toString };
}
export namespace Constructors {
    export { UsingDists };
}
declare function fromString(s: any): {
    [x: symbol]: string;
    TAG: number;
    _0: any;
};
declare function toString(err: any): any;
declare function resultStringToResultError(n: any): {
    [x: symbol]: string;
    TAG: number;
    _0: any;
};
declare function sampleErrorToDistErr(err: any): {
    [x: symbol]: string;
    TAG: number;
    _0: any;
};
declare function floatCallToString(floatFunction: any): string | undefined;
declare function distCallToString(distFunction: any): string | undefined;
declare function toString$1(d: any): string | undefined;
declare namespace UsingDists {
    export { mean };
    export { stdev };
    export { variance };
    export { sample };
    export { cdf };
    export { inv };
    export { pdf };
    export { normalize };
    export { isNormalized };
    export { toPointSet };
    export { toSampleSet };
    export { fromSamples };
    export { truncate };
    export { inspect };
    export { LogScore };
    export { scaleMultiply };
    export { scalePower };
    export { scaleLogarithm };
    export { scaleLogarithmWithThreshold };
    export { toString$2 as toString };
    export { toSparkline };
    export { algebraicAdd };
    export { algebraicMultiply };
    export { algebraicDivide };
    export { algebraicSubtract };
    export { algebraicLogarithm };
    export { algebraicPower };
    export { pointwiseAdd };
    export { pointwiseMultiply };
    export { pointwiseDivide };
    export { pointwiseSubtract };
    export { pointwiseLogarithm };
    export { pointwisePower };
}
declare function mean(dist: any): {
    [x: symbol]: string;
    TAG: number;
    _0: {
        NAME: string;
        VAL: string;
    };
    _1: any;
};
declare function stdev(dist: any): {
    [x: symbol]: string;
    TAG: number;
    _0: {
        NAME: string;
        VAL: string;
    };
    _1: any;
};
declare function variance(dist: any): {
    [x: symbol]: string;
    TAG: number;
    _0: {
        NAME: string;
        VAL: string;
    };
    _1: any;
};
declare function sample(dist: any): {
    [x: symbol]: string;
    TAG: number;
    _0: {
        NAME: string;
        VAL: string;
    };
    _1: any;
};
declare function cdf(dist: any, x: any): {
    [x: symbol]: string;
    TAG: number;
    _0: {
        NAME: string;
        VAL: {
            NAME: string;
            VAL: any;
        };
    };
    _1: any;
};
declare function inv(dist: any, x: any): {
    [x: symbol]: string;
    TAG: number;
    _0: {
        NAME: string;
        VAL: {
            NAME: string;
            VAL: any;
        };
    };
    _1: any;
};
declare function pdf(dist: any, x: any): {
    [x: symbol]: string;
    TAG: number;
    _0: {
        NAME: string;
        VAL: {
            NAME: string;
            VAL: any;
        };
    };
    _1: any;
};
declare function normalize(dist: any): {
    [x: symbol]: string;
    TAG: number;
    _0: {
        NAME: string;
        VAL: number;
    };
    _1: any;
};
declare function isNormalized(dist: any): {
    [x: symbol]: string;
    TAG: number;
    _0: {
        NAME: string;
        VAL: number;
    };
    _1: any;
};
declare function toPointSet(dist: any): {
    [x: symbol]: string;
    TAG: number;
    _0: {
        NAME: string;
        VAL: number;
    };
    _1: any;
};
declare function toSampleSet(dist: any, r: any): {
    [x: symbol]: string;
    TAG: number;
    _0: {
        NAME: string;
        VAL: {
            [x: symbol]: string;
            TAG: number;
            _0: any;
        };
    };
    _1: any;
};
declare function fromSamples(xs: any): {
    [x: symbol]: string;
    TAG: number;
    _0: any;
};
declare function truncate(dist: any, left: any, right: any): {
    [x: symbol]: string;
    TAG: number;
    _0: {
        NAME: string;
        VAL: {
            [x: symbol]: string;
            TAG: number;
            _0: any;
            _1: any;
        };
    };
    _1: any;
};
declare function inspect(dist: any): {
    [x: symbol]: string;
    TAG: number;
    _0: {
        NAME: string;
        VAL: number;
    };
    _1: any;
};
declare namespace LogScore {
    export { distEstimateDistAnswer };
    export { distEstimateDistAnswerWithPrior };
    export { distEstimateScalarAnswer };
    export { distEstimateScalarAnswerWithPrior };
}
declare function scaleMultiply(dist: any, n: any): {
    [x: symbol]: string;
    TAG: number;
    _0: {
        NAME: string;
        VAL: {
            [x: symbol]: string;
            TAG: number;
            _0: string;
            _1: any;
        };
    };
    _1: any;
};
declare function scalePower(dist: any, n: any): {
    [x: symbol]: string;
    TAG: number;
    _0: {
        NAME: string;
        VAL: {
            [x: symbol]: string;
            TAG: number;
            _0: string;
            _1: any;
        };
    };
    _1: any;
};
declare function scaleLogarithm(dist: any, n: any): {
    [x: symbol]: string;
    TAG: number;
    _0: {
        NAME: string;
        VAL: {
            [x: symbol]: string;
            TAG: number;
            _0: string;
            _1: any;
        };
    };
    _1: any;
};
declare function scaleLogarithmWithThreshold(dist: any, n: any, eps: any): {
    [x: symbol]: string;
    TAG: number;
    _0: {
        NAME: string;
        VAL: {
            [x: symbol]: string;
            TAG: number;
            _0: {
                NAME: string;
                VAL: any;
            };
            _1: any;
        };
    };
    _1: any;
};
declare function toString$2(dist: any): {
    [x: symbol]: string;
    TAG: number;
    _0: {
        NAME: string;
        VAL: number;
    };
    _1: any;
};
declare function toSparkline(dist: any, n: any): {
    [x: symbol]: string;
    TAG: number;
    _0: {
        NAME: string;
        VAL: {
            [x: symbol]: string;
            _0: any;
        };
    };
    _1: any;
};
declare function algebraicAdd(dist1: any, dist2: any): {
    [x: symbol]: string;
    TAG: number;
    _0: {
        NAME: string;
        VAL: (string | {
            [x: symbol]: string;
            _0: number;
            NAME?: undefined;
            VAL?: undefined;
        } | {
            NAME: string;
            VAL: any;
            _0?: undefined;
        })[];
    };
    _1: any;
};
declare function algebraicMultiply(dist1: any, dist2: any): {
    [x: symbol]: string;
    TAG: number;
    _0: {
        NAME: string;
        VAL: (string | {
            [x: symbol]: string;
            _0: number;
            NAME?: undefined;
            VAL?: undefined;
        } | {
            NAME: string;
            VAL: any;
            _0?: undefined;
        })[];
    };
    _1: any;
};
declare function algebraicDivide(dist1: any, dist2: any): {
    [x: symbol]: string;
    TAG: number;
    _0: {
        NAME: string;
        VAL: (string | {
            [x: symbol]: string;
            _0: number;
            NAME?: undefined;
            VAL?: undefined;
        } | {
            NAME: string;
            VAL: any;
            _0?: undefined;
        })[];
    };
    _1: any;
};
declare function algebraicSubtract(dist1: any, dist2: any): {
    [x: symbol]: string;
    TAG: number;
    _0: {
        NAME: string;
        VAL: (string | {
            [x: symbol]: string;
            _0: number;
            NAME?: undefined;
            VAL?: undefined;
        } | {
            NAME: string;
            VAL: any;
            _0?: undefined;
        })[];
    };
    _1: any;
};
declare function algebraicLogarithm(dist1: any, dist2: any): {
    [x: symbol]: string;
    TAG: number;
    _0: {
        NAME: string;
        VAL: (string | {
            [x: symbol]: string;
            _0: number;
            NAME?: undefined;
            VAL?: undefined;
        } | {
            NAME: string;
            VAL: any;
            _0?: undefined;
        })[];
    };
    _1: any;
};
declare function algebraicPower(dist1: any, dist2: any): {
    [x: symbol]: string;
    TAG: number;
    _0: {
        NAME: string;
        VAL: (string | {
            [x: symbol]: string;
            _0: number;
            NAME?: undefined;
            VAL?: undefined;
        } | {
            NAME: string;
            VAL: any;
            _0?: undefined;
        })[];
    };
    _1: any;
};
declare function pointwiseAdd(dist1: any, dist2: any): {
    [x: symbol]: string;
    TAG: number;
    _0: {
        NAME: string;
        VAL: (string | number | {
            NAME: string;
            VAL: any;
        })[];
    };
    _1: any;
};
declare function pointwiseMultiply(dist1: any, dist2: any): {
    [x: symbol]: string;
    TAG: number;
    _0: {
        NAME: string;
        VAL: (string | number | {
            NAME: string;
            VAL: any;
        })[];
    };
    _1: any;
};
declare function pointwiseDivide(dist1: any, dist2: any): {
    [x: symbol]: string;
    TAG: number;
    _0: {
        NAME: string;
        VAL: (string | number | {
            NAME: string;
            VAL: any;
        })[];
    };
    _1: any;
};
declare function pointwiseSubtract(dist1: any, dist2: any): {
    [x: symbol]: string;
    TAG: number;
    _0: {
        NAME: string;
        VAL: (string | number | {
            NAME: string;
            VAL: any;
        })[];
    };
    _1: any;
};
declare function pointwiseLogarithm(dist1: any, dist2: any): {
    [x: symbol]: string;
    TAG: number;
    _0: {
        NAME: string;
        VAL: (string | number | {
            NAME: string;
            VAL: any;
        })[];
    };
    _1: any;
};
declare function pointwisePower(dist1: any, dist2: any): {
    [x: symbol]: string;
    TAG: number;
    _0: {
        NAME: string;
        VAL: (string | number | {
            NAME: string;
            VAL: any;
        })[];
    };
    _1: any;
};
declare function distEstimateDistAnswer(estimate: any, answer: any): {
    [x: symbol]: string;
    TAG: number;
    _0: {
        NAME: string;
        VAL: {
            [x: symbol]: string;
            _0: {
                [x: symbol]: string;
                TAG: number;
                _0: any;
            };
            _1: undefined;
        };
    };
    _1: any;
};
declare function distEstimateDistAnswerWithPrior(estimate: any, answer: any, prior: any): {
    [x: symbol]: string;
    TAG: number;
    _0: {
        NAME: string;
        VAL: {
            [x: symbol]: string;
            _0: {
                [x: symbol]: string;
                TAG: number;
                _0: any;
            };
            _1: any;
        };
    };
    _1: any;
};
declare function distEstimateScalarAnswer(estimate: any, answer: any): {
    [x: symbol]: string;
    TAG: number;
    _0: {
        NAME: string;
        VAL: {
            [x: symbol]: string;
            _0: {
                [x: symbol]: string;
                TAG: number;
                _0: any;
            };
            _1: undefined;
        };
    };
    _1: any;
};
declare function distEstimateScalarAnswerWithPrior(estimate: any, answer: any, prior: any): {
    [x: symbol]: string;
    TAG: number;
    _0: {
        NAME: string;
        VAL: {
            [x: symbol]: string;
            _0: {
                [x: symbol]: string;
                TAG: number;
                _0: any;
            };
            _1: any;
        };
    };
    _1: any;
};
export {};
