export function mapToAll(param: any, t: any): any;
export function fmap(t: any, param: any): {
    [x: symbol]: string;
    TAG: number;
    _0: any;
} | undefined;
export function fmapResult(t: any, param: any): {
    [x: symbol]: string;
    TAG: number;
    _0: any;
} | undefined;
export function toMixed(param: any): any;
export function combineAlgebraically(op: any, t1: any, t2: any): any;
export function combinePointwise(combinerOpt: any, integralSumCachesFnOpt: any, integralCachesFnOpt: any, fn: any, t1: any, t2: any): {
    [x: symbol]: string;
    TAG: number;
    _0: any;
};
export var T: {
    minX: any;
    maxX: any;
    integral: any;
    xTotalRange: (t: any) => number;
    mapY: any;
    mapYResult: any;
    xToY: any;
    downsample: any;
    toPointSetDist: any;
    toDiscreteProbabilityMassFraction: any;
    toContinuous: any;
    toDiscrete: any;
    normalize: any;
    truncate: any;
    mean: any;
    variance: any;
    integralEndY: any;
    updateIntegralCache: any;
    Integral: {
        get: any;
        xToY: any;
        yToX: any;
        sum: any;
    };
};
export function logScore(args: any): {
    [x: symbol]: string;
    TAG: number;
    _0: any;
};
export function pdf(f: any, t: any): any;
export var inv: any;
export var cdf: any;
export function doN(n: any, fn: any): any;
export function sample(t: any): any;
export function isFloat(t: any): boolean | undefined;
export function sampleNRendered(n: any, dist: any): any;
export function operate(distToFloatOp: any, s: any): any;
export function toSparkline(t: any, bucketCount: any): {
    [x: symbol]: string;
    TAG: number;
    _0: any;
};
export function makeDiscrete(d: any): {
    [x: symbol]: string;
    TAG: number;
    _0: any;
};
export function makeContinuous(d: any): {
    [x: symbol]: string;
    TAG: number;
    _0: any;
};
export function makeMixed(d: any): {
    [x: symbol]: string;
    TAG: number;
    _0: any;
};
