export function logFn(prim: any): number;
export function minusScaledLogOfQuotient(esti: any, answ: any): {
    [x: symbol]: string;
    TAG: number;
    _0: number;
};
export namespace WithDistAnswer {
    export { integrand };
    export { sum };
    export { sumWithPrior };
}
export namespace WithScalarAnswer {
    export { sum$1 as sum };
    export { score };
    export { scoreWithPrior };
}
export function twoGenericDistsToTwoPointSetDists(toPointSetFn: any, estimate: any, answer: any): {
    [x: symbol]: string;
    TAG: number;
    _0: any;
};
export function logScore(args: any, combineFn: any, integrateFn: any, toMixedFn: any): {
    [x: symbol]: string;
    TAG: number;
    _0: any;
};
declare function integrand(estimateElement: any, answerElement: any): {
    [x: symbol]: string;
    TAG: number;
    _0: any;
};
declare function sum(estimate: any, answer: any, combineFn: any, integrateFn: any, toMixedFn: any): {
    [x: symbol]: string;
    TAG: number;
    _0: any;
};
declare function sumWithPrior(estimate: any, answer: any, prior: any, combineFn: any, integrateFn: any, toMixedFn: any): {
    [x: symbol]: string;
    TAG: number;
    _0: any;
};
declare function sum$1(mp: any): any;
declare function score(estimate: any, answer: any): {
    [x: symbol]: string;
    TAG: number;
    _0: any;
};
declare function scoreWithPrior(estimate: any, answer: any, prior: any): {
    [x: symbol]: string;
    TAG: number;
    _0: any;
};
export {};
