export var normal95confidencePoint: number;
export namespace Normal {
    export { make };
    export { pdf };
    export { cdf };
    export { from90PercentCI };
    export { inv };
    export { sample };
    export { mean };
    export { toString };
    export { add };
    export { subtract };
    export { pointwiseProduct };
    export { operate };
    export { operateFloatFirst };
    export { operateFloatSecond };
}
export namespace Exponential {
    export { make$1 as make };
    export { pdf$1 as pdf };
    export { cdf$1 as cdf };
    export { inv$1 as inv };
    export { sample$1 as sample };
    export { mean$1 as mean };
    export { toString$1 as toString };
}
export namespace Cauchy {
    export { make$2 as make };
    export { pdf$2 as pdf };
    export { cdf$2 as cdf };
    export { inv$2 as inv };
    export { sample$2 as sample };
    export { mean$2 as mean };
    export { toString$2 as toString };
}
export namespace Triangular {
    export { make$3 as make };
    export { pdf$3 as pdf };
    export { cdf$3 as cdf };
    export { inv$3 as inv };
    export { sample$3 as sample };
    export { mean$3 as mean };
    export { toString$3 as toString };
}
export namespace Beta {
    export { make$4 as make };
    export { pdf$4 as pdf };
    export { cdf$4 as cdf };
    export { inv$4 as inv };
    export { sample$4 as sample };
    export { mean$4 as mean };
    export { toString$4 as toString };
    export { fromMeanAndSampleSize };
    export { fromMeanAndStdev };
}
export namespace Lognormal {
    export { make$5 as make };
    export { pdf$5 as pdf };
    export { cdf$5 as cdf };
    export { inv$5 as inv };
    export { mean$5 as mean };
    export { sample$5 as sample };
    export { toString$5 as toString };
    export { from90PercentCI$1 as from90PercentCI };
    export { fromMeanAndStdev$1 as fromMeanAndStdev };
    export { multiply };
    export { divide };
    export { operate$1 as operate };
    export { operateFloatFirst$1 as operateFloatFirst };
    export { operateFloatSecond$1 as operateFloatSecond };
}
export namespace Uniform {
    export { make$6 as make };
    export { pdf$6 as pdf };
    export { cdf$6 as cdf };
    export { inv$6 as inv };
    export { sample$6 as sample };
    export { mean$6 as mean };
    export { toString$6 as toString };
    export { truncate };
}
export namespace Logistic {
    export { make$7 as make };
    export { pdf$7 as pdf };
    export { cdf$7 as cdf };
    export { inv$7 as inv };
    export { sample$7 as sample };
    export { mean$7 as mean };
    export { toString$7 as toString };
}
export namespace Bernoulli {
    export { make$8 as make };
    export { pmf };
    export { pdf$8 as pdf };
    export { cdf$8 as cdf };
    export { inv$8 as inv };
    export { mean$8 as mean };
    export { min };
    export { max };
    export { sample$8 as sample };
    export { toString$8 as toString };
    export { toPointSetDist };
}
export namespace Gamma {
    export { make$9 as make };
    export { pdf$9 as pdf };
    export { cdf$9 as cdf };
    export { inv$9 as inv };
    export { sample$9 as sample };
    export { mean$9 as mean };
    export { toString$9 as toString };
}
export namespace Float {
    export { make$10 as make };
    export { makeSafe };
    export { pdf$10 as pdf };
    export { cdf$10 as cdf };
    export { inv$10 as inv };
    export { mean$10 as mean };
    export { sample$10 as sample };
    export { toString$10 as toString };
    export { toPointSetDist$1 as toPointSetDist };
}
export namespace From90thPercentile {
    export { make$11 as make };
}
export namespace T {
    export const minCdfValue: number;
    export const maxCdfValue: number;
    export { pdf$11 as pdf };
    export { cdf$11 as cdf };
    export { inv$11 as inv };
    export { sample$11 as sample };
    export { doN };
    export { sampleN };
    export { toString$11 as toString };
    export { min$1 as min };
    export { max$1 as max };
    export { mean$11 as mean };
    export { operate$2 as operate };
    export { interpolateXs };
    export { tryAnalyticalSimplification };
    export { toPointSetDist$2 as toPointSetDist };
}
declare function make(mean: any, stdev: any): {
    [x: symbol]: string;
    TAG: number;
    _0: {
        NAME: string;
        VAL: {
            mean: any;
            stdev: any;
        };
    };
} | {
    [x: symbol]: string;
    TAG: number;
    _0: string;
};
declare function pdf(x: any, t: any): any;
declare function cdf(x: any, t: any): any;
declare function from90PercentCI(low: any, high: any): {
    NAME: string;
    VAL: {
        mean: any;
        stdev: number;
    };
};
declare function inv(p: any, t: any): any;
declare function sample(t: any): any;
declare function mean(t: any): {
    [x: symbol]: string;
    TAG: number;
    _0: any;
};
declare function toString(param: any): string;
declare function add(n1: any, n2: any): {
    NAME: string;
    VAL: {
        mean: any;
        stdev: number;
    };
};
declare function subtract(n1: any, n2: any): {
    NAME: string;
    VAL: {
        mean: number;
        stdev: number;
    };
};
declare function pointwiseProduct(n1: any, n2: any): {
    NAME: string;
    VAL: {
        mean: number;
        stdev: number;
    };
};
declare function operate(operation: any, n1: any, n2: any): {
    NAME: string;
    VAL: {
        mean: any;
        stdev: number;
    };
} | undefined;
declare function operateFloatFirst(operation: any, n1: any, n2: any): {
    NAME: string;
    VAL: {
        mean: any;
        stdev: any;
    };
} | undefined;
declare function operateFloatSecond(operation: any, n1: any, n2: any): {
    NAME: string;
    VAL: {
        mean: any;
        stdev: any;
    };
} | undefined;
declare function make$1(rate: any): {
    [x: symbol]: string;
    TAG: number;
    _0: {
        NAME: string;
        VAL: {
            rate: any;
        };
    };
} | {
    [x: symbol]: string;
    TAG: number;
    _0: string;
};
declare function pdf$1(x: any, t: any): any;
declare function cdf$1(x: any, t: any): any;
declare function inv$1(p: any, t: any): any;
declare function sample$1(t: any): any;
declare function mean$1(t: any): {
    [x: symbol]: string;
    TAG: number;
    _0: any;
};
declare function toString$1(param: any): string;
declare function make$2(local: any, scale: any): {
    [x: symbol]: string;
    TAG: number;
    _0: {
        NAME: string;
        VAL: {
            local: any;
            scale: any;
        };
    };
} | {
    [x: symbol]: string;
    TAG: number;
    _0: string;
};
declare function pdf$2(x: any, t: any): any;
declare function cdf$2(x: any, t: any): any;
declare function inv$2(p: any, t: any): any;
declare function sample$2(t: any): any;
declare function mean$2(param: any): {
    [x: symbol]: string;
    TAG: number;
    _0: string;
};
declare function toString$2(param: any): string;
declare function make$3(low: any, medium: any, high: any): {
    [x: symbol]: string;
    TAG: number;
    _0: {
        NAME: string;
        VAL: {
            low: any;
            medium: any;
            high: any;
        };
    };
} | {
    [x: symbol]: string;
    TAG: number;
    _0: string;
};
declare function pdf$3(x: any, t: any): any;
declare function cdf$3(x: any, t: any): any;
declare function inv$3(p: any, t: any): any;
declare function sample$3(t: any): any;
declare function mean$3(t: any): {
    [x: symbol]: string;
    TAG: number;
    _0: any;
};
declare function toString$3(param: any): string;
declare function make$4(alpha: any, beta: any): {
    [x: symbol]: string;
    TAG: number;
    _0: {
        NAME: string;
        VAL: {
            alpha: any;
            beta: any;
        };
    };
} | {
    [x: symbol]: string;
    TAG: number;
    _0: string;
};
declare function pdf$4(x: any, t: any): any;
declare function cdf$4(x: any, t: any): any;
declare function inv$4(p: any, t: any): any;
declare function sample$4(t: any): any;
declare function mean$4(t: any): {
    [x: symbol]: string;
    TAG: number;
    _0: any;
};
declare function toString$4(param: any): string;
declare function fromMeanAndSampleSize(mean: any, sampleSize: any): {
    [x: symbol]: string;
    TAG: number;
    _0: {
        NAME: string;
        VAL: {
            alpha: any;
            beta: any;
        };
    };
} | {
    [x: symbol]: string;
    TAG: number;
    _0: string;
};
declare function fromMeanAndStdev(mean: any, stdev: any): {
    [x: symbol]: string;
    TAG: number;
    _0: {
        NAME: string;
        VAL: {
            alpha: any;
            beta: any;
        };
    };
} | {
    [x: symbol]: string;
    TAG: number;
    _0: string;
};
declare function make$5(mu: any, sigma: any): {
    [x: symbol]: string;
    TAG: number;
    _0: {
        NAME: string;
        VAL: {
            mu: any;
            sigma: any;
        };
    };
} | {
    [x: symbol]: string;
    TAG: number;
    _0: string;
};
declare function pdf$5(x: any, t: any): any;
declare function cdf$5(x: any, t: any): any;
declare function inv$5(p: any, t: any): any;
declare function mean$5(t: any): {
    [x: symbol]: string;
    TAG: number;
    _0: any;
};
declare function sample$5(t: any): any;
declare function toString$5(param: any): string;
declare function from90PercentCI$1(low: any, high: any): {
    NAME: string;
    VAL: {
        mu: any;
        sigma: number;
    };
};
declare function fromMeanAndStdev$1(mean: any, stdev: any): {
    [x: symbol]: string;
    TAG: number;
    _0: string;
} | {
    [x: symbol]: string;
    TAG: number;
    _0: {
        NAME: string;
        VAL: {
            mu: number;
            sigma: number;
        };
    };
};
declare function multiply(l1: any, l2: any): {
    NAME: string;
    VAL: {
        mu: any;
        sigma: number;
    };
};
declare function divide(l1: any, l2: any): {
    NAME: string;
    VAL: {
        mu: number;
        sigma: number;
    };
};
declare function operate$1(operation: any, n1: any, n2: any): {
    NAME: string;
    VAL: {
        mu: any;
        sigma: number;
    };
} | undefined;
declare function operateFloatFirst$1(operation: any, n1: any, n2: any): {
    NAME: string;
    VAL: {
        mu: any;
        sigma: any;
    };
} | undefined;
declare function operateFloatSecond$1(operation: any, n1: any, n2: any): {
    NAME: string;
    VAL: {
        mu: any;
        sigma: any;
    };
} | undefined;
declare function make$6(low: any, high: any): {
    [x: symbol]: string;
    TAG: number;
    _0: {
        NAME: string;
        VAL: {
            low: any;
            high: any;
        };
    };
} | {
    [x: symbol]: string;
    TAG: number;
    _0: string;
};
declare function pdf$6(x: any, t: any): any;
declare function cdf$6(x: any, t: any): any;
declare function inv$6(p: any, t: any): any;
declare function sample$6(t: any): any;
declare function mean$6(t: any): {
    [x: symbol]: string;
    TAG: number;
    _0: any;
};
declare function toString$6(param: any): string;
declare function truncate(low: any, high: any, t: any): {
    low: any;
    high: any;
};
declare function make$7($$location: any, scale: any): {
    [x: symbol]: string;
    TAG: number;
    _0: {
        NAME: string;
        VAL: {
            location: any;
            scale: any;
        };
    };
} | {
    [x: symbol]: string;
    TAG: number;
    _0: string;
};
declare function pdf$7(x: any, t: any): number;
declare function cdf$7(x: any, t: any): number;
declare function inv$7(p: any, t: any): number;
declare function sample$7(t: any): number;
declare function mean$7(t: any): {
    [x: symbol]: string;
    TAG: number;
    _0: number;
};
declare function toString$7(param: any): string;
declare function make$8(p: any): {
    [x: symbol]: string;
    TAG: number;
    _0: {
        NAME: string;
        VAL: {
            p: any;
        };
    };
} | {
    [x: symbol]: string;
    TAG: number;
    _0: string;
};
declare function pmf(x: any, t: any): number;
declare function pdf$8(x: any, t: any): number;
declare function cdf$8(x: any, t: any): number;
declare function inv$8(p: any, t: any): number;
declare function mean$8(t: any): {
    [x: symbol]: string;
    TAG: number;
    _0: number;
};
declare function min(t: any): 0 | 1;
declare function max(t: any): 0 | 1;
declare function sample$8(t: any): number;
declare function toString$8(param: any): string;
declare function toPointSetDist(param: any): {
    [x: symbol]: string;
    TAG: number;
    _0: {
        xyShape: any;
        integralSumCache: any;
        integralCache: any;
    };
};
declare function make$9(shape: any, scale: any): {
    [x: symbol]: string;
    TAG: number;
    _0: {
        NAME: string;
        VAL: {
            shape: any;
            scale: any;
        };
    };
} | {
    [x: symbol]: string;
    TAG: number;
    _0: string;
};
declare function pdf$9(x: any, t: any): any;
declare function cdf$9(x: any, t: any): any;
declare function inv$9(p: any, t: any): any;
declare function sample$9(t: any): any;
declare function mean$9(t: any): {
    [x: symbol]: string;
    TAG: number;
    _0: any;
};
declare function toString$9(param: any): string;
declare function make$10(t: any): {
    NAME: string;
    VAL: any;
};
declare function makeSafe(t: any): {
    [x: symbol]: string;
    TAG: number;
    _0: {
        NAME: string;
        VAL: any;
    };
} | {
    [x: symbol]: string;
    TAG: number;
    _0: string;
};
declare function pdf$10(x: any, t: any): 0 | 1;
declare function cdf$10(x: any, t: any): 0 | 1;
declare function inv$10(p: any, t: any): 0 | 1;
declare function mean$10(t: any): {
    [x: symbol]: string;
    TAG: number;
    _0: any;
};
declare function sample$10(t: any): any;
declare function toString$10(t: any): string;
declare function toPointSetDist$1(t: any): {
    [x: symbol]: string;
    TAG: number;
    _0: {
        xyShape: any;
        integralSumCache: any;
        integralCache: any;
    };
};
declare function make$11(low: any, high: any): {
    [x: symbol]: string;
    TAG: number;
    _0: {
        NAME: string;
        VAL: {
            mean: any;
            stdev: number;
        };
    };
} | {
    [x: symbol]: string;
    TAG: number;
    _0: {
        NAME: string;
        VAL: {
            mu: any;
            sigma: number;
        };
    };
} | {
    [x: symbol]: string;
    TAG: number;
    _0: string;
};
declare function pdf$11(x: any, dist: any): any;
declare function cdf$11(x: any, dist: any): any;
declare function inv$11(x: any, dist: any): any;
declare function sample$11(x: any): any;
declare function doN(n: any, fn: any): any;
declare function sampleN(n: any, dist: any): any;
declare function toString$11(x: any): string;
declare function min$1(x: any): any;
declare function max$1(x: any): any;
declare function mean$11(x: any): {
    [x: symbol]: string;
    TAG: number;
    _0: any;
};
declare function operate$2(distToFloatOp: any, s: any): {
    [x: symbol]: string;
    TAG: number;
    _0: any;
};
declare function interpolateXs(xSelectionOpt: any, dist: any, n: any): any;
declare function tryAnalyticalSimplification(d1: any, d2: any, op: any): any;
declare function toPointSetDist$2(xSelectionOpt: any, sampleCount: any, d: any): {
    [x: symbol]: string;
    TAG: number;
    _0: {
        xyShape: any;
        integralSumCache: any;
        integralCache: any;
    };
};
export {};
