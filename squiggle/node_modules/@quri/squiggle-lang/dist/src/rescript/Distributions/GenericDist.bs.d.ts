export function sampleN(t: any, n: any): any;
export function sample(t: any): any;
export function toSampleSetDist(t: any, n: any): {
    [x: symbol]: string;
    TAG: number;
    _0: any;
};
export function fromFloat(f: any): {
    [x: symbol]: string;
    TAG: number;
    _0: {
        NAME: string;
        VAL: any;
    };
};
export function toString(t: any): string | undefined;
export function normalize(t: any): any;
export function isNormalized(t: any): boolean;
export function toFloatOperation(t: any, toPointSetFn: any, distToFloatOperation: any): {
    [x: symbol]: string;
    TAG: number;
    _0: any;
};
export namespace Score {
    export { logScore };
}
export function toPointSet(t: any, xyPointLength: any, sampleCount: any, xSelectionOpt: any, param: any): {
    [x: symbol]: string;
    TAG: number;
    _0: any;
} | undefined;
export function toSparkline(t: any, sampleCount: any, bucketCountOpt: any, param: any): any;
export function truncate(t: any, toPointSetFn: any, leftCutoffOpt: any, rightCutoffOpt: any, param: any): {
    [x: symbol]: string;
    TAG: number;
    _0: any;
};
export function algebraicCombination(strategy: any, t1: any, toPointSetFn: any, toSampleSetFn: any, arithmeticOperation: any, t2: any): {
    [x: symbol]: string;
    TAG: number;
    _0: any;
} | undefined;
export function pointwiseCombination(t1: any, toPointSetFn: any, algebraicCombination: any, t2: any): any;
export function pointwiseCombinationFloat(t: any, toPointSetFn: any, algebraicCombination: any, f: any): {
    [x: symbol]: string;
    TAG: number;
    _0: any;
};
export function mixture(values: any, scaleMultiplyFn: any, pointwiseAddFn: any, env: any): any;
export function isSymbolic(t: any): boolean | undefined;
export function isPointSet(t: any): boolean | undefined;
declare function logScore(estimate: any, answer: any, prior: any, env: any): any;
export {};
