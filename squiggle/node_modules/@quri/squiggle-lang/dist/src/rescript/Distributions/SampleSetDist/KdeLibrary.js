"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.kde = void 0;
const filter_1 = __importDefault(require("lodash/filter"));
const kde = (samples, outputLength, xWidth, weight) => {
    samples = (0, filter_1.default)(samples, isFinite);
    const len = samples.length;
    if (len === 0)
        return { usedWidth: xWidth, xs: [], ys: [] };
    const smin = samples[0];
    const srange = samples[len - 1] - smin;
    const wantedWidth = ((outputLength - 1) * xWidth) / (srange + 2 * xWidth);
    const width = Math.max(1, Math.floor(wantedWidth));
    const stepsInside = outputLength - 1 - 2 * width;
    const dx = srange / stepsInside;
    xWidth = width * dx;
    const min = smin - xWidth;
    const range = srange + 2 * xWidth;
    const ysum = Array(outputLength + 2 * width).fill(0);
    const dxInv = 1 / dx;
    samples.forEach((x) => {
        const off = x - min;
        const index = Math.floor(off * dxInv);
        const leftWeight = off - index * dx;
        const rightWeight = dx - leftWeight;
        ysum[width + index + 1] += rightWeight;
        ysum[width + index + 2] += leftWeight;
    });
    const normalizer = weight / (xWidth * xWidth);
    const xs = Array(outputLength)
        .fill(0)
        .map((_, i) => min + i * dx);
    let dy = 0;
    let y = 0;
    const ys = xs.map((_, i) => {
        const ddy = ysum[i] - 2 * ysum[i + width] + ysum[i + 2 * width];
        dy += ddy;
        y += dy;
        return normalizer * y;
    });
    return { usedWidth: xWidth, xs, ys };
};
exports.kde = kde;
//# sourceMappingURL=KdeLibrary.js.map