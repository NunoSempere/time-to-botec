export function make(integralSumCacheOpt: any, integralCacheOpt: any, continuous: any, discrete: any): {
    continuous: any;
    discrete: any;
    integralSumCache: any;
    integralCache: any;
};
export function totalLength(t: any): number;
export function scaleBy(t: any, scale: any): {
    continuous: any;
    discrete: any;
    integralSumCache: any;
    integralCache: any;
};
export function toContinuous(param: any): any;
export function toDiscrete(param: any): any;
export function updateIntegralCache(t: any, integralCache: any): {
    continuous: any;
    discrete: any;
    integralSumCache: any;
    integralCache: any;
};
export var T: {
    minX: any;
    maxX: any;
    integral: any;
    xTotalRange: (t: any) => number;
    mapY: any;
    mapYResult: any;
    xToY: any;
    downsample: any;
    toPointSetDist: any;
    toDiscreteProbabilityMassFraction: any;
    toContinuous: any;
    toDiscrete: any;
    normalize: any;
    truncate: any;
    mean: any;
    variance: any;
    integralEndY: any;
    updateIntegralCache: any;
    Integral: {
        get: any;
        xToY: any;
        yToX: any;
        sum: any;
    };
};
export function combineAlgebraically(op: any, t1: any, t2: any): {
    continuous: any;
    discrete: {
        xyShape: any;
        integralSumCache: any;
        integralCache: any;
    };
    integralSumCache: any;
    integralCache: undefined;
};
export function combinePointwise(integralSumCachesFnOpt: any, integralCachesFnOpt: any, fn: any, t1: any, t2: any): {
    [x: symbol]: string;
    TAG: number;
    _0: any;
};
