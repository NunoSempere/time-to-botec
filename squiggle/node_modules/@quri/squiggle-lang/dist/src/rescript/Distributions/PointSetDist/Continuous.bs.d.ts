export namespace Analysis {
    export { integrate };
    export { getMeanOfSquares };
}
export function getShape(t: any): any;
export function interpolation(t: any): any;
export function make(interpolationOpt: any, integralSumCacheOpt: any, integralCacheOpt: any, xyShape: any): {
    xyShape: any;
    interpolation: any;
    integralSumCache: any;
    integralCache: any;
};
export function shapeMap(param: any, fn: any): {
    xyShape: any;
    interpolation: any;
    integralSumCache: any;
    integralCache: any;
};
export function lastY(t: any): any;
export function oShapeMap(fn: any, param: any): any;
export namespace emptyIntegral {
    export { emptyIntegral_xyShape as xyShape };
    export const interpolation: string;
    export { emptyIntegral_integralSumCache as integralSumCache };
    export const integralCache: undefined;
}
export namespace empty {
    export { empty_xyShape as xyShape };
    const interpolation_1: string;
    export { interpolation_1 as interpolation };
    export { empty_integralSumCache as integralSumCache };
    export { empty_integralCache as integralCache };
}
export function stepwiseToLinear(t: any): {
    xyShape: any;
    interpolation: any;
    integralSumCache: any;
    integralCache: any;
};
export function combinePointwise(combinerOpt: any, integralSumCachesFnOpt: any, distributionTypeOpt: any, fn: any, t1: any, t2: any): {
    [x: symbol]: string;
    TAG: number;
    _0: any;
};
export function toLinear(t: any): any;
export function shapeFn(t: any, fn: any): any;
export function updateIntegralSumCache(t: any, integralSumCache: any): {
    xyShape: any;
    interpolation: any;
    integralSumCache: any;
    integralCache: any;
};
export function updateIntegralCache(t: any, integralCache: any): {
    xyShape: any;
    interpolation: any;
    integralSumCache: any;
    integralCache: any;
};
export function sum(integralSumCachesFnOpt: any, continuousShapes: any): any;
export function reduce(continuousShapes: any, integralSumCachesFnOpt: any, fn: any): {
    [x: symbol]: string;
    TAG: number;
    _0: any;
};
export function mapYResult(integralSumCacheFnOpt: any, integralCacheFnOpt: any, t: any, fn: any): {
    [x: symbol]: string;
    TAG: number;
    _0: any;
};
export function mapY(integralSumCacheFnOpt: any, integralCacheFnOpt: any, t: any, fn: any): {
    xyShape: any;
    interpolation: any;
    integralSumCache: any;
    integralCache: any;
};
export function scaleBy(t: any, scale: any): {
    xyShape: any;
    interpolation: any;
    integralSumCache: any;
    integralCache: any;
};
export var T: {
    minX: any;
    maxX: any;
    integral: any;
    xTotalRange: (t: any) => number;
    mapY: any;
    mapYResult: any;
    xToY: any;
    downsample: any;
    toPointSetDist: any;
    toDiscreteProbabilityMassFraction: any;
    toContinuous: any;
    toDiscrete: any;
    normalize: any;
    truncate: any;
    mean: any;
    variance: any;
    integralEndY: any;
    updateIntegralCache: any;
    Integral: {
        get: any;
        xToY: any;
        yToX: any;
        sum: any;
    };
};
export function isNormalized(t: any): boolean;
export function downsampleEquallyOverX(length: any, t: any): {
    xyShape: any;
    interpolation: any;
    integralSumCache: any;
    integralCache: any;
};
export function combineAlgebraicallyWithDiscrete(op: any, t1: any, t2: any, discretePosition: any): {
    xyShape: any;
    interpolation: any;
    integralSumCache: any;
    integralCache: any;
};
export function combineAlgebraically(op: any, t1: any, t2: any): {
    xyShape: any;
    interpolation: any;
    integralSumCache: any;
    integralCache: any;
};
declare function integrate(indefiniteIntegralStepwiseOpt: any, indefiniteIntegralLinearOpt: any, t: any): any;
declare function getMeanOfSquares(t: any): any;
declare namespace emptyIntegral_xyShape {
    const xs: any[];
    const ys: number[];
}
declare var emptyIntegral_integralSumCache: number;
declare var empty_xyShape: {
    xs: any[];
    ys: any[];
};
declare var empty_integralSumCache: number;
declare namespace empty_integralCache { }
export {};
