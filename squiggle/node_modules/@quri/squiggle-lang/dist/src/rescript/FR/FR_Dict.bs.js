'use strict';
var Belt_MapString = require("@rescript/std/lib/js/belt_MapString.js");
var E_A$QuriSquiggleLang = require("../Utility/E/E_A.bs.js");
var E_R$QuriSquiggleLang = require("../Utility/E/E_R.bs.js");
var SqError$QuriSquiggleLang = require("../SqError.bs.js");
var Reducer_Lambda$QuriSquiggleLang = require("../Reducer/Reducer_Lambda.bs.js");
var FunctionRegistry_Core$QuriSquiggleLang = require("../FunctionRegistry/FunctionRegistry_Core.bs.js");
var FunctionRegistry_Helpers$QuriSquiggleLang = require("../FunctionRegistry/FunctionRegistry_Helpers.bs.js");
var nameSpace = "Dict";
function keys(a) {
    return {
        TAG: 0,
        _0: E_A$QuriSquiggleLang.fmap(Belt_MapString.keysToArray(a), FunctionRegistry_Helpers$QuriSquiggleLang.Wrappers.evString),
        [Symbol.for("name")]: "IEvArray"
    };
}
function values(a) {
    return {
        TAG: 0,
        _0: Belt_MapString.valuesToArray(a),
        [Symbol.for("name")]: "IEvArray"
    };
}
function toList(a) {
    return FunctionRegistry_Helpers$QuriSquiggleLang.Wrappers.evArray(E_A$QuriSquiggleLang.fmap(Belt_MapString.toArray(a), (function (param) {
        return FunctionRegistry_Helpers$QuriSquiggleLang.Wrappers.evArray([
            {
                TAG: 8,
                _0: param[0],
                [Symbol.for("name")]: "IEvString"
            },
            param[1]
        ]);
    })));
}
function fromList(items) {
    return E_R$QuriSquiggleLang.fmap(E_R$QuriSquiggleLang.fmap(E_A$QuriSquiggleLang.R.firstErrorOrOpen(E_A$QuriSquiggleLang.fmap(items, (function (item) {
        if (typeof item === "number") {
            return {
                TAG: 1,
                _0: FunctionRegistry_Helpers$QuriSquiggleLang.impossibleError,
                [Symbol.for("name")]: "Error"
            };
        }
        if (item.TAG !== 0) {
            return {
                TAG: 1,
                _0: FunctionRegistry_Helpers$QuriSquiggleLang.impossibleError,
                [Symbol.for("name")]: "Error"
            };
        }
        var match = item._0;
        if (match.length !== 2) {
            return {
                TAG: 1,
                _0: FunctionRegistry_Helpers$QuriSquiggleLang.impossibleError,
                [Symbol.for("name")]: "Error"
            };
        }
        var string = match[0];
        if (typeof string === "number") {
            return {
                TAG: 1,
                _0: FunctionRegistry_Helpers$QuriSquiggleLang.impossibleError,
                [Symbol.for("name")]: "Error"
            };
        }
        if (string.TAG !== 8) {
            return {
                TAG: 1,
                _0: FunctionRegistry_Helpers$QuriSquiggleLang.impossibleError,
                [Symbol.for("name")]: "Error"
            };
        }
        var value = match[1];
        return {
            TAG: 0,
            _0: [
                string._0,
                value
            ],
            [Symbol.for("name")]: "Ok"
        };
    }))), Belt_MapString.fromArray), FunctionRegistry_Helpers$QuriSquiggleLang.Wrappers.evRecord);
}
function set(a, key, value) {
    return {
        TAG: 7,
        _0: Belt_MapString.set(a, key, value),
        [Symbol.for("name")]: "IEvRecord"
    };
}
function mergeMany(a) {
    var mergedValues = Belt_MapString.fromArray(E_A$QuriSquiggleLang.concatMany(E_A$QuriSquiggleLang.fmap(a, Belt_MapString.toArray)));
    return {
        TAG: 7,
        _0: mergedValues,
        [Symbol.for("name")]: "IEvRecord"
    };
}
function map(dict, eLambdaValue, context, reducer) {
    return FunctionRegistry_Helpers$QuriSquiggleLang.Wrappers.evRecord(Belt_MapString.map(dict, (function (elem) {
        return Reducer_Lambda$QuriSquiggleLang.doLambdaCall(eLambdaValue, [elem], context, reducer);
    })));
}
var Internals = {
    keys: keys,
    values: values,
    toList: toList,
    fromList: fromList,
    set: set,
    mergeMany: mergeMany,
    map: map
};
var library = [
    FunctionRegistry_Core$QuriSquiggleLang.$$Function.make("set", nameSpace, true, [FunctionRegistry_Core$QuriSquiggleLang.FnDefinition.make("set", [
            {
                TAG: 1,
                _0: 9,
                [Symbol.for("name")]: "FRTypeDict"
            },
            8,
            9
        ], (function (inputs, param, param$1) {
            if (inputs.length !== 3) {
                return {
                    TAG: 1,
                    _0: FunctionRegistry_Helpers$QuriSquiggleLang.impossibleError,
                    [Symbol.for("name")]: "Error"
                };
            }
            var dict = inputs[0];
            if (typeof dict === "number") {
                return {
                    TAG: 1,
                    _0: FunctionRegistry_Helpers$QuriSquiggleLang.impossibleError,
                    [Symbol.for("name")]: "Error"
                };
            }
            if (dict.TAG !== 7) {
                return {
                    TAG: 1,
                    _0: FunctionRegistry_Helpers$QuriSquiggleLang.impossibleError,
                    [Symbol.for("name")]: "Error"
                };
            }
            var key = inputs[1];
            if (typeof key === "number") {
                return {
                    TAG: 1,
                    _0: FunctionRegistry_Helpers$QuriSquiggleLang.impossibleError,
                    [Symbol.for("name")]: "Error"
                };
            }
            if (key.TAG !== 8) {
                return {
                    TAG: 1,
                    _0: FunctionRegistry_Helpers$QuriSquiggleLang.impossibleError,
                    [Symbol.for("name")]: "Error"
                };
            }
            var value = inputs[2];
            return {
                TAG: 0,
                _0: set(dict._0, key._0, value),
                [Symbol.for("name")]: "Ok"
            };
        }), undefined)], ["Dict.set({a: 1, b: 2}, \"c\", 3)"], 7, undefined, undefined, undefined),
    FunctionRegistry_Core$QuriSquiggleLang.$$Function.make("merge", nameSpace, true, [FunctionRegistry_Core$QuriSquiggleLang.FnDefinition.make("merge", [
            {
                TAG: 1,
                _0: 9,
                [Symbol.for("name")]: "FRTypeDict"
            },
            {
                TAG: 1,
                _0: 9,
                [Symbol.for("name")]: "FRTypeDict"
            }
        ], (function (inputs, param, param$1) {
            if (inputs.length !== 2) {
                return {
                    TAG: 1,
                    _0: FunctionRegistry_Helpers$QuriSquiggleLang.impossibleError,
                    [Symbol.for("name")]: "Error"
                };
            }
            var d1 = inputs[0];
            if (typeof d1 === "number") {
                return {
                    TAG: 1,
                    _0: FunctionRegistry_Helpers$QuriSquiggleLang.impossibleError,
                    [Symbol.for("name")]: "Error"
                };
            }
            if (d1.TAG !== 7) {
                return {
                    TAG: 1,
                    _0: FunctionRegistry_Helpers$QuriSquiggleLang.impossibleError,
                    [Symbol.for("name")]: "Error"
                };
            }
            var d2 = inputs[1];
            if (typeof d2 === "number" || d2.TAG !== 7) {
                return {
                    TAG: 1,
                    _0: FunctionRegistry_Helpers$QuriSquiggleLang.impossibleError,
                    [Symbol.for("name")]: "Error"
                };
            }
            else {
                return {
                    TAG: 0,
                    _0: mergeMany([
                        d1._0,
                        d2._0
                    ]),
                    [Symbol.for("name")]: "Ok"
                };
            }
        }), undefined)], ["Dict.merge({a: 1, b: 2}, {c: 3, d: 4})"], 7, undefined, undefined, undefined),
    FunctionRegistry_Core$QuriSquiggleLang.$$Function.make("mergeMany", nameSpace, true, [FunctionRegistry_Core$QuriSquiggleLang.FnDefinition.make("mergeMany", [{
                TAG: 2,
                _0: {
                    TAG: 1,
                    _0: 9,
                    [Symbol.for("name")]: "FRTypeDict"
                },
                [Symbol.for("name")]: "FRTypeArray"
            }], (function (inputs, param, param$1) {
            if (inputs.length !== 1) {
                return {
                    TAG: 1,
                    _0: FunctionRegistry_Helpers$QuriSquiggleLang.impossibleError,
                    [Symbol.for("name")]: "Error"
                };
            }
            var dicts = inputs[0];
            if (typeof dicts === "number" || dicts.TAG !== 0) {
                return {
                    TAG: 1,
                    _0: FunctionRegistry_Helpers$QuriSquiggleLang.impossibleError,
                    [Symbol.for("name")]: "Error"
                };
            }
            else {
                return {
                    TAG: 0,
                    _0: mergeMany(E_A$QuriSquiggleLang.fmap(dicts._0, (function (dictValue) {
                        if (typeof dictValue === "number" || dictValue.TAG !== 7) {
                            return SqError$QuriSquiggleLang.Message.$$throw(FunctionRegistry_Helpers$QuriSquiggleLang.impossibleError);
                        }
                        else {
                            return dictValue._0;
                        }
                    }))),
                    [Symbol.for("name")]: "Ok"
                };
            }
        }), undefined)], ["Dict.mergeMany([{a: 1, b: 2}, {c: 3, d: 4}])"], 7, undefined, undefined, undefined),
    FunctionRegistry_Core$QuriSquiggleLang.$$Function.make("keys", nameSpace, true, [FunctionRegistry_Core$QuriSquiggleLang.FnDefinition.make("keys", [{
                TAG: 1,
                _0: 9,
                [Symbol.for("name")]: "FRTypeDict"
            }], (function (inputs, param, param$1) {
            if (inputs.length !== 1) {
                return {
                    TAG: 1,
                    _0: FunctionRegistry_Helpers$QuriSquiggleLang.impossibleError,
                    [Symbol.for("name")]: "Error"
                };
            }
            var d1 = inputs[0];
            if (typeof d1 === "number" || d1.TAG !== 7) {
                return {
                    TAG: 1,
                    _0: FunctionRegistry_Helpers$QuriSquiggleLang.impossibleError,
                    [Symbol.for("name")]: "Error"
                };
            }
            else {
                return {
                    TAG: 0,
                    _0: keys(d1._0),
                    [Symbol.for("name")]: "Ok"
                };
            }
        }), undefined)], ["Dict.keys({a: 1, b: 2})"], 0, undefined, undefined, undefined),
    FunctionRegistry_Core$QuriSquiggleLang.$$Function.make("values", nameSpace, true, [FunctionRegistry_Core$QuriSquiggleLang.FnDefinition.make("values", [{
                TAG: 1,
                _0: 9,
                [Symbol.for("name")]: "FRTypeDict"
            }], (function (inputs, param, param$1) {
            if (inputs.length !== 1) {
                return {
                    TAG: 1,
                    _0: FunctionRegistry_Helpers$QuriSquiggleLang.impossibleError,
                    [Symbol.for("name")]: "Error"
                };
            }
            var d1 = inputs[0];
            if (typeof d1 === "number" || d1.TAG !== 7) {
                return {
                    TAG: 1,
                    _0: FunctionRegistry_Helpers$QuriSquiggleLang.impossibleError,
                    [Symbol.for("name")]: "Error"
                };
            }
            else {
                return {
                    TAG: 0,
                    _0: {
                        TAG: 0,
                        _0: Belt_MapString.valuesToArray(d1._0),
                        [Symbol.for("name")]: "IEvArray"
                    },
                    [Symbol.for("name")]: "Ok"
                };
            }
        }), undefined)], ["Dict.values({a: 1, b: 2})"], 0, undefined, undefined, undefined),
    FunctionRegistry_Core$QuriSquiggleLang.$$Function.make("toList", nameSpace, true, [FunctionRegistry_Core$QuriSquiggleLang.FnDefinition.make("toList", [{
                TAG: 1,
                _0: 9,
                [Symbol.for("name")]: "FRTypeDict"
            }], (function (inputs, param, param$1) {
            if (inputs.length !== 1) {
                return {
                    TAG: 1,
                    _0: FunctionRegistry_Helpers$QuriSquiggleLang.impossibleError,
                    [Symbol.for("name")]: "Error"
                };
            }
            var dict = inputs[0];
            if (typeof dict === "number" || dict.TAG !== 7) {
                return {
                    TAG: 1,
                    _0: FunctionRegistry_Helpers$QuriSquiggleLang.impossibleError,
                    [Symbol.for("name")]: "Error"
                };
            }
            else {
                return {
                    TAG: 0,
                    _0: toList(dict._0),
                    [Symbol.for("name")]: "Ok"
                };
            }
        }), undefined)], ["Dict.toList({a: 1, b: 2})"], 0, undefined, undefined, undefined),
    FunctionRegistry_Core$QuriSquiggleLang.$$Function.make("fromList", nameSpace, true, [FunctionRegistry_Core$QuriSquiggleLang.FnDefinition.make("fromList", [{
                TAG: 2,
                _0: {
                    TAG: 2,
                    _0: 9,
                    [Symbol.for("name")]: "FRTypeArray"
                },
                [Symbol.for("name")]: "FRTypeArray"
            }], (function (inputs, param, param$1) {
            if (inputs.length !== 1) {
                return {
                    TAG: 1,
                    _0: FunctionRegistry_Helpers$QuriSquiggleLang.impossibleError,
                    [Symbol.for("name")]: "Error"
                };
            }
            var items = inputs[0];
            if (typeof items === "number" || items.TAG !== 0) {
                return {
                    TAG: 1,
                    _0: FunctionRegistry_Helpers$QuriSquiggleLang.impossibleError,
                    [Symbol.for("name")]: "Error"
                };
            }
            else {
                return fromList(items._0);
            }
        }), undefined)], ["Dict.fromList([[\"a\", 1], [\"b\", 2]])"], 7, undefined, undefined, undefined),
    FunctionRegistry_Core$QuriSquiggleLang.$$Function.make("map", nameSpace, true, [FunctionRegistry_Core$QuriSquiggleLang.FnDefinition.make("map", [
            {
                TAG: 1,
                _0: 9,
                [Symbol.for("name")]: "FRTypeDict"
            },
            7
        ], (function (inputs, context, reducer) {
            if (inputs.length !== 2) {
                return {
                    TAG: 1,
                    _0: FunctionRegistry_Helpers$QuriSquiggleLang.impossibleError,
                    [Symbol.for("name")]: "Error"
                };
            }
            var dict = inputs[0];
            if (typeof dict === "number") {
                return {
                    TAG: 1,
                    _0: FunctionRegistry_Helpers$QuriSquiggleLang.impossibleError,
                    [Symbol.for("name")]: "Error"
                };
            }
            if (dict.TAG !== 7) {
                return {
                    TAG: 1,
                    _0: FunctionRegistry_Helpers$QuriSquiggleLang.impossibleError,
                    [Symbol.for("name")]: "Error"
                };
            }
            var lambda = inputs[1];
            if (typeof lambda === "number" || lambda.TAG !== 5) {
                return {
                    TAG: 1,
                    _0: FunctionRegistry_Helpers$QuriSquiggleLang.impossibleError,
                    [Symbol.for("name")]: "Error"
                };
            }
            else {
                return {
                    TAG: 0,
                    _0: map(dict._0, lambda._0, context, reducer),
                    [Symbol.for("name")]: "Ok"
                };
            }
        }), undefined)], ["Dict.map({a: 1, b: 2}, {|x| x + 1})"], 7, undefined, undefined, undefined)
];
exports.nameSpace = nameSpace;
exports.Internals = Internals;
exports.library = library;
//# sourceMappingURL=FR_Dict.bs.js.map