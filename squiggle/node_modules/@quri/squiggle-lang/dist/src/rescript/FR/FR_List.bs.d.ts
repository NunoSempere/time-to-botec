export var nameSpace: string;
export var requiresNamespace: boolean;
export namespace Internals {
    export { length };
    export { makeFromNumber };
    export { upTo };
    export { first };
    export { last };
    export { reverse };
    export { map };
    export { reduce };
    export { reduceReverse };
    export { filter };
}
export var library: {
    name: any;
    definitions: any;
    requiresNamespace: any;
    nameSpace: any;
    output: any;
    examples: any;
    description: any;
    isExperimental: any;
}[];
declare function length(v: any): {
    [x: symbol]: string;
    TAG: number;
    _0: any;
};
declare function makeFromNumber(n: any, value: any): {
    [x: symbol]: string;
    TAG: number;
    _0: any;
};
declare function upTo(low: any, high: any): {
    [x: symbol]: string;
    TAG: number;
    _0: any;
};
declare function first(v: any): {
    [x: symbol]: string;
    TAG: number;
    _0: any;
};
declare function last(v: any): {
    [x: symbol]: string;
    TAG: number;
    _0: any;
};
declare function reverse(array: any): {
    [x: symbol]: string;
    TAG: number;
    _0: any;
};
declare function map(array: any, eLambdaValue: any, context: any, reducer: any): {
    [x: symbol]: string;
    TAG: number;
    _0: any;
};
declare function reduce(aValueArray: any, initialValue: any, aLambdaValue: any, context: any, reducer: any): any;
declare function reduceReverse(aValueArray: any, initialValue: any, aLambdaValue: any, context: any, reducer: any): any;
declare function filter(aValueArray: any, aLambdaValue: any, context: any, reducer: any): {
    [x: symbol]: string;
    TAG: number;
    _0: any;
};
export {};
