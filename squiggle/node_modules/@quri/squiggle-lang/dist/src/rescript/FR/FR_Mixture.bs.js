'use strict';
var Belt_Array = require("@rescript/std/lib/js/belt_Array.js");
var E_A$QuriSquiggleLang = require("../Utility/E/E_A.bs.js");
var SqError$QuriSquiggleLang = require("../SqError.bs.js");
var GenericDist$QuriSquiggleLang = require("../Distributions/GenericDist.bs.js");
var Reducer_Lambda$QuriSquiggleLang = require("../Reducer/Reducer_Lambda.bs.js");
function raiseArgumentError(message) {
    return SqError$QuriSquiggleLang.Message.$$throw({
        TAG: 2,
        _0: {
            TAG: 1,
            _0: message,
            [Symbol.for("name")]: "ArgumentError"
        },
        [Symbol.for("name")]: "REDistributionError"
    });
}
function parseNumber(args) {
    if (typeof args === "number" || args.TAG !== 6) {
        return raiseArgumentError("Not a number");
    }
    else {
        return args._0;
    }
}
function parseNumberArray(ags) {
    return E_A$QuriSquiggleLang.fmap(ags, parseNumber);
}
function parseDist(args) {
    if (typeof args === "number") {
        return raiseArgumentError("Not a distribution");
    }
    switch (args.TAG | 0) {
        case 4:
            return args._0;
        case 6:
            return GenericDist$QuriSquiggleLang.fromFloat(args._0);
        default:
            return raiseArgumentError("Not a distribution");
    }
}
function parseDistributionArray(ags) {
    return E_A$QuriSquiggleLang.fmap(ags, parseDist);
}
function mixtureWithGivenWeights(distributions, weights, env) {
    if (E_A$QuriSquiggleLang.length(distributions) === E_A$QuriSquiggleLang.length(weights)) {
        return GenericDist$QuriSquiggleLang.mixture(E_A$QuriSquiggleLang.zip(distributions, weights), env);
    }
    else {
        return {
            TAG: 1,
            _0: {
                TAG: 1,
                _0: "Error, mixture call has different number of distributions and weights",
                [Symbol.for("name")]: "ArgumentError"
            },
            [Symbol.for("name")]: "Error"
        };
    }
}
function mixtureWithDefaultWeights(distributions, env) {
    var length = E_A$QuriSquiggleLang.length(distributions);
    var weights = Belt_Array.make(length, 1.0 / length);
    return mixtureWithGivenWeights(distributions, weights, env);
}
function mixture(args, env) {
    var len = args.length;
    if (len < 3) {
        switch (len) {
            case 0:
                break;
            case 1:
                var distributions = args[0];
                if (typeof distributions !== "number" && distributions.TAG === 0) {
                    return mixtureWithDefaultWeights(E_A$QuriSquiggleLang.fmap(distributions._0, parseDist), env);
                }
                break;
            case 2:
                var distributions$1 = args[0];
                if (typeof distributions$1 !== "number" && distributions$1.TAG === 0) {
                    var weights = args[1];
                    if (typeof weights !== "number" && weights.TAG === 0) {
                        var distrs = E_A$QuriSquiggleLang.fmap(distributions$1._0, parseDist);
                        var wghts = E_A$QuriSquiggleLang.fmap(weights._0, parseNumber);
                        return mixtureWithGivenWeights(distrs, wghts, env);
                    }
                }
                break;
        }
    }
    var match = E_A$QuriSquiggleLang.last(args);
    if (match === undefined) {
        return raiseArgumentError("Last argument of mx must be array or distribution");
    }
    if (typeof match === "number") {
        return raiseArgumentError("Last argument of mx must be array or distribution");
    }
    switch (match.TAG | 0) {
        case 0:
            var weights$1 = E_A$QuriSquiggleLang.fmap(match._0, parseNumber);
            var distributions$2 = E_A$QuriSquiggleLang.fmap(E_A$QuriSquiggleLang.slice(args, 0, E_A$QuriSquiggleLang.length(args) - 1 | 0), parseDist);
            return mixtureWithGivenWeights(distributions$2, weights$1, env);
        case 4:
        case 6:
            return mixtureWithDefaultWeights(E_A$QuriSquiggleLang.fmap(args, parseDist), env);
        default:
            return raiseArgumentError("Last argument of mx must be array or distribution");
    }
}
var Mixture = {
    raiseArgumentError: raiseArgumentError,
    parseNumber: parseNumber,
    parseNumberArray: parseNumberArray,
    parseDist: parseDist,
    parseDistributionArray: parseDistributionArray,
    mixtureWithGivenWeights: mixtureWithGivenWeights,
    mixtureWithDefaultWeights: mixtureWithDefaultWeights,
    mixture: mixture
};
var mxLambda = Reducer_Lambda$QuriSquiggleLang.makeFFILambda("mx", (function (inputs, context, param) {
    var value = mixture(inputs, context.environment);
    if (value.TAG === 0) {
        return {
            TAG: 4,
            _0: value._0,
            [Symbol.for("name")]: "IEvDistribution"
        };
    }
    else {
        return SqError$QuriSquiggleLang.Message.$$throw({
            TAG: 2,
            _0: value._0,
            [Symbol.for("name")]: "REDistributionError"
        });
    }
}));
exports.Mixture = Mixture;
exports.mxLambda = mxLambda;
//# sourceMappingURL=FR_Mixture.bs.js.map