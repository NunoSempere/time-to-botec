'use strict';
var Curry = require("@rescript/std/lib/js/curry.js");
var E_R$QuriSquiggleLang = require("../Utility/E/E_R.bs.js");
var E_Tuple2$QuriSquiggleLang = require("../Utility/E/E_Tuple2.bs.js");
var SymbolicDist$QuriSquiggleLang = require("../Distributions/SymbolicDist/SymbolicDist.bs.js");
var FunctionRegistry_Core$QuriSquiggleLang = require("../FunctionRegistry/FunctionRegistry_Core.bs.js");
var FunctionRegistry_Helpers$QuriSquiggleLang = require("../FunctionRegistry/FunctionRegistry_Helpers.bs.js");
var nameSpace = "Dist";
function fnMake(name, examples, definitions) {
    return FunctionRegistry_Core$QuriSquiggleLang.$$Function.make(name, nameSpace, false, definitions, examples, 4, undefined, undefined, undefined);
}
function $$process(fn, env, r) {
    return E_R$QuriSquiggleLang.errMap(E_R$QuriSquiggleLang.fmap(E_R$QuriSquiggleLang.bind(r, (function (__x) {
        return Curry._3(FunctionRegistry_Helpers$QuriSquiggleLang.Process.DistOrNumberToDist.twoValuesUsingSymbolicDist, fn, __x, env);
    })), FunctionRegistry_Helpers$QuriSquiggleLang.Wrappers.evDistribution), (function (e) {
        return {
            TAG: 15,
            _0: e,
            [Symbol.for("name")]: "REOther"
        };
    }));
}
function make(name, fn) {
    return FunctionRegistry_Core$QuriSquiggleLang.FnDefinition.make(name, [
        5,
        5
    ], (function (inputs, context, param) {
        return $$process(fn, context.environment, Curry._1(FunctionRegistry_Helpers$QuriSquiggleLang.Prepare.ToValueTuple.twoDistOrNumber, inputs));
    }), undefined);
}
function makeRecordP5P95(name, fn) {
    return FunctionRegistry_Core$QuriSquiggleLang.FnDefinition.make(name, [{
            TAG: 0,
            _0: [
                [
                    "p5",
                    5
                ],
                [
                    "p95",
                    5
                ]
            ],
            [Symbol.for("name")]: "FRTypeRecord"
        }], (function (inputs, context, param) {
        return $$process(fn, context.environment, Curry._2(FunctionRegistry_Helpers$QuriSquiggleLang.Prepare.ToValueTuple.Record.twoDistOrNumber, inputs, [
            "p5",
            "p95"
        ]));
    }), undefined);
}
function makeRecordMeanStdev(name, fn) {
    return FunctionRegistry_Core$QuriSquiggleLang.FnDefinition.make(name, [{
            TAG: 0,
            _0: [
                [
                    "mean",
                    5
                ],
                [
                    "stdev",
                    5
                ]
            ],
            [Symbol.for("name")]: "FRTypeRecord"
        }], (function (inputs, context, param) {
        return $$process(fn, context.environment, Curry._2(FunctionRegistry_Helpers$QuriSquiggleLang.Prepare.ToValueTuple.Record.twoDistOrNumber, inputs, [
            "mean",
            "stdev"
        ]));
    }), undefined);
}
var TwoArgDist = {
    $$process: $$process,
    make: make,
    makeRecordP5P95: makeRecordP5P95,
    makeRecordMeanStdev: makeRecordMeanStdev
};
function $$process$1(fn, env, r) {
    return E_R$QuriSquiggleLang.errMap(E_R$QuriSquiggleLang.fmap(E_R$QuriSquiggleLang.bind(r, (function (__x) {
        return Curry._3(FunctionRegistry_Helpers$QuriSquiggleLang.Process.DistOrNumberToDist.oneValueUsingSymbolicDist, fn, __x, env);
    })), FunctionRegistry_Helpers$QuriSquiggleLang.Wrappers.evDistribution), (function (e) {
        return {
            TAG: 15,
            _0: e,
            [Symbol.for("name")]: "REOther"
        };
    }));
}
function make$1(name, fn) {
    return FunctionRegistry_Core$QuriSquiggleLang.FnDefinition.make(name, [5], (function (inputs, context, param) {
        return $$process$1(fn, context.environment, Curry._1(FunctionRegistry_Helpers$QuriSquiggleLang.Prepare.ToValueTuple.oneDistOrNumber, inputs));
    }), undefined);
}
var OneArgDist = {
    $$process: $$process$1,
    make: make$1
};
var library = [
    fnMake("normal", [
        "normal(5,1)",
        "normal({p5: 4, p95: 10})",
        "normal({mean: 5, stdev: 2})"
    ], [
        make("normal", (function (param) {
            return E_Tuple2$QuriSquiggleLang.toFnCall(SymbolicDist$QuriSquiggleLang.Normal.make, param);
        })),
        makeRecordP5P95("normal", (function (r) {
            return {
                TAG: 0,
                _0: E_Tuple2$QuriSquiggleLang.toFnCall(SymbolicDist$QuriSquiggleLang.Normal.from90PercentCI, r),
                [Symbol.for("name")]: "Ok"
            };
        })),
        makeRecordMeanStdev("normal", (function (param) {
            return E_Tuple2$QuriSquiggleLang.toFnCall(SymbolicDist$QuriSquiggleLang.Normal.make, param);
        }))
    ]),
    fnMake("lognormal", [
        "lognormal(0.5, 0.8)",
        "lognormal({p5: 4, p95: 10})",
        "lognormal({mean: 5, stdev: 2})"
    ], [
        make("lognormal", (function (param) {
            return E_Tuple2$QuriSquiggleLang.toFnCall(SymbolicDist$QuriSquiggleLang.Lognormal.make, param);
        })),
        makeRecordP5P95("lognormal", (function (r) {
            return {
                TAG: 0,
                _0: E_Tuple2$QuriSquiggleLang.toFnCall(SymbolicDist$QuriSquiggleLang.Lognormal.from90PercentCI, r),
                [Symbol.for("name")]: "Ok"
            };
        })),
        makeRecordMeanStdev("lognormal", (function (param) {
            return E_Tuple2$QuriSquiggleLang.toFnCall(SymbolicDist$QuriSquiggleLang.Lognormal.fromMeanAndStdev, param);
        }))
    ]),
    fnMake("uniform", ["uniform(10, 12)"], [make("uniform", (function (param) {
            return E_Tuple2$QuriSquiggleLang.toFnCall(SymbolicDist$QuriSquiggleLang.Uniform.make, param);
        }))]),
    fnMake("beta", [
        "beta(20, 25)",
        "beta({mean: 0.39, stdev: 0.1})"
    ], [
        make("beta", (function (param) {
            return E_Tuple2$QuriSquiggleLang.toFnCall(SymbolicDist$QuriSquiggleLang.Beta.make, param);
        })),
        makeRecordMeanStdev("beta", (function (param) {
            return E_Tuple2$QuriSquiggleLang.toFnCall(SymbolicDist$QuriSquiggleLang.Beta.fromMeanAndStdev, param);
        }))
    ]),
    fnMake("cauchy", ["cauchy(5, 1)"], [make("cauchy", (function (param) {
            return E_Tuple2$QuriSquiggleLang.toFnCall(SymbolicDist$QuriSquiggleLang.Cauchy.make, param);
        }))]),
    fnMake("gamma", ["gamma(5, 1)"], [make("gamma", (function (param) {
            return E_Tuple2$QuriSquiggleLang.toFnCall(SymbolicDist$QuriSquiggleLang.Gamma.make, param);
        }))]),
    fnMake("logistic", ["logistic(5, 1)"], [make("logistic", (function (param) {
            return E_Tuple2$QuriSquiggleLang.toFnCall(SymbolicDist$QuriSquiggleLang.Logistic.make, param);
        }))]),
    fnMake("to (distribution)", [
        "5 to 10",
        "to(5,10)",
        "-5 to 5"
    ], [
        make("to", (function (param) {
            return E_Tuple2$QuriSquiggleLang.toFnCall(SymbolicDist$QuriSquiggleLang.From90thPercentile.make, param);
        })),
        make("credibleIntervalToDistribution", (function (param) {
            return E_Tuple2$QuriSquiggleLang.toFnCall(SymbolicDist$QuriSquiggleLang.From90thPercentile.make, param);
        }))
    ]),
    fnMake("exponential", ["exponential(2)"], [make$1("exponential", SymbolicDist$QuriSquiggleLang.Exponential.make)]),
    fnMake("bernoulli", ["bernoulli(0.5)"], [make$1("bernoulli", SymbolicDist$QuriSquiggleLang.Bernoulli.make)]),
    fnMake("pointMass", ["pointMass(0.5)"], [make$1("pointMass", SymbolicDist$QuriSquiggleLang.Float.makeSafe)])
];
var DistributionCreation = {
    nameSpace: nameSpace,
    output: 4,
    requiresNamespace: false,
    fnMake: fnMake,
    TwoArgDist: TwoArgDist,
    OneArgDist: OneArgDist,
    library: library
};
var twoArgs = E_Tuple2$QuriSquiggleLang.toFnCall;
exports.twoArgs = twoArgs;
exports.DistributionCreation = DistributionCreation;
exports.library = library;
//# sourceMappingURL=FR_Dist.bs.js.map