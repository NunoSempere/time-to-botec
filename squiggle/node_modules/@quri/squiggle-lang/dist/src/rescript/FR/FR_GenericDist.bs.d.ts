export namespace Old {
    export { Helpers };
    export { SymbolicConstructors };
    export { dispatchToGenericOutput };
    export { genericOutputToReducerValue };
    export { dispatch };
}
export function makeProxyFn(name: any, inputs: any): {
    name: any;
    definitions: any;
    requiresNamespace: any;
    nameSpace: any;
    output: any;
    examples: any;
    description: any;
    isExperimental: any;
};
export function makeOperationFns(param: any): any;
export var library: any;
export var mxLambda: {
    [x: symbol]: string;
    TAG: number;
    body: any;
    name: any;
};
declare namespace Helpers {
    export { arithmeticMap };
    export { catchAndConvertTwoArgsToDists };
    export { toFloatFn };
    export { toStringFn };
    export { toBoolFn };
    export { toDistFn };
    export { twoDiststoDistFn };
    export { parseNumber };
    export { parseNumberArray };
    export { parseDist };
    export { parseDistributionArray };
    export { mixtureWithGivenWeights };
    export { mixtureWithDefaultWeights };
    export { mixture };
}
declare namespace SymbolicConstructors {
    export { threeFloat };
    export { symbolicResultToOutput };
}
declare function dispatchToGenericOutput(call: any, env: any): any;
declare function genericOutputToReducerValue(o: any): {
    [x: symbol]: string;
    TAG: number;
    _0: {
        [x: symbol]: string;
        TAG: number;
        _0: any;
    };
} | undefined;
declare function dispatch(call: any, environment: any): void | {
    [x: symbol]: string;
    TAG: number;
    _0: {
        [x: symbol]: string;
        TAG: number;
        _0: any;
    };
};
declare function arithmeticMap(r: any): "Multiply" | "Divide" | "Power" | "Logarithm" | "Add" | "Subtract";
declare function catchAndConvertTwoArgsToDists(args: any): any[] | undefined;
declare function toFloatFn(fnCall: any, dist: any, env: any): any;
declare function toStringFn(fnCall: any, dist: any, env: any): any;
declare function toBoolFn(fnCall: any, dist: any, env: any): any;
declare function toDistFn(fnCall: any, dist: any, env: any): any;
declare function twoDiststoDistFn(direction: any, arithmetic: any, dist1: any, dist2: any, env: any): any;
declare function parseNumber(args: any): {
    [x: symbol]: string;
    TAG: number;
    _0: any;
};
declare function parseNumberArray(ags: any): any;
declare function parseDist(args: any): {
    [x: symbol]: string;
    TAG: number;
    _0: any;
};
declare function parseDistributionArray(ags: any): any;
declare function mixtureWithGivenWeights(distributions: any, weights: any, env: any): any;
declare function mixtureWithDefaultWeights(distributions: any, env: any): any;
declare function mixture(args: any, env: any): any;
declare function threeFloat(name: any): {
    [x: symbol]: string;
    TAG: number;
    _0: (low: any, medium: any, high: any) => {
        [x: symbol]: string;
        TAG: number;
        _0: {
            NAME: string;
            VAL: {
                low: any;
                medium: any;
                high: any;
            };
        };
    } | {
        [x: symbol]: string;
        TAG: number;
        _0: string;
    };
} | {
    [x: symbol]: string;
    TAG: number;
    _0: string;
};
declare function symbolicResultToOutput(symbolicResult: any): {
    [x: symbol]: string;
    TAG: number;
    _0: {
        [x: symbol]: string;
        TAG: number;
        _0: any;
    };
};
export {};
