'use strict';
var Belt_Option = require("@rescript/std/lib/js/belt_Option.js");
var Belt_Result = require("@rescript/std/lib/js/belt_Result.js");
var Caml_js_exceptions = require("@rescript/std/lib/js/caml_js_exceptions.js");
var E_A$QuriSquiggleLang = require("../Utility/E/E_A.bs.js");
var E_O$QuriSquiggleLang = require("../Utility/E/E_O.bs.js");
var E_R$QuriSquiggleLang = require("../Utility/E/E_R.bs.js");
var SqError$QuriSquiggleLang = require("../SqError.bs.js");
var Reducer_Bindings$QuriSquiggleLang = require("../Reducer/Reducer_Bindings.bs.js");
var Reducer_Namespace$QuriSquiggleLang = require("../Reducer/Reducer_Namespace.bs.js");
var Reducer_Expression$QuriSquiggleLang = require("../Reducer/Reducer_Expression/Reducer_Expression.bs.js");
var Reducer_Peggy_Parse$QuriSquiggleLang = require("../Reducer/Reducer_Peggy/Reducer_Peggy_Parse.bs.js");
var Reducer_Peggy_ToExpression$QuriSquiggleLang = require("../Reducer/Reducer_Peggy/Reducer_Peggy_ToExpression.bs.js");
var ReducerProject_ParseIncludes$QuriSquiggleLang = require("./ReducerProject_ParseIncludes.bs.js");
function emptyItem(sourceId) {
    return {
        source: "",
        sourceId: sourceId,
        rawParse: undefined,
        expression: undefined,
        continuation: Reducer_Namespace$QuriSquiggleLang.make(undefined),
        result: undefined,
        continues: [],
        includes: {
            TAG: 0,
            _0: [],
            [Symbol.for("name")]: "Ok"
        },
        includeAsVariables: [],
        directIncludes: []
    };
}
function getSource(r) {
    return r.source;
}
function getSourceId(r) {
    return r.sourceId;
}
function getRawParse(r) {
    return r.rawParse;
}
function getExpression(r) {
    return r.expression;
}
function getContinuation(r) {
    return r.continuation;
}
function getResult(r) {
    return r.result;
}
function getContinues(r) {
    return r.continues;
}
function getIncludes(r) {
    return r.includes;
}
function getDirectIncludes(r) {
    return r.directIncludes;
}
function getIncludesAsVariables(r) {
    return r.includeAsVariables;
}
function touchSource($$this) {
    var r = emptyItem($$this.sourceId);
    return {
        source: $$this.source,
        sourceId: r.sourceId,
        rawParse: r.rawParse,
        expression: r.expression,
        continuation: r.continuation,
        result: r.result,
        continues: $$this.continues,
        includes: $$this.includes,
        includeAsVariables: $$this.includeAsVariables,
        directIncludes: $$this.directIncludes
    };
}
function touchRawParse($$this) {
    var r = emptyItem($$this.sourceId);
    return {
        source: $$this.source,
        sourceId: r.sourceId,
        rawParse: $$this.rawParse,
        expression: r.expression,
        continuation: r.continuation,
        result: r.result,
        continues: $$this.continues,
        includes: $$this.includes,
        includeAsVariables: $$this.includeAsVariables,
        directIncludes: $$this.directIncludes
    };
}
function touchExpression($$this) {
    return {
        source: $$this.source,
        sourceId: $$this.sourceId,
        rawParse: $$this.rawParse,
        expression: $$this.expression,
        continuation: $$this.continuation,
        result: $$this.result,
        continues: $$this.continues,
        includes: $$this.includes,
        includeAsVariables: $$this.includeAsVariables,
        directIncludes: $$this.directIncludes
    };
}
function resetIncludes(r) {
    return {
        source: r.source,
        sourceId: r.sourceId,
        rawParse: r.rawParse,
        expression: r.expression,
        continuation: r.continuation,
        result: r.result,
        continues: r.continues,
        includes: {
            TAG: 0,
            _0: [],
            [Symbol.for("name")]: "Ok"
        },
        includeAsVariables: [],
        directIncludes: []
    };
}
function setSource(r, source) {
    return touchSource(resetIncludes({
        source: source,
        sourceId: r.sourceId,
        rawParse: r.rawParse,
        expression: r.expression,
        continuation: r.continuation,
        result: r.result,
        continues: r.continues,
        includes: r.includes,
        includeAsVariables: r.includeAsVariables,
        directIncludes: r.directIncludes
    }));
}
function setRawParse(r, rawParse) {
    return touchRawParse({
        source: r.source,
        sourceId: r.sourceId,
        rawParse: rawParse,
        expression: r.expression,
        continuation: r.continuation,
        result: r.result,
        continues: r.continues,
        includes: r.includes,
        includeAsVariables: r.includeAsVariables,
        directIncludes: r.directIncludes
    });
}
function setExpression(r, expression) {
    return touchExpression({
        source: r.source,
        sourceId: r.sourceId,
        rawParse: r.rawParse,
        expression: expression,
        continuation: r.continuation,
        result: r.result,
        continues: r.continues,
        includes: r.includes,
        includeAsVariables: r.includeAsVariables,
        directIncludes: r.directIncludes
    });
}
function setContinuation(r, continuation) {
    return {
        source: r.source,
        sourceId: r.sourceId,
        rawParse: r.rawParse,
        expression: r.expression,
        continuation: continuation,
        result: r.result,
        continues: r.continues,
        includes: r.includes,
        includeAsVariables: r.includeAsVariables,
        directIncludes: r.directIncludes
    };
}
function setResult(r, result) {
    return {
        source: r.source,
        sourceId: r.sourceId,
        rawParse: r.rawParse,
        expression: r.expression,
        continuation: r.continuation,
        result: result,
        continues: r.continues,
        includes: r.includes,
        includeAsVariables: r.includeAsVariables,
        directIncludes: r.directIncludes
    };
}
function clean($$this) {
    return {
        source: $$this.source,
        sourceId: $$this.sourceId,
        rawParse: $$this.rawParse,
        expression: $$this.expression,
        continuation: $$this.continuation,
        result: $$this.result,
        continues: $$this.continues,
        includes: $$this.includes,
        includeAsVariables: $$this.includeAsVariables,
        directIncludes: $$this.directIncludes
    };
}
function getImmediateDependencies($$this) {
    return Belt_Result.map($$this.includes, (function (__x) {
        return __x.concat($$this.continues);
    }));
}
function getPastChain($$this) {
    return $$this.directIncludes.concat($$this.continues);
}
function setContinues($$this, continues) {
    return touchSource({
        source: $$this.source,
        sourceId: $$this.sourceId,
        rawParse: $$this.rawParse,
        expression: $$this.expression,
        continuation: $$this.continuation,
        result: $$this.result,
        continues: continues,
        includes: $$this.includes,
        includeAsVariables: $$this.includeAsVariables,
        directIncludes: $$this.directIncludes
    });
}
function removeContinues($$this) {
    return touchSource({
        source: $$this.source,
        sourceId: $$this.sourceId,
        rawParse: $$this.rawParse,
        expression: $$this.expression,
        continuation: $$this.continuation,
        result: $$this.result,
        continues: [],
        includes: $$this.includes,
        includeAsVariables: $$this.includeAsVariables,
        directIncludes: $$this.directIncludes
    });
}
function setIncludes($$this, includes) {
    return {
        source: $$this.source,
        sourceId: $$this.sourceId,
        rawParse: $$this.rawParse,
        expression: $$this.expression,
        continuation: $$this.continuation,
        result: $$this.result,
        continues: $$this.continues,
        includes: includes,
        includeAsVariables: $$this.includeAsVariables,
        directIncludes: $$this.directIncludes
    };
}
function setImportAsVariables($$this, includeAsVariables) {
    return {
        source: $$this.source,
        sourceId: $$this.sourceId,
        rawParse: $$this.rawParse,
        expression: $$this.expression,
        continuation: $$this.continuation,
        result: $$this.result,
        continues: $$this.continues,
        includes: $$this.includes,
        includeAsVariables: includeAsVariables,
        directIncludes: $$this.directIncludes
    };
}
function setDirectImports($$this, directIncludes) {
    return {
        source: $$this.source,
        sourceId: $$this.sourceId,
        rawParse: $$this.rawParse,
        expression: $$this.expression,
        continuation: $$this.continuation,
        result: $$this.result,
        continues: $$this.continues,
        includes: $$this.includes,
        includeAsVariables: $$this.includeAsVariables,
        directIncludes: directIncludes
    };
}
function parseIncludes($$this) {
    var rRawImportAsVariables = ReducerProject_ParseIncludes$QuriSquiggleLang.parseIncludes($$this.source);
    if (rRawImportAsVariables.TAG !== 0) {
        return setIncludes(resetIncludes($$this), {
            TAG: 1,
            _0: rRawImportAsVariables._0,
            [Symbol.for("name")]: "Error"
        });
    }
    var rawImportAsVariables = rRawImportAsVariables._0;
    var includes = {
        TAG: 0,
        _0: E_A$QuriSquiggleLang.fmap(rawImportAsVariables, (function (param) {
            return param[1];
        })),
        [Symbol.for("name")]: "Ok"
    };
    var includeAsVariables = E_A$QuriSquiggleLang.filter(rawImportAsVariables, (function (param) {
        return param[0] !== "";
    }));
    var directIncludes = E_A$QuriSquiggleLang.fmap(E_A$QuriSquiggleLang.filter(rawImportAsVariables, (function (param) {
        return param[0] === "";
    })), (function (param) {
        return param[1];
    }));
    return {
        source: $$this.source,
        sourceId: $$this.sourceId,
        rawParse: $$this.rawParse,
        expression: $$this.expression,
        continuation: $$this.continuation,
        result: $$this.result,
        continues: $$this.continues,
        includes: includes,
        includeAsVariables: includeAsVariables,
        directIncludes: directIncludes
    };
}
function doRawParse($$this) {
    return E_R$QuriSquiggleLang.errMap(Reducer_Peggy_Parse$QuriSquiggleLang.parse($$this.source, $$this.sourceId), SqError$QuriSquiggleLang.fromParseError);
}
function rawParse($$this) {
    return setRawParse($$this, E_O$QuriSquiggleLang.defaultFn($$this.rawParse, (function (param) {
        return doRawParse($$this);
    })));
}
function doBuildExpression($$this) {
    return Belt_Option.map($$this.rawParse, (function (o) {
        return Belt_Result.map(o, Reducer_Peggy_ToExpression$QuriSquiggleLang.fromNode);
    }));
}
function buildExpression($$this) {
    var $$this$1 = rawParse($$this);
    var match = $$this$1.expression;
    if (match !== undefined) {
        return $$this$1;
    }
    else {
        return E_O$QuriSquiggleLang.defaultFn(Belt_Option.map(doBuildExpression($$this$1), (function (__x) {
            return setExpression($$this$1, __x);
        })), (function (param) {
            return $$this$1;
        }));
    }
}
function failRun($$this, e) {
    return setContinuation(setResult($$this, {
        TAG: 1,
        _0: e,
        [Symbol.for("name")]: "Error"
    }), Reducer_Namespace$QuriSquiggleLang.make(undefined));
}
function doRun($$this, context) {
    var expressionResult = $$this.expression;
    if (expressionResult === undefined) {
        return failRun($$this, SqError$QuriSquiggleLang.fromMessage({
            TAG: 13,
            _0: "attempt to run without expression",
            [Symbol.for("name")]: "RETodo"
        }));
    }
    if (expressionResult.TAG !== 0) {
        return failRun($$this, expressionResult._0);
    }
    try {
        var match = Reducer_Expression$QuriSquiggleLang.evaluate(expressionResult._0, context);
        return setContinuation(setResult($$this, {
            TAG: 0,
            _0: match[0],
            [Symbol.for("name")]: "Ok"
        }), Reducer_Bindings$QuriSquiggleLang.locals(match[1].bindings));
    }
    catch (raw_e) {
        var e = Caml_js_exceptions.internalToOCamlException(raw_e);
        return failRun($$this, SqError$QuriSquiggleLang.fromException(e));
    }
}
function run($$this, context) {
    var $$this$1 = buildExpression($$this);
    var match = $$this$1.result;
    if (match !== undefined) {
        return $$this$1;
    }
    else {
        return doRun($$this$1, context);
    }
}
var T;
var cleanResults = touchExpression;
exports.T = T;
exports.emptyItem = emptyItem;
exports.getSource = getSource;
exports.getSourceId = getSourceId;
exports.getRawParse = getRawParse;
exports.getExpression = getExpression;
exports.getContinuation = getContinuation;
exports.getResult = getResult;
exports.getContinues = getContinues;
exports.getIncludes = getIncludes;
exports.getDirectIncludes = getDirectIncludes;
exports.getIncludesAsVariables = getIncludesAsVariables;
exports.touchSource = touchSource;
exports.touchRawParse = touchRawParse;
exports.touchExpression = touchExpression;
exports.resetIncludes = resetIncludes;
exports.setSource = setSource;
exports.setRawParse = setRawParse;
exports.setExpression = setExpression;
exports.setContinuation = setContinuation;
exports.setResult = setResult;
exports.cleanResults = cleanResults;
exports.clean = clean;
exports.getImmediateDependencies = getImmediateDependencies;
exports.getPastChain = getPastChain;
exports.setContinues = setContinues;
exports.removeContinues = removeContinues;
exports.setIncludes = setIncludes;
exports.setImportAsVariables = setImportAsVariables;
exports.setDirectImports = setDirectImports;
exports.parseIncludes = parseIncludes;
exports.doRawParse = doRawParse;
exports.rawParse = rawParse;
exports.doBuildExpression = doBuildExpression;
exports.buildExpression = buildExpression;
exports.failRun = failRun;
exports.doRun = doRun;
exports.run = run;
//# sourceMappingURL=ReducerProject_ProjectItem.bs.js.map