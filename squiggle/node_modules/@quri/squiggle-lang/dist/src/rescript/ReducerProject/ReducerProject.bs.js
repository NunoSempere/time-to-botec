'use strict';
var Belt_Option = require("@rescript/std/lib/js/belt_Option.js");
var E_A$QuriSquiggleLang = require("../Utility/E/E_A.bs.js");
var Belt_MutableMapString = require("@rescript/std/lib/js/belt_MutableMapString.js");
var SqError$QuriSquiggleLang = require("../SqError.bs.js");
var Reducer_Context$QuriSquiggleLang = require("../Reducer/Reducer_Context.bs.js");
var ReducerProject_T$QuriSquiggleLang = require("./ReducerProject_T.bs.js");
var Reducer_Namespace$QuriSquiggleLang = require("../Reducer/Reducer_Namespace.bs.js");
var SquiggleLibrary_StdLib$QuriSquiggleLang = require("../SquiggleLibrary/SquiggleLibrary_StdLib.bs.js");
var ReducerProject_Topology$QuriSquiggleLang = require("./ReducerProject_Topology.bs.js");
var ReducerProject_ProjectItem$QuriSquiggleLang = require("./ReducerProject_ProjectItem.bs.js");
function createProject(param) {
    return {
        items: Belt_MutableMapString.make(undefined),
        stdLib: SquiggleLibrary_StdLib$QuriSquiggleLang.stdLib,
        environment: Reducer_Context$QuriSquiggleLang.defaultEnvironment,
        previousRunOrder: []
    };
}
function setItem(project, sourceId, item) {
    Belt_MutableMapString.set(project.items, sourceId, item);
}
function touchSource_(project, sourceId) {
    var item = ReducerProject_T$QuriSquiggleLang.getItem(project, sourceId);
    var newItem = ReducerProject_ProjectItem$QuriSquiggleLang.touchSource(item);
    setItem(project, sourceId, newItem);
}
function touchDependents(project, sourceId) {
    var __x = ReducerProject_Topology$QuriSquiggleLang.getDependents(project, sourceId);
    E_A$QuriSquiggleLang.forEach(__x, (function (__x) {
        touchSource_(project, __x);
    }));
}
function touchSource(project, sourceId) {
    touchSource_(project, sourceId);
    touchDependents(project, sourceId);
}
function handleNewTopology(project) {
    var previousRunOrder = project.previousRunOrder;
    var currentRunOrder = ReducerProject_Topology$QuriSquiggleLang.getRunOrder(project);
    var diff = ReducerProject_Topology$QuriSquiggleLang.runOrderDiff(currentRunOrder, previousRunOrder);
    E_A$QuriSquiggleLang.forEach(diff, (function (__x) {
        touchSource(project, __x);
    }));
    project.previousRunOrder = currentRunOrder;
}
function getSource(project, sourceId) {
    return Belt_Option.map(Belt_MutableMapString.get(project.items, sourceId), ReducerProject_ProjectItem$QuriSquiggleLang.getSource);
}
function setSource(project, sourceId, value) {
    var newItem = ReducerProject_ProjectItem$QuriSquiggleLang.setSource(ReducerProject_T$QuriSquiggleLang.getItem(project, sourceId), value);
    setItem(project, sourceId, newItem);
    touchDependents(project, sourceId);
}
function removeSource(project, sourceId) {
    Belt_MutableMapString.remove(project.items, sourceId);
}
function clean(project, sourceId) {
    var newItem = ReducerProject_ProjectItem$QuriSquiggleLang.clean(ReducerProject_T$QuriSquiggleLang.getItem(project, sourceId));
    setItem(project, sourceId, newItem);
}
function cleanAll(project) {
    E_A$QuriSquiggleLang.forEach(ReducerProject_T$QuriSquiggleLang.getSourceIds(project), (function (sourceId) {
        clean(project, sourceId);
    }));
}
function cleanResults(project, sourceId) {
    var newItem = ReducerProject_ProjectItem$QuriSquiggleLang.cleanResults(ReducerProject_T$QuriSquiggleLang.getItem(project, sourceId));
    setItem(project, sourceId, newItem);
}
function cleanAllResults(project) {
    E_A$QuriSquiggleLang.forEach(ReducerProject_T$QuriSquiggleLang.getSourceIds(project), (function (sourceId) {
        cleanResults(project, sourceId);
    }));
}
function getIncludes(project, sourceId) {
    return ReducerProject_ProjectItem$QuriSquiggleLang.getIncludes(ReducerProject_T$QuriSquiggleLang.getItem(project, sourceId));
}
function getPastChain(project, sourceId) {
    return ReducerProject_ProjectItem$QuriSquiggleLang.getPastChain(ReducerProject_T$QuriSquiggleLang.getItem(project, sourceId));
}
function getIncludesAsVariables(project, sourceId) {
    return ReducerProject_ProjectItem$QuriSquiggleLang.getIncludesAsVariables(ReducerProject_T$QuriSquiggleLang.getItem(project, sourceId));
}
function getDirectIncludes(project, sourceId) {
    return ReducerProject_ProjectItem$QuriSquiggleLang.getDirectIncludes(ReducerProject_T$QuriSquiggleLang.getItem(project, sourceId));
}
function setContinues(project, sourceId, continues) {
    var newItem = ReducerProject_ProjectItem$QuriSquiggleLang.setContinues(ReducerProject_T$QuriSquiggleLang.getItem(project, sourceId), continues);
    setItem(project, sourceId, newItem);
    handleNewTopology(project);
}
function getContinues(project, sourceId) {
    return ReducerProject_ProjectItem$QuriSquiggleLang.getContinues(ReducerProject_T$QuriSquiggleLang.getItem(project, sourceId));
}
function removeContinues(project, sourceId) {
    var newItem = ReducerProject_ProjectItem$QuriSquiggleLang.removeContinues(ReducerProject_T$QuriSquiggleLang.getItem(project, sourceId));
    setItem(project, sourceId, newItem);
    handleNewTopology(project);
}
function setContinuation(project, sourceId, continuation) {
    var newItem = ReducerProject_ProjectItem$QuriSquiggleLang.setContinuation(ReducerProject_T$QuriSquiggleLang.getItem(project, sourceId), continuation);
    setItem(project, sourceId, newItem);
}
function getResultOption(project, sourceId) {
    return ReducerProject_ProjectItem$QuriSquiggleLang.getResult(ReducerProject_T$QuriSquiggleLang.getItem(project, sourceId));
}
function getResult(project, sourceId) {
    var result = ReducerProject_ProjectItem$QuriSquiggleLang.getResult(ReducerProject_T$QuriSquiggleLang.getItem(project, sourceId));
    if (result !== undefined) {
        return result;
    }
    else {
        return {
            TAG: 1,
            _0: SqError$QuriSquiggleLang.fromMessage(2),
            [Symbol.for("name")]: "Error"
        };
    }
}
function setResult(project, sourceId, value) {
    var newItem = ReducerProject_ProjectItem$QuriSquiggleLang.setResult(ReducerProject_T$QuriSquiggleLang.getItem(project, sourceId), value);
    setItem(project, sourceId, newItem);
}
function parseIncludes(project, sourceId) {
    var newItem = ReducerProject_ProjectItem$QuriSquiggleLang.parseIncludes(ReducerProject_T$QuriSquiggleLang.getItem(project, sourceId));
    setItem(project, sourceId, newItem);
    handleNewTopology(project);
}
function rawParse(project, sourceId) {
    var newItem = ReducerProject_ProjectItem$QuriSquiggleLang.rawParse(ReducerProject_T$QuriSquiggleLang.getItem(project, sourceId));
    setItem(project, sourceId, newItem);
}
function getStdLib(project) {
    return project.stdLib;
}
function setStdLib(project, value) {
    project.stdLib = value;
}
function getEnvironment(project) {
    return project.environment;
}
function setEnvironment(project, value) {
    project.environment = value;
}
function getBindings(project, sourceId) {
    return ReducerProject_ProjectItem$QuriSquiggleLang.getContinuation(ReducerProject_T$QuriSquiggleLang.getItem(project, sourceId));
}
function getBindingsAsRecord(project, sourceId) {
    return Reducer_Namespace$QuriSquiggleLang.toRecord(ReducerProject_ProjectItem$QuriSquiggleLang.getContinuation(ReducerProject_T$QuriSquiggleLang.getItem(project, sourceId)));
}
function getContinuationsBefore(project, sourceId) {
    return E_A$QuriSquiggleLang.fmap(ReducerProject_ProjectItem$QuriSquiggleLang.getPastChain(ReducerProject_T$QuriSquiggleLang.getItem(project, sourceId)), (function (param) {
        return ReducerProject_ProjectItem$QuriSquiggleLang.getContinuation(ReducerProject_T$QuriSquiggleLang.getItem(project, param));
    }));
}
function linkDependencies(project, sourceId) {
    var pastChain = ReducerProject_ProjectItem$QuriSquiggleLang.getPastChain(ReducerProject_T$QuriSquiggleLang.getItem(project, sourceId));
    var namespace = Reducer_Namespace$QuriSquiggleLang.mergeMany(E_A$QuriSquiggleLang.concatMany([
        [project.stdLib],
        E_A$QuriSquiggleLang.fmap(pastChain, (function (param) {
            return ReducerProject_ProjectItem$QuriSquiggleLang.getContinuation(ReducerProject_T$QuriSquiggleLang.getItem(project, param));
        })),
        E_A$QuriSquiggleLang.fmap(pastChain, (function (id) {
            var result = getResult(project, id);
            var tmp;
            tmp = result.TAG === 0 ? result._0 : SqError$QuriSquiggleLang.$$throw(result._0);
            return Reducer_Namespace$QuriSquiggleLang.fromArray([[
                    "__result__",
                    tmp
                ]]);
        }))
    ]));
    var includesAsVariables = ReducerProject_ProjectItem$QuriSquiggleLang.getIncludesAsVariables(ReducerProject_T$QuriSquiggleLang.getItem(project, sourceId));
    return E_A$QuriSquiggleLang.reduce(includesAsVariables, namespace, (function (acc, param) {
        return Reducer_Namespace$QuriSquiggleLang.set(acc, param[0], Reducer_Namespace$QuriSquiggleLang.toRecord(ReducerProject_ProjectItem$QuriSquiggleLang.getContinuation(ReducerProject_T$QuriSquiggleLang.getItem(project, param[1]))));
    }));
}
function doLinkAndRun(project, sourceId) {
    var context = Reducer_Context$QuriSquiggleLang.createContext(linkDependencies(project, sourceId), project.environment);
    var newItem = ReducerProject_ProjectItem$QuriSquiggleLang.run(ReducerProject_T$QuriSquiggleLang.getItem(project, sourceId), context);
    setItem(project, sourceId, newItem);
}
function tryRunWithResult(project, sourceId, rPrevResult) {
    var result = ReducerProject_ProjectItem$QuriSquiggleLang.getResult(ReducerProject_T$QuriSquiggleLang.getItem(project, sourceId));
    if (result !== undefined) {
        return result;
    }
    if (rPrevResult.TAG === 0) {
        doLinkAndRun(project, sourceId);
        return Belt_Option.getWithDefault(ReducerProject_ProjectItem$QuriSquiggleLang.getResult(ReducerProject_T$QuriSquiggleLang.getItem(project, sourceId)), rPrevResult);
    }
    var error = rPrevResult._0;
    setResult(project, sourceId, {
        TAG: 1,
        _0: error,
        [Symbol.for("name")]: "Error"
    });
    return {
        TAG: 1,
        _0: error,
        [Symbol.for("name")]: "Error"
    };
}
function runAll(project) {
    var runOrder = ReducerProject_Topology$QuriSquiggleLang.getRunOrder(project);
    E_A$QuriSquiggleLang.reduce(runOrder, {
        TAG: 0,
        _0: 0,
        [Symbol.for("name")]: "Ok"
    }, (function (currState, currId) {
        return tryRunWithResult(project, currId, currState);
    }));
}
function run(project, sourceId) {
    var runOrder = ReducerProject_Topology$QuriSquiggleLang.getRunOrderFor(project, sourceId);
    E_A$QuriSquiggleLang.reduce(runOrder, {
        TAG: 0,
        _0: 0,
        [Symbol.for("name")]: "Ok"
    }, (function (currState, currId) {
        return tryRunWithResult(project, currId, currState);
    }));
}
function evaluate(sourceCode) {
    var project = createProject(undefined);
    setSource(project, "main", sourceCode);
    runAll(project);
    return [
        Belt_Option.getWithDefault(ReducerProject_ProjectItem$QuriSquiggleLang.getResult(ReducerProject_T$QuriSquiggleLang.getItem(project, "main")), {
            TAG: 0,
            _0: 0,
            [Symbol.for("name")]: "Ok"
        }),
        Reducer_Namespace$QuriSquiggleLang.toMap(ReducerProject_ProjectItem$QuriSquiggleLang.getContinuation(ReducerProject_T$QuriSquiggleLang.getItem(project, "main")))
    ];
}
var Bindings;
var ProjectItem;
var T;
var Topology;
var getItem = ReducerProject_T$QuriSquiggleLang.getItem;
var getSourceIds = ReducerProject_T$QuriSquiggleLang.getSourceIds;
var getDependents = ReducerProject_Topology$QuriSquiggleLang.getDependents;
var getDependencies = ReducerProject_Topology$QuriSquiggleLang.getDependencies;
var getRunOrder = ReducerProject_Topology$QuriSquiggleLang.getRunOrder;
var getRunOrderFor = ReducerProject_Topology$QuriSquiggleLang.getRunOrderFor;
exports.Bindings = Bindings;
exports.ProjectItem = ProjectItem;
exports.T = T;
exports.Topology = Topology;
exports.getItem = getItem;
exports.getSourceIds = getSourceIds;
exports.getDependents = getDependents;
exports.getDependencies = getDependencies;
exports.getRunOrder = getRunOrder;
exports.getRunOrderFor = getRunOrderFor;
exports.createProject = createProject;
exports.setItem = setItem;
exports.touchSource_ = touchSource_;
exports.touchDependents = touchDependents;
exports.touchSource = touchSource;
exports.handleNewTopology = handleNewTopology;
exports.getSource = getSource;
exports.setSource = setSource;
exports.removeSource = removeSource;
exports.clean = clean;
exports.cleanAll = cleanAll;
exports.cleanResults = cleanResults;
exports.cleanAllResults = cleanAllResults;
exports.getIncludes = getIncludes;
exports.getPastChain = getPastChain;
exports.getIncludesAsVariables = getIncludesAsVariables;
exports.getDirectIncludes = getDirectIncludes;
exports.setContinues = setContinues;
exports.getContinues = getContinues;
exports.removeContinues = removeContinues;
exports.setContinuation = setContinuation;
exports.getResultOption = getResultOption;
exports.getResult = getResult;
exports.setResult = setResult;
exports.parseIncludes = parseIncludes;
exports.rawParse = rawParse;
exports.getStdLib = getStdLib;
exports.setStdLib = setStdLib;
exports.getEnvironment = getEnvironment;
exports.setEnvironment = setEnvironment;
exports.getBindings = getBindings;
exports.getBindingsAsRecord = getBindingsAsRecord;
exports.getContinuationsBefore = getContinuationsBefore;
exports.linkDependencies = linkDependencies;
exports.doLinkAndRun = doLinkAndRun;
exports.tryRunWithResult = tryRunWithResult;
exports.runAll = runAll;
exports.run = run;
exports.evaluate = evaluate;
//# sourceMappingURL=ReducerProject.bs.js.map