'use strict';
var Curry = require("@rescript/std/lib/js/curry.js");
var Caml_array = require("@rescript/std/lib/js/caml_array.js");
var E_A$QuriSquiggleLang = require("../Utility/E/E_A.bs.js");
var SqError$QuriSquiggleLang = require("../SqError.bs.js");
var Reducer_Context$QuriSquiggleLang = require("./Reducer_Context.bs.js");
var Reducer_Bindings$QuriSquiggleLang = require("./Reducer_Bindings.bs.js");
var Reducer_FrameStack$QuriSquiggleLang = require("./Reducer_FrameStack.bs.js");
function makeLambda(name, parameters, bindings, body, $$location) {
    var lambda = function ($$arguments, context, reducer) {
        var argsLength = E_A$QuriSquiggleLang.length($$arguments);
        var parametersLength = E_A$QuriSquiggleLang.length(parameters);
        if (argsLength !== parametersLength) {
            SqError$QuriSquiggleLang.Message.$$throw({
                TAG: 0,
                _0: undefined,
                _1: parametersLength,
                _2: argsLength,
                [Symbol.for("name")]: "REArityError"
            });
        }
        var localBindings = Reducer_Bindings$QuriSquiggleLang.extend(bindings);
        var localBindingsWithParameters = E_A$QuriSquiggleLang.reducei(parameters, localBindings, (function (currentBindings, parameter, index) {
            return Reducer_Bindings$QuriSquiggleLang.set(currentBindings, parameter, Caml_array.get($$arguments, index));
        }));
        var lambdaContext_environment = context.environment;
        var lambdaContext_frameStack = context.frameStack;
        var lambdaContext_inFunction = context.inFunction;
        var lambdaContext = {
            bindings: localBindingsWithParameters,
            environment: lambdaContext_environment,
            frameStack: lambdaContext_frameStack,
            inFunction: lambdaContext_inFunction
        };
        return Curry._2(reducer, body, lambdaContext)[0];
    };
    return {
        TAG: 0,
        parameters: parameters,
        body: lambda,
        location: $$location,
        name: name,
        [Symbol.for("name")]: "FnLambda"
    };
}
function makeFFILambda(name, body) {
    return {
        TAG: 1,
        body: body,
        name: name,
        [Symbol.for("name")]: "FnBuiltin"
    };
}
function parameters(t) {
    if (t.TAG === 0) {
        return t.parameters;
    }
    else {
        return ["..."];
    }
}
function doLambdaCallFrom(t, args, context, reducer, $$location) {
    var newContext_bindings = context.bindings;
    var newContext_environment = context.environment;
    var newContext_frameStack = Reducer_FrameStack$QuriSquiggleLang.extend(context.frameStack, Reducer_Context$QuriSquiggleLang.currentFunctionName(context), $$location);
    var newContext_inFunction = t;
    var newContext = {
        bindings: newContext_bindings,
        environment: newContext_environment,
        frameStack: newContext_frameStack,
        inFunction: newContext_inFunction
    };
    return SqError$QuriSquiggleLang.rethrowWithFrameStack((function (param) {
        if (t.TAG === 0) {
            return Curry._3(t.body, args, newContext, reducer);
        }
        else {
            return Curry._3(t.body, args, newContext, reducer);
        }
    }), newContext_frameStack);
}
function doLambdaCall(t, args, context, reducer) {
    return doLambdaCallFrom(t, args, context, reducer, undefined);
}
exports.makeLambda = makeLambda;
exports.makeFFILambda = makeFFILambda;
exports.parameters = parameters;
exports.doLambdaCallFrom = doLambdaCallFrom;
exports.doLambdaCall = doLambdaCall;
//# sourceMappingURL=Reducer_Lambda.bs.js.map