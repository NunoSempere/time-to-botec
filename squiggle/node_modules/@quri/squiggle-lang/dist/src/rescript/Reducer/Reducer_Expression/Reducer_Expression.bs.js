'use strict';
var Belt_Result = require("@rescript/std/lib/js/belt_Result.js");
var Belt_MapString = require("@rescript/std/lib/js/belt_MapString.js");
var Caml_js_exceptions = require("@rescript/std/lib/js/caml_js_exceptions.js");
var E_A$QuriSquiggleLang = require("../../Utility/E/E_A.bs.js");
var E_R$QuriSquiggleLang = require("../../Utility/E/E_R.bs.js");
var SqError$QuriSquiggleLang = require("../../SqError.bs.js");
var Reducer_Value$QuriSquiggleLang = require("../Reducer_Value.bs.js");
var Reducer_Lambda$QuriSquiggleLang = require("../Reducer_Lambda.bs.js");
var Reducer_Context$QuriSquiggleLang = require("../Reducer_Context.bs.js");
var Reducer_Bindings$QuriSquiggleLang = require("../Reducer_Bindings.bs.js");
var Reducer_FrameStack$QuriSquiggleLang = require("../Reducer_FrameStack.bs.js");
var Reducer_Peggy_Parse$QuriSquiggleLang = require("../Reducer_Peggy/Reducer_Peggy_Parse.bs.js");
var SquiggleLibrary_StdLib$QuriSquiggleLang = require("../../SquiggleLibrary/SquiggleLibrary_StdLib.bs.js");
var Reducer_Peggy_ToExpression$QuriSquiggleLang = require("../Reducer_Peggy/Reducer_Peggy_ToExpression.bs.js");
function toLocation(expression) {
    return expression.ast.location;
}
function throwFrom(error, expression, context) {
    return SqError$QuriSquiggleLang.throwMessageWithFrameStack(error, Reducer_FrameStack$QuriSquiggleLang.extend(context.frameStack, Reducer_Context$QuriSquiggleLang.currentFunctionName(context), expression.ast.location));
}
function evaluate(_expression, context) {
    while (true) {
        var expression = _expression;
        var statements = expression.content;
        switch (statements.TAG | 0) {
            case 0:
                var innerContext_bindings = Reducer_Bindings$QuriSquiggleLang.extend(context.bindings);
                var innerContext_environment = context.environment;
                var innerContext_frameStack = context.frameStack;
                var innerContext_inFunction = context.inFunction;
                var innerContext = {
                    bindings: innerContext_bindings,
                    environment: innerContext_environment,
                    frameStack: innerContext_frameStack,
                    inFunction: innerContext_inFunction
                };
                var match = E_A$QuriSquiggleLang.reduce(statements._0, [
                    0,
                    innerContext
                ], (function (param, statement) {
                    return evaluate(statement, param[1]);
                }));
                return [
                    match[0],
                    context
                ];
            case 1:
                var match$1 = E_A$QuriSquiggleLang.reduce(statements._0, [
                    0,
                    context
                ], (function (param, statement) {
                    return evaluate(statement, param[1]);
                }));
                return [
                    match$1[0],
                    match$1[1]
                ];
            case 2:
                var value = {
                    TAG: 0,
                    _0: E_A$QuriSquiggleLang.fmap(statements._0, (function (element) {
                        return evaluate(element, context)[0];
                    })),
                    [Symbol.for("name")]: "IEvArray"
                };
                return [
                    value,
                    context
                ];
            case 3:
                var value$1 = {
                    TAG: 7,
                    _0: Belt_MapString.fromArray(E_A$QuriSquiggleLang.fmap(statements._0, (function (expression) {
                        return function (param) {
                            var match = evaluate(param[0], context);
                            var key = match[0];
                            var keyString;
                            keyString = typeof key === "number" || key.TAG !== 8 ? throwFrom({
                                TAG: 15,
                                _0: "Record keys must be strings",
                                [Symbol.for("name")]: "REOther"
                            }, expression, context) : key._0;
                            var match$1 = evaluate(param[1], context);
                            return [
                                keyString,
                                match$1[0]
                            ];
                        };
                    }(expression)))),
                    [Symbol.for("name")]: "IEvRecord"
                };
                return [
                    value$1,
                    context
                ];
            case 4:
                var name = statements._0;
                var v = Reducer_Bindings$QuriSquiggleLang.get(context.bindings, name);
                if (v !== undefined) {
                    return [
                        v,
                        context
                    ];
                }
                else {
                    return throwFrom({
                        TAG: 11,
                        _0: name,
                        [Symbol.for("name")]: "RESymbolNotFound"
                    }, expression, context);
                }
            case 5:
                var match$2 = evaluate(statements._0, context);
                var predicateResult = match$2[0];
                if (typeof predicateResult === "number") {
                    return throwFrom({
                        TAG: 3,
                        _0: "Boolean",
                        _1: "",
                        [Symbol.for("name")]: "REExpectedType"
                    }, expression, context);
                }
                if (predicateResult.TAG !== 1) {
                    return throwFrom({
                        TAG: 3,
                        _0: "Boolean",
                        _1: "",
                        [Symbol.for("name")]: "REExpectedType"
                    }, expression, context);
                }
                _expression = predicateResult._0 ? statements._1 : statements._2;
                continue;
            case 6:
                var match$3 = evaluate(statements._1, context);
                return [
                    0,
                    {
                        bindings: Reducer_Bindings$QuriSquiggleLang.set(context.bindings, statements._0, match$3[0]),
                        environment: context.environment,
                        frameStack: context.frameStack,
                        inFunction: context.inFunction
                    }
                ];
            case 7:
                var match$4 = evaluate(statements._0, context);
                var lambda = match$4[0];
                var argValues = E_A$QuriSquiggleLang.fmap(statements._1, (function (arg) {
                    return evaluate(arg, context)[0];
                }));
                if (typeof lambda === "number") {
                    return throwFrom({
                        TAG: 8,
                        _0: Reducer_Value$QuriSquiggleLang.toString(lambda),
                        [Symbol.for("name")]: "RENotAFunction"
                    }, expression, context);
                }
                if (lambda.TAG !== 5) {
                    return throwFrom({
                        TAG: 8,
                        _0: Reducer_Value$QuriSquiggleLang.toString(lambda),
                        [Symbol.for("name")]: "RENotAFunction"
                    }, expression, context);
                }
                var result = Reducer_Lambda$QuriSquiggleLang.doLambdaCallFrom(lambda._0, argValues, context, evaluate, expression.ast.location);
                return [
                    result,
                    context
                ];
            case 8:
                return [
                    {
                        TAG: 5,
                        _0: Reducer_Lambda$QuriSquiggleLang.makeLambda(statements._2, statements._0, context.bindings, statements._1, expression.ast.location),
                        [Symbol.for("name")]: "IEvLambda"
                    },
                    context
                ];
            case 9:
                return [
                    statements._0,
                    context
                ];
        }
    }
    ;
}
function parse(peggyCode) {
    return Belt_Result.map(Reducer_Peggy_Parse$QuriSquiggleLang.parse(peggyCode, "main"), Reducer_Peggy_ToExpression$QuriSquiggleLang.fromNode);
}
function createDefaultContext(param) {
    return Reducer_Context$QuriSquiggleLang.createContext(SquiggleLibrary_StdLib$QuriSquiggleLang.stdLib, Reducer_Context$QuriSquiggleLang.defaultEnvironment);
}
function evaluate$1(expression) {
    var context = Reducer_Context$QuriSquiggleLang.createContext(SquiggleLibrary_StdLib$QuriSquiggleLang.stdLib, Reducer_Context$QuriSquiggleLang.defaultEnvironment);
    try {
        var match = evaluate(expression, context);
        return {
            TAG: 0,
            _0: match[0],
            [Symbol.for("name")]: "Ok"
        };
    }
    catch (raw_exn) {
        var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
        return {
            TAG: 1,
            _0: SqError$QuriSquiggleLang.fromException(exn),
            [Symbol.for("name")]: "Error"
        };
    }
}
function evaluateString(peggyCode) {
    return Belt_Result.flatMap(E_R$QuriSquiggleLang.errMap(parse(peggyCode), SqError$QuriSquiggleLang.fromParseError), evaluate$1);
}
var BackCompatible = {
    parse: parse,
    createDefaultContext: createDefaultContext,
    evaluate: evaluate$1,
    evaluateString: evaluateString
};
var Bindings;
var Result;
var T;
exports.Bindings = Bindings;
exports.Result = Result;
exports.T = T;
exports.toLocation = toLocation;
exports.throwFrom = throwFrom;
exports.evaluate = evaluate;
exports.BackCompatible = BackCompatible;
//# sourceMappingURL=Reducer_Expression.bs.js.map