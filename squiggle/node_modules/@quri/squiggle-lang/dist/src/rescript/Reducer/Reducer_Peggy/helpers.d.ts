import { LocationRange } from "peggy";
export declare const toFunction: {
    "+": string;
    "-": string;
    "!=": string;
    ".-": string;
    ".*": string;
    "./": string;
    ".^": string;
    ".+": string;
    "*": string;
    "/": string;
    "&&": string;
    "^": string;
    "<": string;
    "<=": string;
    "==": string;
    ">": string;
    ">=": string;
    "||": string;
    to: string;
};
export declare const unaryToFunction: {
    "-": string;
    "!": string;
    ".-": string;
};
export declare const postOperatorToFunction: {
    ".": string;
    "()": string;
    "[]": string;
};
declare type Node = {
    location: LocationRange;
};
declare type NodeBlock = Node & {
    type: "Block";
    statements: AnyPeggyNode[];
};
declare type NodeProgram = Node & {
    type: "Program";
    statements: AnyPeggyNode[];
};
declare type NodeArray = Node & {
    type: "Array";
    elements: AnyPeggyNode[];
};
declare type NodeRecord = Node & {
    type: "Record";
    elements: NodeKeyValue[];
};
declare type NodeCall = Node & {
    type: "Call";
    fn: AnyPeggyNode;
    args: AnyPeggyNode[];
};
declare type NodeFloat = Node & {
    type: "Float";
    value: number;
};
declare type NodeInteger = Node & {
    type: "Integer";
    value: number;
};
declare type NodeIdentifier = Node & {
    type: "Identifier";
    value: string;
};
declare type NodeLetStatement = Node & {
    type: "LetStatement";
    variable: NodeIdentifier;
    value: AnyPeggyNode;
};
declare type NodeLambda = Node & {
    type: "Lambda";
    args: AnyPeggyNode[];
    body: AnyPeggyNode;
    name?: string;
};
declare type NodeTernary = Node & {
    type: "Ternary";
    condition: AnyPeggyNode;
    trueExpression: AnyPeggyNode;
    falseExpression: AnyPeggyNode;
};
declare type NodeKeyValue = Node & {
    type: "KeyValue";
    key: AnyPeggyNode;
    value: AnyPeggyNode;
};
declare type NodeString = Node & {
    type: "String";
    value: string;
    location?: LocationRange;
};
declare type NodeBoolean = Node & {
    type: "Boolean";
    value: boolean;
};
declare type NodeVoid = Node & {
    type: "Void";
};
export declare type AnyPeggyNode = NodeArray | NodeRecord | NodeBlock | NodeProgram | NodeCall | NodeFloat | NodeInteger | NodeIdentifier | NodeLetStatement | NodeLambda | NodeTernary | NodeKeyValue | NodeString | NodeBoolean | NodeVoid;
export declare function makeFunctionCall(fn: string, args: AnyPeggyNode[], location: LocationRange): NodeCall;
export declare function constructArray(elements: AnyPeggyNode[], location: LocationRange): NodeArray;
export declare function constructRecord(elements: NodeKeyValue[], location: LocationRange): NodeRecord;
export declare function nodeBlock(statements: AnyPeggyNode[], location: LocationRange): NodeBlock;
export declare function nodeProgram(statements: AnyPeggyNode[], location: LocationRange): NodeProgram;
export declare function nodeBoolean(value: boolean, location: LocationRange): NodeBoolean;
export declare function nodeCall(fn: AnyPeggyNode, args: AnyPeggyNode[], location: LocationRange): NodeCall;
export declare function nodeFloat(value: number, location: LocationRange): NodeFloat;
export declare function nodeIdentifier(value: string, location: LocationRange): NodeIdentifier;
export declare function nodeInteger(value: number, location: LocationRange): NodeInteger;
export declare function nodeKeyValue(key: AnyPeggyNode, value: AnyPeggyNode, location: LocationRange): NodeKeyValue;
export declare function nodeLambda(args: AnyPeggyNode[], body: AnyPeggyNode, location: LocationRange, name?: NodeIdentifier): NodeLambda;
export declare function nodeLetStatement(variable: NodeIdentifier, value: AnyPeggyNode, location: LocationRange): NodeLetStatement;
export declare function nodeModuleIdentifier(value: string, location: LocationRange): {
    type: string;
    value: string;
    location: LocationRange;
};
export declare function nodeString(value: string, location: LocationRange): NodeString;
export declare function nodeTernary(condition: AnyPeggyNode, trueExpression: AnyPeggyNode, falseExpression: AnyPeggyNode, location: LocationRange): NodeTernary;
export declare function nodeVoid(location: LocationRange): NodeVoid;
export {};
