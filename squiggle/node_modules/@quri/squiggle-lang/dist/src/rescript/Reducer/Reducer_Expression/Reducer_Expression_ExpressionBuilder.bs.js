'use strict';
function eArray(anArray) {
    return {
        TAG: 2,
        _0: anArray,
        [Symbol.for("name")]: "EArray"
    };
}
function eBool(aBool) {
    return {
        TAG: 9,
        _0: {
            TAG: 1,
            _0: aBool,
            [Symbol.for("name")]: "IEvBool"
        },
        [Symbol.for("name")]: "EValue"
    };
}
function eCall(fn, args) {
    return {
        TAG: 7,
        _0: fn,
        _1: args,
        [Symbol.for("name")]: "ECall"
    };
}
function eLambda(parameters, expr, name) {
    return {
        TAG: 8,
        _0: parameters,
        _1: expr,
        _2: name,
        [Symbol.for("name")]: "ELambda"
    };
}
function eNumber(aNumber) {
    return {
        TAG: 9,
        _0: {
            TAG: 6,
            _0: aNumber,
            [Symbol.for("name")]: "IEvNumber"
        },
        [Symbol.for("name")]: "EValue"
    };
}
function eRecord(aMap) {
    return {
        TAG: 3,
        _0: aMap,
        [Symbol.for("name")]: "ERecord"
    };
}
function eString(aString) {
    return {
        TAG: 9,
        _0: {
            TAG: 8,
            _0: aString,
            [Symbol.for("name")]: "IEvString"
        },
        [Symbol.for("name")]: "EValue"
    };
}
function eSymbol(name) {
    return {
        TAG: 4,
        _0: name,
        [Symbol.for("name")]: "ESymbol"
    };
}
function eBlock(exprs) {
    return {
        TAG: 0,
        _0: exprs,
        [Symbol.for("name")]: "EBlock"
    };
}
function eProgram(exprs) {
    return {
        TAG: 1,
        _0: exprs,
        [Symbol.for("name")]: "EProgram"
    };
}
function eLetStatement(symbol, valueExpression) {
    return {
        TAG: 6,
        _0: symbol,
        _1: valueExpression,
        [Symbol.for("name")]: "EAssign"
    };
}
function eTernary(predicate, trueCase, falseCase) {
    return {
        TAG: 5,
        _0: predicate,
        _1: trueCase,
        _2: falseCase,
        [Symbol.for("name")]: "ETernary"
    };
}
function eIdentifier(name) {
    return {
        TAG: 4,
        _0: name,
        [Symbol.for("name")]: "ESymbol"
    };
}
var T;
var eVoid = {
    TAG: 9,
    _0: 0,
    [Symbol.for("name")]: "EValue"
};
exports.T = T;
exports.eArray = eArray;
exports.eBool = eBool;
exports.eCall = eCall;
exports.eLambda = eLambda;
exports.eNumber = eNumber;
exports.eRecord = eRecord;
exports.eString = eString;
exports.eSymbol = eSymbol;
exports.eBlock = eBlock;
exports.eProgram = eProgram;
exports.eLetStatement = eLetStatement;
exports.eTernary = eTernary;
exports.eIdentifier = eIdentifier;
exports.eVoid = eVoid;
//# sourceMappingURL=Reducer_Expression_ExpressionBuilder.bs.js.map