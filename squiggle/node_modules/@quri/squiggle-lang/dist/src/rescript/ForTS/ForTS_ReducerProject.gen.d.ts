import type { environment as ForTS_Distribution_Environment_environment } from '../../../src/rescript/ForTS/ForTS_Distribution/ForTS_Distribution_Environment.gen';
import type { project as ReducerProject_T_project } from '../../../src/rescript/ReducerProject/ReducerProject_T.gen';
import type { squiggleValue_Record as ForTS_SquiggleValue_squiggleValue_Record } from '../../../src/rescript/ForTS/ForTS_SquiggleValue/ForTS_SquiggleValue.gen';
import type { squiggleValue as ForTS_SquiggleValue_squiggleValue } from '../../../src/rescript/ForTS/ForTS_SquiggleValue/ForTS_SquiggleValue.gen';
import type { t as SqError_t } from '../../../src/rescript/SqError.gen';
export declare type reducerProject = ReducerProject_T_project;
export declare type error = SqError_t;
export declare type squiggleValue = ForTS_SquiggleValue_squiggleValue;
export declare type squiggleValue_Record = ForTS_SquiggleValue_squiggleValue_Record;
export declare type environment = ForTS_Distribution_Environment_environment;
export declare const createProject: () => reducerProject;
export declare const getSourceIds: (project: reducerProject) => string[];
export declare const setSource: (project: reducerProject, sourceId: string, value: string) => void;
export declare const removeSource: (project: reducerProject, sourceId: string) => void;
export declare const getSource: (project: reducerProject, sourceId: string) => (null | undefined | string);
export declare const touchSource: (project: reducerProject, sourceId: string) => void;
export declare const clean: (project: reducerProject, sourceId: string) => void;
export declare const cleanAll: (project: reducerProject) => void;
export declare const cleanResults: (project: reducerProject, sourceId: string) => void;
export declare const cleanAllResults: (project: reducerProject) => void;
export declare const getIncludes: (project: reducerProject, sourceId: string) => {
    tag: "Ok";
    value: string[];
} | {
    tag: "Error";
    value: error;
};
export declare const getPastChain: (project: reducerProject, sourceId: string) => string[];
export declare const getContinues: (project: reducerProject, sourceId: string) => string[];
export declare const setContinues: (project: reducerProject, sourceId: string, continues: string[]) => void;
export declare const getDependencies: (project: reducerProject, sourceId: string) => string[];
export declare const getDependents: (project: reducerProject, sourceId: string) => string[];
export declare const getRunOrder: (project: reducerProject) => string[];
export declare const getRunOrderFor: (project: reducerProject, sourceId: string) => string[];
export declare const parseIncludes: (project: reducerProject, sourceId: string) => void;
export declare const rawParse: (project: reducerProject, sourceId: string) => void;
export declare const run: (project: reducerProject, sourceId: string) => void;
export declare const runAll: (project: reducerProject) => void;
export declare const getBindings: (project: reducerProject, sourceId: string) => squiggleValue_Record;
export declare const getResult: (project: reducerProject, sourceId: string) => {
    tag: "Ok";
    value: squiggleValue;
} | {
    tag: "Error";
    value: error;
};
export declare const evaluate: (sourceCode: string) => [
    {
        tag: "Ok";
        value: squiggleValue;
    } | {
        tag: "Error";
        value: error;
    },
    squiggleValue_Record
];
export declare const setEnvironment: (project: reducerProject, environment: environment) => void;
export declare const getEnvironment: (project: reducerProject) => environment;
