"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.toString = exports.toPointSet = exports.normalize = exports.pdf = exports.inv = exports.cdf = exports.sample = exports.variance = exports.stdev = exports.mean = exports.getSymbolic = exports.getSampleSet = exports.getPointSet = exports.getTag = exports.defaultEnvironment = void 0;
const Curry = require('@rescript/std/lib/js/curry.js');
const ForTS_DistributionBS = require('./ForTS_Distribution.bs');
exports.defaultEnvironment = ForTS_DistributionBS.defaultEnvironment;
exports.getTag = ForTS_DistributionBS.getTag;
exports.getPointSet = ForTS_DistributionBS.getPointSet;
exports.getSampleSet = ForTS_DistributionBS.getSampleSet;
exports.getSymbolic = ForTS_DistributionBS.getSymbolic;
const mean = function (Arg1, Arg2) {
    const result = Curry._2(ForTS_DistributionBS.mean, Arg1.env, Arg2);
    return result.TAG === 0
        ? { tag: "Ok", value: result._0 }
        : { tag: "Error", value: result._0 };
};
exports.mean = mean;
const stdev = function (Arg1, Arg2) {
    const result = Curry._2(ForTS_DistributionBS.stdev, Arg1.env, Arg2);
    return result.TAG === 0
        ? { tag: "Ok", value: result._0 }
        : { tag: "Error", value: result._0 };
};
exports.stdev = stdev;
const variance = function (Arg1, Arg2) {
    const result = Curry._2(ForTS_DistributionBS.variance, Arg1.env, Arg2);
    return result.TAG === 0
        ? { tag: "Ok", value: result._0 }
        : { tag: "Error", value: result._0 };
};
exports.variance = variance;
const sample = function (Arg1, Arg2) {
    const result = Curry._2(ForTS_DistributionBS.sample, Arg1.env, Arg2);
    return result.TAG === 0
        ? { tag: "Ok", value: result._0 }
        : { tag: "Error", value: result._0 };
};
exports.sample = sample;
const cdf = function (Arg1, Arg2, Arg3) {
    const result = Curry._3(ForTS_DistributionBS.cdf, Arg1.env, Arg2, Arg3);
    return result.TAG === 0
        ? { tag: "Ok", value: result._0 }
        : { tag: "Error", value: result._0 };
};
exports.cdf = cdf;
const inv = function (Arg1, Arg2, Arg3) {
    const result = Curry._3(ForTS_DistributionBS.inv, Arg1.env, Arg2, Arg3);
    return result.TAG === 0
        ? { tag: "Ok", value: result._0 }
        : { tag: "Error", value: result._0 };
};
exports.inv = inv;
const pdf = function (Arg1, Arg2, Arg3) {
    const result = Curry._3(ForTS_DistributionBS.pdf, Arg1.env, Arg2, Arg3);
    return result.TAG === 0
        ? { tag: "Ok", value: result._0 }
        : { tag: "Error", value: result._0 };
};
exports.pdf = pdf;
const normalize = function (Arg1, Arg2) {
    const result = Curry._2(ForTS_DistributionBS.normalize, Arg1.env, Arg2);
    return result.TAG === 0
        ? { tag: "Ok", value: result._0 }
        : { tag: "Error", value: result._0 };
};
exports.normalize = normalize;
const toPointSet = function (Arg1, Arg2) {
    const result = Curry._2(ForTS_DistributionBS.toPointSet, Arg1, Arg2);
    return result.TAG === 0
        ? { tag: "Ok", value: result._0 }
        : { tag: "Error", value: result._0 };
};
exports.toPointSet = toPointSet;
exports.toString = ForTS_DistributionBS.toString;
//# sourceMappingURL=ForTS_Distribution.gen.js.map