import type { distributionTag as $$distributionTag } from './ForTS_Distribution_tag';
import type { env as GenericDist_env } from '../../../../src/rescript/Distributions/GenericDist.gen';
import type { environment as ForTS_Distribution_Environment_environment } from './ForTS_Distribution_Environment.gen';
import type { error as DistributionTypes_error } from '../../../../src/rescript/Distributions/DistributionTypes.gen';
import type { error as GenericDist_error } from '../../../../src/rescript/Distributions/GenericDist.gen';
import type { genericDist as DistributionTypes_genericDist } from '../../../../src/rescript/Distributions/DistributionTypes.gen';
import type { pointSetDist as PointSetTypes_pointSetDist } from '../../../../src/rescript/Distributions/PointSetDist/PointSetTypes.gen';
import type { pointSetDistribution as ForTS_Distribution_PointSetDistribution_pointSetDistribution } from './ForTS_Distribution_PointSetDistribution.gen';
import type { sampleSetDistribution as ForTS_Distribution_SampleSetDistribution_sampleSetDistribution } from './ForTS_Distribution_SampleSetDistribution.gen';
import type { symbolicDistribution as ForTS_Distribution_SymbolicDistribution_symbolicDistribution } from './ForTS_Distribution_SymbolicDistribution.gen';
export declare type distribution = DistributionTypes_genericDist;
export declare type distributionError = DistributionTypes_error;
export declare type pointSetDistribution = ForTS_Distribution_PointSetDistribution_pointSetDistribution;
export declare type sampleSetDistribution = ForTS_Distribution_SampleSetDistribution_sampleSetDistribution;
export declare type symbolicDistribution = ForTS_Distribution_SymbolicDistribution_symbolicDistribution;
export declare type environment = ForTS_Distribution_Environment_environment;
export declare type distributionTag = $$distributionTag;
export declare const defaultEnvironment: environment;
export declare const getTag: (variant: distribution) => distributionTag;
export declare const getPointSet: (variant: distribution) => (null | undefined | pointSetDistribution);
export declare const getSampleSet: (variant: distribution) => (null | undefined | sampleSetDistribution);
export declare const getSymbolic: (variant: distribution) => (null | undefined | symbolicDistribution);
export declare const mean: (_1: {
    readonly env: GenericDist_env;
}, _2: DistributionTypes_genericDist) => {
    tag: "Ok";
    value: number;
} | {
    tag: "Error";
    value: DistributionTypes_error;
};
export declare const stdev: (_1: {
    readonly env: GenericDist_env;
}, _2: DistributionTypes_genericDist) => {
    tag: "Ok";
    value: number;
} | {
    tag: "Error";
    value: DistributionTypes_error;
};
export declare const variance: (_1: {
    readonly env: GenericDist_env;
}, _2: DistributionTypes_genericDist) => {
    tag: "Ok";
    value: number;
} | {
    tag: "Error";
    value: DistributionTypes_error;
};
export declare const sample: (_1: {
    readonly env: GenericDist_env;
}, _2: DistributionTypes_genericDist) => {
    tag: "Ok";
    value: number;
} | {
    tag: "Error";
    value: DistributionTypes_error;
};
export declare const cdf: (_1: {
    readonly env: GenericDist_env;
}, _2: DistributionTypes_genericDist, _3: number) => {
    tag: "Ok";
    value: number;
} | {
    tag: "Error";
    value: DistributionTypes_error;
};
export declare const inv: (_1: {
    readonly env: GenericDist_env;
}, _2: DistributionTypes_genericDist, _3: number) => {
    tag: "Ok";
    value: number;
} | {
    tag: "Error";
    value: DistributionTypes_error;
};
export declare const pdf: (_1: {
    readonly env: GenericDist_env;
}, _2: DistributionTypes_genericDist, _3: number) => {
    tag: "Ok";
    value: number;
} | {
    tag: "Error";
    value: DistributionTypes_error;
};
export declare const normalize: (_1: {
    readonly env: GenericDist_env;
}, _2: DistributionTypes_genericDist) => {
    tag: "Ok";
    value: DistributionTypes_genericDist;
} | {
    tag: "Error";
    value: DistributionTypes_error;
};
export declare const toPointSet: (variant: distribution, env: environment) => {
    tag: "Ok";
    value: PointSetTypes_pointSetDist;
} | {
    tag: "Error";
    value: GenericDist_error;
};
export declare const toString: (variant: distribution) => string;
