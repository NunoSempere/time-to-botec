'use strict';
var ForTS_SquiggleValue_tag = require("./ForTS_SquiggleValue_tag");
var Reducer_Value$QuriSquiggleLang = require("../../Reducer/Reducer_Value.bs.js");
var svtArray_ = ForTS_SquiggleValue_tag.squiggleValueTag.Array;
var svtBool_ = ForTS_SquiggleValue_tag.squiggleValueTag.Bool;
var svtDate_ = ForTS_SquiggleValue_tag.squiggleValueTag.Date;
var svtDeclaration_ = ForTS_SquiggleValue_tag.squiggleValueTag.Declaration;
var svtDistribution_ = ForTS_SquiggleValue_tag.squiggleValueTag.Distribution;
var svtLambda_ = ForTS_SquiggleValue_tag.squiggleValueTag.Lambda;
var svtNumber_ = ForTS_SquiggleValue_tag.squiggleValueTag.Number;
var svtRecord_ = ForTS_SquiggleValue_tag.squiggleValueTag.Record;
var svtString_ = ForTS_SquiggleValue_tag.squiggleValueTag.String;
var svtTimeDuration_ = ForTS_SquiggleValue_tag.squiggleValueTag.TimeDuration;
var svtVoid_ = ForTS_SquiggleValue_tag.squiggleValueTag.Void;
function getTag(variant) {
    if (typeof variant === "number") {
        return svtVoid_;
    }
    switch (variant.TAG | 0) {
        case 0:
            return svtArray_;
        case 1:
            return svtBool_;
        case 2:
            return svtDate_;
        case 3:
            return svtDeclaration_;
        case 4:
            return svtDistribution_;
        case 5:
            return svtLambda_;
        case 6:
            return svtNumber_;
        case 7:
            return svtRecord_;
        case 8:
            return svtString_;
        case 9:
            return svtTimeDuration_;
    }
}
var toString = Reducer_Value$QuriSquiggleLang.toString;
var toStringResult = Reducer_Value$QuriSquiggleLang.toStringResult;
function getArray(variant) {
    if (typeof variant === "number") {
        throw {
            RE_EXN_ID: "Not_found",
            Error: new Error()
        };
    }
    if (variant.TAG === 0) {
        return variant._0;
    }
    throw {
        RE_EXN_ID: "Not_found",
        Error: new Error()
    };
}
function getBool(variant) {
    if (typeof variant === "number") {
        throw {
            RE_EXN_ID: "Not_found",
            Error: new Error()
        };
    }
    if (variant.TAG === 1) {
        return variant._0;
    }
    throw {
        RE_EXN_ID: "Not_found",
        Error: new Error()
    };
}
function getDate(variant) {
    if (typeof variant === "number") {
        throw {
            RE_EXN_ID: "Not_found",
            Error: new Error()
        };
    }
    if (variant.TAG === 2) {
        return variant._0;
    }
    throw {
        RE_EXN_ID: "Not_found",
        Error: new Error()
    };
}
function getDeclaration(variant) {
    if (typeof variant === "number") {
        throw {
            RE_EXN_ID: "Not_found",
            Error: new Error()
        };
    }
    if (variant.TAG === 3) {
        return variant._0;
    }
    throw {
        RE_EXN_ID: "Not_found",
        Error: new Error()
    };
}
function getDistribution(variant) {
    if (typeof variant === "number") {
        throw {
            RE_EXN_ID: "Not_found",
            Error: new Error()
        };
    }
    if (variant.TAG === 4) {
        return variant._0;
    }
    throw {
        RE_EXN_ID: "Not_found",
        Error: new Error()
    };
}
function getLambda(variant) {
    if (typeof variant === "number") {
        throw {
            RE_EXN_ID: "Not_found",
            Error: new Error()
        };
    }
    if (variant.TAG === 5) {
        return variant._0;
    }
    throw {
        RE_EXN_ID: "Not_found",
        Error: new Error()
    };
}
function getNumber(variant) {
    if (typeof variant === "number") {
        throw {
            RE_EXN_ID: "Not_found",
            Error: new Error()
        };
    }
    if (variant.TAG === 6) {
        return variant._0;
    }
    throw {
        RE_EXN_ID: "Not_found",
        Error: new Error()
    };
}
function getRecord(variant) {
    if (typeof variant === "number") {
        throw {
            RE_EXN_ID: "Not_found",
            Error: new Error()
        };
    }
    if (variant.TAG === 7) {
        return variant._0;
    }
    throw {
        RE_EXN_ID: "Not_found",
        Error: new Error()
    };
}
function getString(variant) {
    if (typeof variant === "number") {
        throw {
            RE_EXN_ID: "Not_found",
            Error: new Error()
        };
    }
    if (variant.TAG === 8) {
        return variant._0;
    }
    throw {
        RE_EXN_ID: "Not_found",
        Error: new Error()
    };
}
function getTimeDuration(variant) {
    if (typeof variant === "number") {
        throw {
            RE_EXN_ID: "Not_found",
            Error: new Error()
        };
    }
    if (variant.TAG === 9) {
        return variant._0;
    }
    throw {
        RE_EXN_ID: "Not_found",
        Error: new Error()
    };
}
exports.svtArray_ = svtArray_;
exports.svtBool_ = svtBool_;
exports.svtDate_ = svtDate_;
exports.svtDeclaration_ = svtDeclaration_;
exports.svtDistribution_ = svtDistribution_;
exports.svtLambda_ = svtLambda_;
exports.svtNumber_ = svtNumber_;
exports.svtRecord_ = svtRecord_;
exports.svtString_ = svtString_;
exports.svtTimeDuration_ = svtTimeDuration_;
exports.svtVoid_ = svtVoid_;
exports.getTag = getTag;
exports.toString = toString;
exports.toStringResult = toStringResult;
exports.getArray = getArray;
exports.getBool = getBool;
exports.getDate = getDate;
exports.getDeclaration = getDeclaration;
exports.getDistribution = getDistribution;
exports.getLambda = getLambda;
exports.getNumber = getNumber;
exports.getRecord = getRecord;
exports.getString = getString;
exports.getTimeDuration = getTimeDuration;
//# sourceMappingURL=ForTS_SquiggleValue.bs.js.map