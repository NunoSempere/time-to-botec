export namespace FRType {
    export { toString };
    export { matchWithValue };
    export { matchWithValueArray };
}
export namespace FnDefinition {
    export { toString$1 as toString };
    export { isMatch };
    export { run };
    export { make };
}
export namespace $$Function {
    export { make$1 as make };
    export { toJson };
}
export namespace Registry {
    export { toJson$1 as toJson };
    export { allExamples };
    export { allExamplesWithFns };
    export { allNames };
    export { _buildFnNameDict };
    export { make$2 as make };
    export { call };
}
declare function toString(t: any): any;
declare function matchWithValue(t: any, r: any): any;
declare function matchWithValueArray(inputs: any, args: any): any;
declare function toString$1(t: any): string;
declare function isMatch(t: any, args: any): any;
declare function run(t: any, args: any, context: any, reducer: any): any;
declare function make(name: any, inputs: any, run: any, param: any): {
    name: any;
    inputs: any;
    run: any;
};
declare function make$1(name: any, nameSpace: any, requiresNamespace: any, definitions: any, examples: any, output: any, description: any, isExperimentalOpt: any, param: any): {
    name: any;
    definitions: any;
    requiresNamespace: any;
    nameSpace: any;
    output: any;
    examples: any;
    description: any;
    isExperimental: any;
};
declare function toJson(t: any): {
    name: any;
    definitions: any;
    examples: any;
    description: any;
    isExperimental: any;
};
declare function toJson$1(r: any): any;
declare function allExamples(r: any): any;
declare function allExamplesWithFns(r: any): any;
declare function allNames(r: any): any;
declare function _buildFnNameDict(r: any): any;
declare function make$2(fns: any): {
    functions: any;
    fnNameDict: any;
};
declare function call(registry: any, fnName: any, args: any, context: any, reducer: any): any;
export {};
