'use strict';
var Curry = require("@rescript/std/lib/js/curry.js");
var Belt_MapString = require("@rescript/std/lib/js/belt_MapString.js");
var E_A$QuriSquiggleLang = require("../Utility/E/E_A.bs.js");
var E_O$QuriSquiggleLang = require("../Utility/E/E_O.bs.js");
var E_R$QuriSquiggleLang = require("../Utility/E/E_R.bs.js");
var GenericDist$QuriSquiggleLang = require("../Distributions/GenericDist.bs.js");
var SampleSetDist$QuriSquiggleLang = require("../Distributions/SampleSetDist/SampleSetDist.bs.js");
var DistributionTypes$QuriSquiggleLang = require("../Distributions/DistributionTypes.bs.js");
var FunctionRegistry_Core$QuriSquiggleLang = require("./FunctionRegistry_Core.bs.js");
var impossibleErrorString = "Wrong inputs / Logically impossible";
var impossibleError = {
    TAG: 15,
    _0: impossibleErrorString,
    [Symbol.for("name")]: "REOther"
};
function wrapError(e) {
    return {
        TAG: 15,
        _0: e,
        [Symbol.for("name")]: "REOther"
    };
}
function symbolic(r) {
    return {
        TAG: 2,
        _0: r,
        [Symbol.for("name")]: "Symbolic"
    };
}
function pointSet(r) {
    return {
        TAG: 0,
        _0: r,
        [Symbol.for("name")]: "PointSet"
    };
}
function sampleSet(r) {
    return {
        TAG: 1,
        _0: r,
        [Symbol.for("name")]: "SampleSet"
    };
}
function evDistribution(r) {
    return {
        TAG: 4,
        _0: r,
        [Symbol.for("name")]: "IEvDistribution"
    };
}
function evNumber(r) {
    return {
        TAG: 6,
        _0: r,
        [Symbol.for("name")]: "IEvNumber"
    };
}
function evArray(r) {
    return {
        TAG: 0,
        _0: r,
        [Symbol.for("name")]: "IEvArray"
    };
}
function evRecord(r) {
    return {
        TAG: 7,
        _0: r,
        [Symbol.for("name")]: "IEvRecord"
    };
}
function evString(r) {
    return {
        TAG: 8,
        _0: r,
        [Symbol.for("name")]: "IEvString"
    };
}
function symbolicEvDistribution(r) {
    return {
        TAG: 4,
        _0: {
            TAG: 2,
            _0: r,
            [Symbol.for("name")]: "Symbolic"
        },
        [Symbol.for("name")]: "IEvDistribution"
    };
}
function evArrayOfEvNumber(xs) {
    return {
        TAG: 0,
        _0: E_A$QuriSquiggleLang.fmap(xs, evNumber),
        [Symbol.for("name")]: "IEvArray"
    };
}
var Wrappers = {
    symbolic: symbolic,
    pointSet: pointSet,
    sampleSet: sampleSet,
    evDistribution: evDistribution,
    evNumber: evNumber,
    evArray: evArray,
    evRecord: evRecord,
    evString: evString,
    symbolicEvDistribution: symbolicEvDistribution,
    evArrayOfEvNumber: evArrayOfEvNumber
};
function getOrError(a, g) {
    return E_O$QuriSquiggleLang.toResult(E_A$QuriSquiggleLang.get(a, g), impossibleErrorString);
}
function twoArgs(inputs, param) {
    if (inputs.length !== 1) {
        return {
            TAG: 1,
            _0: impossibleErrorString,
            [Symbol.for("name")]: "Error"
        };
    }
    var map = inputs[0];
    if (typeof map === "number") {
        return {
            TAG: 1,
            _0: impossibleErrorString,
            [Symbol.for("name")]: "Error"
        };
    }
    if (map.TAG !== 7) {
        return {
            TAG: 1,
            _0: impossibleErrorString,
            [Symbol.for("name")]: "Error"
        };
    }
    var map$1 = map._0;
    var n1 = Belt_MapString.getExn(map$1, param[0]);
    var n2 = Belt_MapString.getExn(map$1, param[1]);
    return {
        TAG: 0,
        _0: [
            n1,
            n2
        ],
        [Symbol.for("name")]: "Ok"
    };
}
function threeArgs(inputs, param) {
    if (inputs.length !== 1) {
        return {
            TAG: 1,
            _0: impossibleErrorString,
            [Symbol.for("name")]: "Error"
        };
    }
    var map = inputs[0];
    if (typeof map === "number") {
        return {
            TAG: 1,
            _0: impossibleErrorString,
            [Symbol.for("name")]: "Error"
        };
    }
    if (map.TAG !== 7) {
        return {
            TAG: 1,
            _0: impossibleErrorString,
            [Symbol.for("name")]: "Error"
        };
    }
    var map$1 = map._0;
    var n1 = Belt_MapString.getExn(map$1, param[0]);
    var n2 = Belt_MapString.getExn(map$1, param[1]);
    var n3 = Belt_MapString.getExn(map$1, param[2]);
    return {
        TAG: 0,
        _0: [
            n1,
            n2,
            n3
        ],
        [Symbol.for("name")]: "Ok"
    };
}
var Record = {
    twoArgs: twoArgs,
    threeArgs: threeArgs
};
function openA(inputs) {
    if (typeof inputs === "number" || inputs.TAG !== 0) {
        return {
            TAG: 1,
            _0: impossibleErrorString,
            [Symbol.for("name")]: "Error"
        };
    }
    else {
        return {
            TAG: 0,
            _0: inputs._0,
            [Symbol.for("name")]: "Ok"
        };
    }
}
function arrayOfArrays(inputs) {
    if (typeof inputs === "number" || inputs.TAG !== 0) {
        return {
            TAG: 1,
            _0: impossibleErrorString,
            [Symbol.for("name")]: "Error"
        };
    }
    else {
        return E_A$QuriSquiggleLang.R.firstErrorOrOpen(E_A$QuriSquiggleLang.fmap(inputs._0, openA));
    }
}
var $$Array = {
    openA: openA,
    arrayOfArrays: arrayOfArrays
};
var ToValueArray = {
    Record: Record,
    $$Array: $$Array
};
function twoDistOrNumber(values) {
    if (values.length !== 2) {
        return {
            TAG: 1,
            _0: impossibleErrorString,
            [Symbol.for("name")]: "Error"
        };
    }
    var a1 = values[0];
    if (typeof a1 === "number") {
        return {
            TAG: 1,
            _0: impossibleErrorString,
            [Symbol.for("name")]: "Error"
        };
    }
    switch (a1.TAG | 0) {
        case 4:
            var a1$1 = a1._0;
            var a2 = values[1];
            if (typeof a2 === "number") {
                return {
                    TAG: 1,
                    _0: impossibleErrorString,
                    [Symbol.for("name")]: "Error"
                };
            }
            switch (a2.TAG | 0) {
                case 4:
                    return {
                        TAG: 0,
                        _0: [
                            {
                                TAG: 1,
                                _0: a1$1,
                                [Symbol.for("name")]: "FRValueDist"
                            },
                            {
                                TAG: 1,
                                _0: a2._0,
                                [Symbol.for("name")]: "FRValueDist"
                            }
                        ],
                        [Symbol.for("name")]: "Ok"
                    };
                case 6:
                    return {
                        TAG: 0,
                        _0: [
                            {
                                TAG: 1,
                                _0: a1$1,
                                [Symbol.for("name")]: "FRValueDist"
                            },
                            {
                                TAG: 0,
                                _0: a2._0,
                                [Symbol.for("name")]: "FRValueNumber"
                            }
                        ],
                        [Symbol.for("name")]: "Ok"
                    };
                default:
                    return {
                        TAG: 1,
                        _0: impossibleErrorString,
                        [Symbol.for("name")]: "Error"
                    };
            }
        case 6:
            var a1$2 = a1._0;
            var a2$1 = values[1];
            if (typeof a2$1 === "number") {
                return {
                    TAG: 1,
                    _0: impossibleErrorString,
                    [Symbol.for("name")]: "Error"
                };
            }
            switch (a2$1.TAG | 0) {
                case 4:
                    return {
                        TAG: 0,
                        _0: [
                            {
                                TAG: 0,
                                _0: a1$2,
                                [Symbol.for("name")]: "FRValueNumber"
                            },
                            {
                                TAG: 1,
                                _0: a2$1._0,
                                [Symbol.for("name")]: "FRValueDist"
                            }
                        ],
                        [Symbol.for("name")]: "Ok"
                    };
                case 6:
                    return {
                        TAG: 0,
                        _0: [
                            {
                                TAG: 0,
                                _0: a1$2,
                                [Symbol.for("name")]: "FRValueNumber"
                            },
                            {
                                TAG: 0,
                                _0: a2$1._0,
                                [Symbol.for("name")]: "FRValueNumber"
                            }
                        ],
                        [Symbol.for("name")]: "Ok"
                    };
                default:
                    return {
                        TAG: 1,
                        _0: impossibleErrorString,
                        [Symbol.for("name")]: "Error"
                    };
            }
        default:
            return {
                TAG: 1,
                _0: impossibleErrorString,
                [Symbol.for("name")]: "Error"
            };
    }
}
function twoDist(values) {
    if (values.length !== 2) {
        return {
            TAG: 1,
            _0: impossibleErrorString,
            [Symbol.for("name")]: "Error"
        };
    }
    var a1 = values[0];
    if (typeof a1 === "number") {
        return {
            TAG: 1,
            _0: impossibleErrorString,
            [Symbol.for("name")]: "Error"
        };
    }
    if (a1.TAG !== 4) {
        return {
            TAG: 1,
            _0: impossibleErrorString,
            [Symbol.for("name")]: "Error"
        };
    }
    var a2 = values[1];
    if (typeof a2 === "number" || a2.TAG !== 4) {
        return {
            TAG: 1,
            _0: impossibleErrorString,
            [Symbol.for("name")]: "Error"
        };
    }
    else {
        return {
            TAG: 0,
            _0: [
                a1._0,
                a2._0
            ],
            [Symbol.for("name")]: "Ok"
        };
    }
}
function twoNumbers(values) {
    if (values.length !== 2) {
        return {
            TAG: 1,
            _0: impossibleErrorString,
            [Symbol.for("name")]: "Error"
        };
    }
    var a1 = values[0];
    if (typeof a1 === "number") {
        return {
            TAG: 1,
            _0: impossibleErrorString,
            [Symbol.for("name")]: "Error"
        };
    }
    if (a1.TAG !== 6) {
        return {
            TAG: 1,
            _0: impossibleErrorString,
            [Symbol.for("name")]: "Error"
        };
    }
    var a2 = values[1];
    if (typeof a2 === "number" || a2.TAG !== 6) {
        return {
            TAG: 1,
            _0: impossibleErrorString,
            [Symbol.for("name")]: "Error"
        };
    }
    else {
        return {
            TAG: 0,
            _0: [
                a1._0,
                a2._0
            ],
            [Symbol.for("name")]: "Ok"
        };
    }
}
function threeNumbers(values) {
    if (values.length !== 3) {
        return {
            TAG: 1,
            _0: impossibleErrorString,
            [Symbol.for("name")]: "Error"
        };
    }
    var a1 = values[0];
    if (typeof a1 === "number") {
        return {
            TAG: 1,
            _0: impossibleErrorString,
            [Symbol.for("name")]: "Error"
        };
    }
    if (a1.TAG !== 6) {
        return {
            TAG: 1,
            _0: impossibleErrorString,
            [Symbol.for("name")]: "Error"
        };
    }
    var a2 = values[1];
    if (typeof a2 === "number") {
        return {
            TAG: 1,
            _0: impossibleErrorString,
            [Symbol.for("name")]: "Error"
        };
    }
    if (a2.TAG !== 6) {
        return {
            TAG: 1,
            _0: impossibleErrorString,
            [Symbol.for("name")]: "Error"
        };
    }
    var a3 = values[2];
    if (typeof a3 === "number" || a3.TAG !== 6) {
        return {
            TAG: 1,
            _0: impossibleErrorString,
            [Symbol.for("name")]: "Error"
        };
    }
    else {
        return {
            TAG: 0,
            _0: [
                a1._0,
                a2._0,
                a3._0
            ],
            [Symbol.for("name")]: "Ok"
        };
    }
}
function oneDistOrNumber(values) {
    if (values.length !== 1) {
        return {
            TAG: 1,
            _0: impossibleErrorString,
            [Symbol.for("name")]: "Error"
        };
    }
    var a1 = values[0];
    if (typeof a1 === "number") {
        return {
            TAG: 1,
            _0: impossibleErrorString,
            [Symbol.for("name")]: "Error"
        };
    }
    switch (a1.TAG | 0) {
        case 4:
            return {
                TAG: 0,
                _0: {
                    TAG: 1,
                    _0: a1._0,
                    [Symbol.for("name")]: "FRValueDist"
                },
                [Symbol.for("name")]: "Ok"
            };
        case 6:
            return {
                TAG: 0,
                _0: {
                    TAG: 0,
                    _0: a1._0,
                    [Symbol.for("name")]: "FRValueNumber"
                },
                [Symbol.for("name")]: "Ok"
            };
        default:
            return {
                TAG: 1,
                _0: impossibleErrorString,
                [Symbol.for("name")]: "Error"
            };
    }
}
function twoDistOrNumber$1(values, labels) {
    return E_R$QuriSquiggleLang.bind(twoArgs(values, labels), twoDistOrNumber);
}
function twoDist$1(values, labels) {
    return E_R$QuriSquiggleLang.bind(twoArgs(values, labels), twoDist);
}
var Record$1 = {
    twoDistOrNumber: twoDistOrNumber$1,
    twoDist: twoDist$1
};
var ToValueTuple = {
    twoDistOrNumber: twoDistOrNumber,
    twoDist: twoDist,
    twoNumbers: twoNumbers,
    threeNumbers: threeNumbers,
    oneDistOrNumber: oneDistOrNumber,
    Record: Record$1
};
function oneNumber(value) {
    if (typeof value === "number" || value.TAG !== 6) {
        return {
            TAG: 1,
            _0: impossibleErrorString,
            [Symbol.for("name")]: "Error"
        };
    }
    else {
        return {
            TAG: 0,
            _0: value._0,
            [Symbol.for("name")]: "Ok"
        };
    }
}
function oneDict(value) {
    if (typeof value === "number" || value.TAG !== 7) {
        return {
            TAG: 1,
            _0: impossibleErrorString,
            [Symbol.for("name")]: "Error"
        };
    }
    else {
        return {
            TAG: 0,
            _0: value._0,
            [Symbol.for("name")]: "Ok"
        };
    }
}
function numbers(inputs) {
    var openNumbers = function (elements) {
        return E_A$QuriSquiggleLang.R.firstErrorOrOpen(E_A$QuriSquiggleLang.fmap(elements, oneNumber));
    };
    return E_R$QuriSquiggleLang.bind(E_R$QuriSquiggleLang.bind(getOrError(inputs, 0), openA), openNumbers);
}
function dicts(inputs) {
    var openDicts = function (elements) {
        return E_A$QuriSquiggleLang.R.firstErrorOrOpen(E_A$QuriSquiggleLang.fmap(elements, oneDict));
    };
    return E_R$QuriSquiggleLang.bind(E_R$QuriSquiggleLang.bind(getOrError(inputs, 0), openA), openDicts);
}
var ToTypedArray = {
    numbers: numbers,
    dicts: dicts
};
var Prepare = {
    ToValueArray: ToValueArray,
    ToValueTuple: ToValueTuple,
    oneNumber: oneNumber,
    oneDict: oneDict,
    ToTypedArray: ToTypedArray
};
function toSampleSet(r, env) {
    return GenericDist$QuriSquiggleLang.toSampleSetDist(r, env.sampleCount);
}
function mapFnResult(r) {
    if (r.TAG === 0) {
        return {
            TAG: 0,
            _0: GenericDist$QuriSquiggleLang.sample(r._0),
            [Symbol.for("name")]: "Ok"
        };
    }
    else {
        return {
            TAG: 1,
            _0: {
                _0: r._0,
                [Symbol.for("name")]: "Other"
            },
            [Symbol.for("name")]: "Error"
        };
    }
}
function wrapSymbolic(fn, r) {
    return E_R$QuriSquiggleLang.fmap(Curry._1(fn, r), symbolic);
}
function singleVarSample(dist, fn, env) {
    var dist$1 = GenericDist$QuriSquiggleLang.toSampleSetDist(dist, env.sampleCount);
    if (dist$1.TAG !== 0) {
        return {
            TAG: 1,
            _0: DistributionTypes$QuriSquiggleLang.$$Error.toString(dist$1._0),
            [Symbol.for("name")]: "Error"
        };
    }
    var r = SampleSetDist$QuriSquiggleLang.samplesMap((function (f) {
        return mapFnResult(Curry._1(fn, f));
    }), dist$1._0);
    if (r.TAG === 0) {
        return {
            TAG: 0,
            _0: {
                TAG: 1,
                _0: r._0,
                [Symbol.for("name")]: "SampleSet"
            },
            [Symbol.for("name")]: "Ok"
        };
    }
    else {
        return {
            TAG: 1,
            _0: DistributionTypes$QuriSquiggleLang.$$Error.toString({
                TAG: 0,
                _0: r._0,
                [Symbol.for("name")]: "SampleSetError"
            }),
            [Symbol.for("name")]: "Error"
        };
    }
}
function twoVarSample(dist1, dist2, fn, env) {
    var altFn = function (a, b) {
        return mapFnResult(Curry._1(fn, [
            a,
            b
        ]));
    };
    var r = E_R$QuriSquiggleLang.merge(GenericDist$QuriSquiggleLang.toSampleSetDist(dist1, env.sampleCount), GenericDist$QuriSquiggleLang.toSampleSetDist(dist2, env.sampleCount));
    if (r.TAG !== 0) {
        return {
            TAG: 1,
            _0: DistributionTypes$QuriSquiggleLang.$$Error.toString(r._0),
            [Symbol.for("name")]: "Error"
        };
    }
    var match = r._0;
    var r$1 = SampleSetDist$QuriSquiggleLang.map2(altFn, match[0], match[1]);
    if (r$1.TAG === 0) {
        return {
            TAG: 0,
            _0: {
                TAG: 1,
                _0: r$1._0,
                [Symbol.for("name")]: "SampleSet"
            },
            [Symbol.for("name")]: "Ok"
        };
    }
    else {
        return {
            TAG: 1,
            _0: SampleSetDist$QuriSquiggleLang.$$Error.toString(r$1._0),
            [Symbol.for("name")]: "Error"
        };
    }
}
var Helpers = {
    toSampleSet: toSampleSet,
    mapFnResult: mapFnResult,
    wrapSymbolic: wrapSymbolic,
    singleVarSample: singleVarSample,
    twoVarSample: twoVarSample
};
function oneValue(fn, value, env) {
    if (value.TAG === 0) {
        return Curry._1(fn, value._0);
    }
    else {
        return singleVarSample(value._0, Curry.__1(fn), env);
    }
}
function oneValueUsingSymbolicDist(fn, value) {
    return function (param) {
        return oneValue((function (param) {
            return E_R$QuriSquiggleLang.fmap(Curry._1(fn, param), symbolic);
        }), value, param);
    };
}
function twoValues(fn, values, env) {
    var a1 = values[0];
    if (a1.TAG === 0) {
        var a2 = values[1];
        var a1$1 = a1._0;
        if (a2.TAG === 0) {
            return Curry._1(fn, [
                a1$1,
                a2._0
            ]);
        }
        else {
            return singleVarSample(a2._0, (function (r) {
                return Curry._1(fn, [
                    a1$1,
                    r
                ]);
            }), env);
        }
    }
    var a2$1 = values[1];
    var a1$2 = a1._0;
    if (a2$1.TAG !== 0) {
        return twoVarSample(a1$2, a2$1._0, fn, env);
    }
    var a2$2 = a2$1._0;
    return singleVarSample(a1$2, (function (r) {
        return Curry._1(fn, [
            r,
            a2$2
        ]);
    }), env);
}
function twoValuesUsingSymbolicDist(fn, values) {
    return function (param) {
        return twoValues((function (param) {
            return E_R$QuriSquiggleLang.fmap(Curry._1(fn, param), symbolic);
        }), values, param);
    };
}
var DistOrNumberToDist = {
    Helpers: Helpers,
    oneValue: oneValue,
    oneValueUsingSymbolicDist: oneValueUsingSymbolicDist,
    twoValues: twoValues,
    twoValuesUsingSymbolicDist: twoValuesUsingSymbolicDist
};
var Process = {
    DistOrNumberToDist: DistOrNumberToDist
};
function oneToOne(name, fn) {
    return FunctionRegistry_Core$QuriSquiggleLang.FnDefinition.make(name, [0], (function (inputs, param, param$1) {
        if (inputs.length !== 1) {
            return {
                TAG: 1,
                _0: impossibleError,
                [Symbol.for("name")]: "Error"
            };
        }
        var x = inputs[0];
        if (typeof x === "number" || x.TAG !== 6) {
            return {
                TAG: 1,
                _0: impossibleError,
                [Symbol.for("name")]: "Error"
            };
        }
        else {
            return {
                TAG: 0,
                _0: {
                    TAG: 6,
                    _0: Curry._1(fn, x._0),
                    [Symbol.for("name")]: "IEvNumber"
                },
                [Symbol.for("name")]: "Ok"
            };
        }
    }), undefined);
}
function twoToOne(name, fn) {
    return FunctionRegistry_Core$QuriSquiggleLang.FnDefinition.make(name, [
        0,
        0
    ], (function (inputs, param, param$1) {
        if (inputs.length !== 2) {
            return {
                TAG: 1,
                _0: impossibleError,
                [Symbol.for("name")]: "Error"
            };
        }
        var x = inputs[0];
        if (typeof x === "number") {
            return {
                TAG: 1,
                _0: impossibleError,
                [Symbol.for("name")]: "Error"
            };
        }
        if (x.TAG !== 6) {
            return {
                TAG: 1,
                _0: impossibleError,
                [Symbol.for("name")]: "Error"
            };
        }
        var y = inputs[1];
        if (typeof y === "number" || y.TAG !== 6) {
            return {
                TAG: 1,
                _0: impossibleError,
                [Symbol.for("name")]: "Error"
            };
        }
        else {
            return {
                TAG: 0,
                _0: {
                    TAG: 6,
                    _0: Curry._2(fn, x._0, y._0),
                    [Symbol.for("name")]: "IEvNumber"
                },
                [Symbol.for("name")]: "Ok"
            };
        }
    }), undefined);
}
function threeToOne(name, fn) {
    return FunctionRegistry_Core$QuriSquiggleLang.FnDefinition.make(name, [
        0,
        0,
        0
    ], (function (inputs, param, param$1) {
        if (inputs.length !== 3) {
            return {
                TAG: 1,
                _0: impossibleError,
                [Symbol.for("name")]: "Error"
            };
        }
        var x = inputs[0];
        if (typeof x === "number") {
            return {
                TAG: 1,
                _0: impossibleError,
                [Symbol.for("name")]: "Error"
            };
        }
        if (x.TAG !== 6) {
            return {
                TAG: 1,
                _0: impossibleError,
                [Symbol.for("name")]: "Error"
            };
        }
        var y = inputs[1];
        if (typeof y === "number") {
            return {
                TAG: 1,
                _0: impossibleError,
                [Symbol.for("name")]: "Error"
            };
        }
        if (y.TAG !== 6) {
            return {
                TAG: 1,
                _0: impossibleError,
                [Symbol.for("name")]: "Error"
            };
        }
        var z = inputs[2];
        if (typeof z === "number" || z.TAG !== 6) {
            return {
                TAG: 1,
                _0: impossibleError,
                [Symbol.for("name")]: "Error"
            };
        }
        else {
            return {
                TAG: 0,
                _0: {
                    TAG: 6,
                    _0: Curry._3(fn, x._0, y._0, z._0),
                    [Symbol.for("name")]: "IEvNumber"
                },
                [Symbol.for("name")]: "Ok"
            };
        }
    }), undefined);
}
var Numbers = {
    oneToOne: oneToOne,
    twoToOne: twoToOne,
    threeToOne: threeToOne
};
var DefineFn = {
    Numbers: Numbers
};
function f2f(name, fn, nameSpaceOpt, requiresNamespaceOpt, examples, param) {
    var nameSpace = nameSpaceOpt !== undefined ? nameSpaceOpt : "";
    var requiresNamespace = requiresNamespaceOpt !== undefined ? requiresNamespaceOpt : false;
    return FunctionRegistry_Core$QuriSquiggleLang.$$Function.make(name, nameSpace, requiresNamespace, [FunctionRegistry_Core$QuriSquiggleLang.FnDefinition.make(name, [0], (function (inputs, param, param$1) {
            if (inputs.length !== 1) {
                return {
                    TAG: 1,
                    _0: impossibleError,
                    [Symbol.for("name")]: "Error"
                };
            }
            var x = inputs[0];
            if (typeof x === "number" || x.TAG !== 6) {
                return {
                    TAG: 1,
                    _0: impossibleError,
                    [Symbol.for("name")]: "Error"
                };
            }
            else {
                return {
                    TAG: 0,
                    _0: {
                        TAG: 6,
                        _0: Curry._1(fn, x._0),
                        [Symbol.for("name")]: "IEvNumber"
                    },
                    [Symbol.for("name")]: "Ok"
                };
            }
        }), undefined)], E_O$QuriSquiggleLang.$$default(examples, []), 6, undefined, undefined, undefined);
}
function ff2f(name, fn, nameSpaceOpt, requiresNamespaceOpt, examples, param) {
    var nameSpace = nameSpaceOpt !== undefined ? nameSpaceOpt : "";
    var requiresNamespace = requiresNamespaceOpt !== undefined ? requiresNamespaceOpt : false;
    return FunctionRegistry_Core$QuriSquiggleLang.$$Function.make(name, nameSpace, requiresNamespace, [FunctionRegistry_Core$QuriSquiggleLang.FnDefinition.make(name, [
            0,
            0
        ], (function (inputs, param, param$1) {
            if (inputs.length !== 2) {
                return {
                    TAG: 1,
                    _0: impossibleError,
                    [Symbol.for("name")]: "Error"
                };
            }
            var x = inputs[0];
            if (typeof x === "number") {
                return {
                    TAG: 1,
                    _0: impossibleError,
                    [Symbol.for("name")]: "Error"
                };
            }
            if (x.TAG !== 6) {
                return {
                    TAG: 1,
                    _0: impossibleError,
                    [Symbol.for("name")]: "Error"
                };
            }
            var y = inputs[1];
            if (typeof y === "number" || y.TAG !== 6) {
                return {
                    TAG: 1,
                    _0: impossibleError,
                    [Symbol.for("name")]: "Error"
                };
            }
            else {
                return {
                    TAG: 0,
                    _0: {
                        TAG: 6,
                        _0: Curry._2(fn, x._0, y._0),
                        [Symbol.for("name")]: "IEvNumber"
                    },
                    [Symbol.for("name")]: "Ok"
                };
            }
        }), undefined)], E_O$QuriSquiggleLang.$$default(examples, []), 6, undefined, undefined, undefined);
}
function ff2b(name, fn, nameSpaceOpt, requiresNamespaceOpt, examples, param) {
    var nameSpace = nameSpaceOpt !== undefined ? nameSpaceOpt : "";
    var requiresNamespace = requiresNamespaceOpt !== undefined ? requiresNamespaceOpt : false;
    return FunctionRegistry_Core$QuriSquiggleLang.$$Function.make(name, nameSpace, requiresNamespace, [FunctionRegistry_Core$QuriSquiggleLang.FnDefinition.make(name, [
            0,
            0
        ], (function (inputs, param, param$1) {
            if (inputs.length !== 2) {
                return {
                    TAG: 1,
                    _0: impossibleError,
                    [Symbol.for("name")]: "Error"
                };
            }
            var x = inputs[0];
            if (typeof x === "number") {
                return {
                    TAG: 1,
                    _0: impossibleError,
                    [Symbol.for("name")]: "Error"
                };
            }
            if (x.TAG !== 6) {
                return {
                    TAG: 1,
                    _0: impossibleError,
                    [Symbol.for("name")]: "Error"
                };
            }
            var y = inputs[1];
            if (typeof y === "number" || y.TAG !== 6) {
                return {
                    TAG: 1,
                    _0: impossibleError,
                    [Symbol.for("name")]: "Error"
                };
            }
            else {
                return {
                    TAG: 0,
                    _0: {
                        TAG: 1,
                        _0: Curry._2(fn, x._0, y._0),
                        [Symbol.for("name")]: "IEvBool"
                    },
                    [Symbol.for("name")]: "Ok"
                };
            }
        }), undefined)], E_O$QuriSquiggleLang.$$default(examples, []), 1, undefined, undefined, undefined);
}
function bb2b(name, fn, nameSpaceOpt, requiresNamespaceOpt, examples, param) {
    var nameSpace = nameSpaceOpt !== undefined ? nameSpaceOpt : "";
    var requiresNamespace = requiresNamespaceOpt !== undefined ? requiresNamespaceOpt : false;
    return FunctionRegistry_Core$QuriSquiggleLang.$$Function.make(name, nameSpace, requiresNamespace, [FunctionRegistry_Core$QuriSquiggleLang.FnDefinition.make(name, [
            1,
            1
        ], (function (inputs, param, param$1) {
            if (inputs.length !== 2) {
                return {
                    TAG: 1,
                    _0: impossibleError,
                    [Symbol.for("name")]: "Error"
                };
            }
            var x = inputs[0];
            if (typeof x === "number") {
                return {
                    TAG: 1,
                    _0: impossibleError,
                    [Symbol.for("name")]: "Error"
                };
            }
            if (x.TAG !== 1) {
                return {
                    TAG: 1,
                    _0: impossibleError,
                    [Symbol.for("name")]: "Error"
                };
            }
            var y = inputs[1];
            if (typeof y === "number" || y.TAG !== 1) {
                return {
                    TAG: 1,
                    _0: impossibleError,
                    [Symbol.for("name")]: "Error"
                };
            }
            else {
                return {
                    TAG: 0,
                    _0: {
                        TAG: 1,
                        _0: Curry._2(fn, x._0, y._0),
                        [Symbol.for("name")]: "IEvBool"
                    },
                    [Symbol.for("name")]: "Ok"
                };
            }
        }), undefined)], E_O$QuriSquiggleLang.$$default(examples, []), 1, undefined, undefined, undefined);
}
var Make = {
    f2f: f2f,
    ff2f: ff2f,
    ff2b: ff2b,
    bb2b: bb2b
};
exports.impossibleErrorString = impossibleErrorString;
exports.impossibleError = impossibleError;
exports.wrapError = wrapError;
exports.Wrappers = Wrappers;
exports.getOrError = getOrError;
exports.Prepare = Prepare;
exports.Process = Process;
exports.DefineFn = DefineFn;
exports.Make = Make;
//# sourceMappingURL=FunctionRegistry_Helpers.bs.js.map